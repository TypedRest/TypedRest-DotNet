{
  "api/TypedRest.ActivityExtensions.html": {
    "href": "api/TypedRest.ActivityExtensions.html",
    "title": "Class ActivityExtensions | TypedRest for .NET",
    "summary": "Class ActivityExtensions Namespace TypedRest Assembly TypedRest.dll Provides extension methods for Activity. public static class ActivityExtensions Inheritance object ActivityExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddException(Activity, Exception) Updates the activity to have tags encoding the specified exception. public static Activity AddException(this Activity activity, Exception exception) Parameters activity Activity exception Exception Returns Activity"
  },
  "api/TypedRest.ArrayExtensions.html": {
    "href": "api/TypedRest.ArrayExtensions.html",
    "title": "Class ArrayExtensions | TypedRest for .NET",
    "summary": "Class ArrayExtensions Namespace TypedRest Assembly TypedRest.Reactive.dll Provides extension methods for arrays. public static class ArrayExtensions Inheritance object ArrayExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IndexOfPattern<T>(T[], T[], int, int) Searches for the starting index of a specific pattern/sequence in the array. public static int IndexOfPattern<T>(this T[] array, T[] pattern, int startIndex = 0, int count = 2147483647) where T : IEquatable<T> Parameters array T[] The array to search. pattern T[] The pattern to search for. startIndex int The starting index of the search. count int The maximum number of elements in the array to search. Returns int The start index of the first occurrence of the pattern, if found; otherwise, â€“1. Type Parameters T The type of the elements of the array."
  },
  "api/TypedRest.CommandLine.CliEndpointProvider-1.html": {
    "href": "api/TypedRest.CommandLine.CliEndpointProvider-1.html",
    "title": "Class CliEndpointProvider<T> | TypedRest for .NET",
    "summary": "Class CliEndpointProvider<T> Namespace TypedRest.CommandLine Assembly TypedRest.CommandLine.dll Builds EntryEndpoints using config files, interactive authentication, OAuth tokens, etc. public class CliEndpointProvider<T> : EndpointProviderBase<T>, IEndpointProvider<T> where T : EntryEndpoint Type Parameters T The type of entry endpoint to be created. Must have a constructor with the following signature: (Uri) Inheritance object EndpointProviderBase<T> CliEndpointProvider<T> Implements IEndpointProvider<T> Inherited Members EndpointProviderBase<T>.ConfigDir EndpointProviderBase<T>.GetUri() EndpointProviderBase<T>.TokenCacheFile EndpointProviderBase<T>.ResetAuthentication() EndpointProviderBase<T>.Build() EndpointProviderBase<T>.NewEndpoint(Uri) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Console The text input/output device used for user interaction. public IConsole Console { get; set; } Property Value IConsole Methods RequestToken(Uri) Asks the user or a service for the OAuth token to present as a \"Bearer\" to the REST API. protected override string RequestToken(Uri uri) Parameters uri Uri Returns string The OAuth token or null if it cannot be requested. RequestUri() Asks the user or a service for the base URI of the REST API. protected override Uri RequestUri() Returns Uri The endpoint URI or null if it cannot be requested. ShowTokenProvider(Uri) Tries to determine a website that provides tokens for uri and opens it in the default browser. protected virtual void ShowTokenProvider(Uri uri) Parameters uri Uri"
  },
  "api/TypedRest.CommandLine.Commands.EndpointCommand-1.html": {
    "href": "api/TypedRest.CommandLine.Commands.EndpointCommand-1.html",
    "title": "Class EndpointCommand<TEndpoint> | TypedRest for .NET",
    "summary": "Class EndpointCommand<TEndpoint> Namespace TypedRest.CommandLine.Commands Assembly TypedRest.CommandLine.dll Command operating on an IEndpoint. public abstract class EndpointCommand<TEndpoint> : IEndpointCommand where TEndpoint : IEndpoint Type Parameters TEndpoint The specific type of IEndpoint to operate on. Inheritance object EndpointCommand<TEndpoint> Implements IEndpointCommand Derived EntryCommand<TEndpoint> ElementCommand<TEntity> IndexerCommand<TEndpoint, TElementEndpoint, TElementCommand> BlobCommand UploadCommand StreamingCommand<TEntity, TEndpoint> ActionCommand ConsumerCommand<TEntity> FunctionCommand<TEntity, TResult> ProducerCommand<TResult> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EndpointCommand(TEndpoint) Command operating on an IEndpoint. protected EndpointCommand(TEndpoint endpoint) Parameters endpoint TEndpoint The endpoint this command operates on. Fields Endpoint The endpoint this command operates on. protected readonly TEndpoint Endpoint Field Value TEndpoint Properties Console The text input/output device used for user interaction. public IConsole Console { get; set; } Property Value IConsole Methods ExecuteAsync(IReadOnlyList<string>, CancellationToken) Parses command-line arguments and executes the resulting operation. public virtual Task ExecuteAsync(IReadOnlyList<string> args, CancellationToken cancellationToken = default) Parameters args IReadOnlyList<string> the console arguments. cancellationToken CancellationToken Used to cancel the request. Returns Task ExecuteInnerAsync(IReadOnlyList<string>, CancellationToken) Parses command-line arguments and executes the resulting operation when no additional sub-IEndpointCommand is specified. protected virtual Task ExecuteInnerAsync(IReadOnlyList<string> args, CancellationToken cancellationToken = default) Parameters args IReadOnlyList<string> the console arguments. cancellationToken CancellationToken Used to cancel the request. Returns Task GetSubCommand(string) Creates a sub-IEndpointCommand based on the given name. protected virtual IEndpointCommand? GetSubCommand(string name) Parameters name string Returns IEndpointCommand The IEndpointCommand or null if the name does not match. Input<T>(IReadOnlyList<string>) Reads an input object (usually in JSON format) either from the command-line or stdin. protected virtual T Input<T>(IReadOnlyList<string> args) Parameters args IReadOnlyList<string> The command-line to check for input data. Returns T Type Parameters T The type of object to read."
  },
  "api/TypedRest.CommandLine.Commands.EntryCommand-1.html": {
    "href": "api/TypedRest.CommandLine.Commands.EntryCommand-1.html",
    "title": "Class EntryCommand<TEndpoint> | TypedRest for .NET",
    "summary": "Class EntryCommand<TEndpoint> Namespace TypedRest.CommandLine.Commands Assembly TypedRest.CommandLine.dll Command providing an entry point to a hierarchy of named IEndpointCommands. public class EntryCommand<TEndpoint> : EndpointCommand<TEndpoint>, IEndpointCommand, IEnumerable<KeyValuePair<string, Func<TEndpoint, IEndpointCommand>>>, IEnumerable where TEndpoint : IEndpoint Type Parameters TEndpoint Inheritance object EndpointCommand<TEndpoint> EntryCommand<TEndpoint> Implements IEndpointCommand IEnumerable<KeyValuePair<string, Func<TEndpoint, IEndpointCommand>>> IEnumerable Inherited Members EndpointCommand<TEndpoint>.Endpoint EndpointCommand<TEndpoint>.Console EndpointCommand<TEndpoint>.ExecuteAsync(IReadOnlyList<string>, CancellationToken) EndpointCommand<TEndpoint>.Input<T>(IReadOnlyList<string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EntryCommand(TEndpoint) Command providing an entry point to a hierarchy of named IEndpointCommands. public EntryCommand(TEndpoint endpoint) Parameters endpoint TEndpoint The endpoint this command operates on. Methods Add(string, Func<TEndpoint, IEndpointCommand>) public void Add(string name, Func<TEndpoint, IEndpointCommand> commandProvider) Parameters name string commandProvider Func<TEndpoint, IEndpointCommand> ExecuteInnerAsync(IReadOnlyList<string>, CancellationToken) Parses command-line arguments and executes the resulting operation when no additional sub-IEndpointCommand is specified. protected override Task ExecuteInnerAsync(IReadOnlyList<string> args, CancellationToken cancellationToken = default) Parameters args IReadOnlyList<string> the console arguments. cancellationToken CancellationToken Used to cancel the request. Returns Task GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<KeyValuePair<string, Func<TEndpoint, IEndpointCommand>>> GetEnumerator() Returns IEnumerator<KeyValuePair<string, Func<TEndpoint, IEndpointCommand>>> An enumerator that can be used to iterate through the collection. GetSubCommand(string) Creates a sub-IEndpointCommand based on the given name. protected override IEndpointCommand? GetSubCommand(string name) Parameters name string Returns IEndpointCommand The IEndpointCommand or null if the name does not match."
  },
  "api/TypedRest.CommandLine.Commands.Generic.CollectionCommand-1.html": {
    "href": "api/TypedRest.CommandLine.Commands.Generic.CollectionCommand-1.html",
    "title": "Class CollectionCommand<TEntity> | TypedRest for .NET",
    "summary": "Class CollectionCommand<TEntity> Namespace TypedRest.CommandLine.Commands.Generic Assembly TypedRest.CommandLine.dll Command operating on a ICollectionEndpoint<TEntity>. public class CollectionCommand<TEntity> : CollectionCommand<TEntity, IElementEndpoint<TEntity>, ElementCommand<TEntity>>, IEndpointCommand where TEntity : class Type Parameters TEntity The type of entity the endpoint represents. Inheritance object EndpointCommand<ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>> IndexerCommand<ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>, IElementEndpoint<TEntity>, ElementCommand<TEntity>> CollectionCommand<TEntity, ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>, IElementEndpoint<TEntity>, ElementCommand<TEntity>> CollectionCommand<TEntity, IElementEndpoint<TEntity>, ElementCommand<TEntity>> CollectionCommand<TEntity> Implements IEndpointCommand Inherited Members CollectionCommand<TEntity, ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>, IElementEndpoint<TEntity>, ElementCommand<TEntity>>.ExecuteAsync(IReadOnlyList<string>, CancellationToken) CollectionCommand<TEntity, ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>, IElementEndpoint<TEntity>, ElementCommand<TEntity>>.InputEntity(IReadOnlyList<string>) CollectionCommand<TEntity, ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>, IElementEndpoint<TEntity>, ElementCommand<TEntity>>.InputEntities(IReadOnlyList<string>) CollectionCommand<TEntity, ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>, IElementEndpoint<TEntity>, ElementCommand<TEntity>>.OutputEntities(IEnumerable<TEntity>) IndexerCommand<ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>, IElementEndpoint<TEntity>, ElementCommand<TEntity>>.GetSubCommand(string) IndexerCommand<ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>, IElementEndpoint<TEntity>, ElementCommand<TEntity>>.GetElementCommand(IElementEndpoint<TEntity>) EndpointCommand<ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>>.Endpoint EndpointCommand<ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>>.Console EndpointCommand<ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>>.ExecuteAsync(IReadOnlyList<string>, CancellationToken) EndpointCommand<ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>>.GetSubCommand(string) EndpointCommand<ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>>.ExecuteInnerAsync(IReadOnlyList<string>, CancellationToken) EndpointCommand<ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>>.Input<T>(IReadOnlyList<string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CollectionCommand(ICollectionEndpoint<TEntity>) Command operating on a ICollectionEndpoint<TEntity>. public CollectionCommand(ICollectionEndpoint<TEntity> endpoint) Parameters endpoint ICollectionEndpoint<TEntity> The endpoint this command operates on."
  },
  "api/TypedRest.CommandLine.Commands.Generic.CollectionCommand-3.html": {
    "href": "api/TypedRest.CommandLine.Commands.Generic.CollectionCommand-3.html",
    "title": "Class CollectionCommand<TEntity, TElementEndpoint, TElementCommand> | TypedRest for .NET",
    "summary": "Class CollectionCommand<TEntity, TElementEndpoint, TElementCommand> Namespace TypedRest.CommandLine.Commands.Generic Assembly TypedRest.CommandLine.dll Command operating on a ICollectionEndpoint<TEntity, TElementEndpoint>. public class CollectionCommand<TEntity, TElementEndpoint, TElementCommand> : CollectionCommand<TEntity, ICollectionEndpoint<TEntity, TElementEndpoint>, TElementEndpoint, TElementCommand>, IEndpointCommand where TEntity : class where TElementEndpoint : IElementEndpoint<TEntity> where TElementCommand : IEndpointCommand Type Parameters TEntity The type of entity the endpoint represents. TElementEndpoint The specific type of IElementEndpoint<TEntity> the endpoint provides for individual TEntitys. TElementCommand The specific type of IEndpointCommand is used to handle TElementEndpoints. Must have a public constructor with a TElementEndpoint parameter. Inheritance object EndpointCommand<ICollectionEndpoint<TEntity, TElementEndpoint>> IndexerCommand<ICollectionEndpoint<TEntity, TElementEndpoint>, TElementEndpoint, TElementCommand> CollectionCommand<TEntity, ICollectionEndpoint<TEntity, TElementEndpoint>, TElementEndpoint, TElementCommand> CollectionCommand<TEntity, TElementEndpoint, TElementCommand> Implements IEndpointCommand Derived CollectionCommand<TEntity> Inherited Members CollectionCommand<TEntity, ICollectionEndpoint<TEntity, TElementEndpoint>, TElementEndpoint, TElementCommand>.ExecuteAsync(IReadOnlyList<string>, CancellationToken) CollectionCommand<TEntity, ICollectionEndpoint<TEntity, TElementEndpoint>, TElementEndpoint, TElementCommand>.InputEntity(IReadOnlyList<string>) CollectionCommand<TEntity, ICollectionEndpoint<TEntity, TElementEndpoint>, TElementEndpoint, TElementCommand>.InputEntities(IReadOnlyList<string>) CollectionCommand<TEntity, ICollectionEndpoint<TEntity, TElementEndpoint>, TElementEndpoint, TElementCommand>.OutputEntities(IEnumerable<TEntity>) IndexerCommand<ICollectionEndpoint<TEntity, TElementEndpoint>, TElementEndpoint, TElementCommand>.GetSubCommand(string) IndexerCommand<ICollectionEndpoint<TEntity, TElementEndpoint>, TElementEndpoint, TElementCommand>.GetElementCommand(TElementEndpoint) EndpointCommand<ICollectionEndpoint<TEntity, TElementEndpoint>>.Endpoint EndpointCommand<ICollectionEndpoint<TEntity, TElementEndpoint>>.Console EndpointCommand<ICollectionEndpoint<TEntity, TElementEndpoint>>.ExecuteAsync(IReadOnlyList<string>, CancellationToken) EndpointCommand<ICollectionEndpoint<TEntity, TElementEndpoint>>.GetSubCommand(string) EndpointCommand<ICollectionEndpoint<TEntity, TElementEndpoint>>.ExecuteInnerAsync(IReadOnlyList<string>, CancellationToken) EndpointCommand<ICollectionEndpoint<TEntity, TElementEndpoint>>.Input<T>(IReadOnlyList<string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CollectionCommand(ICollectionEndpoint<TEntity, TElementEndpoint>) Command operating on a ICollectionEndpoint<TEntity, TElementEndpoint>. public CollectionCommand(ICollectionEndpoint<TEntity, TElementEndpoint> endpoint) Parameters endpoint ICollectionEndpoint<TEntity, TElementEndpoint> The endpoint this command operates on."
  },
  "api/TypedRest.CommandLine.Commands.Generic.CollectionCommand-4.html": {
    "href": "api/TypedRest.CommandLine.Commands.Generic.CollectionCommand-4.html",
    "title": "Class CollectionCommand<TEntity, TEndpoint, TElementEndpoint, TElementCommand> | TypedRest for .NET",
    "summary": "Class CollectionCommand<TEntity, TEndpoint, TElementEndpoint, TElementCommand> Namespace TypedRest.CommandLine.Commands.Generic Assembly TypedRest.CommandLine.dll Command operating on a ICollectionEndpoint<TEntity, TElementEndpoint>. public abstract class CollectionCommand<TEntity, TEndpoint, TElementEndpoint, TElementCommand> : IndexerCommand<TEndpoint, TElementEndpoint, TElementCommand>, IEndpointCommand where TEntity : class where TEndpoint : ICollectionEndpoint<TEntity, TElementEndpoint> where TElementEndpoint : IElementEndpoint<TEntity> where TElementCommand : IEndpointCommand Type Parameters TEntity The type of entity the endpoint represents. TEndpoint The specific type of ICollectionEndpoint<TEntity, TElementEndpoint> to operate on. TElementEndpoint The specific type of IElementEndpoint<TEntity> the TEndpoint provides for individual TEntitys. TElementCommand The specific type of IEndpointCommand is used to handle TElementEndpoints. Must have a public constructor with a TElementEndpoint parameter. Inheritance object EndpointCommand<TEndpoint> IndexerCommand<TEndpoint, TElementEndpoint, TElementCommand> CollectionCommand<TEntity, TEndpoint, TElementEndpoint, TElementCommand> Implements IEndpointCommand Derived CollectionCommand<TEntity, TElementEndpoint, TElementCommand> StreamingCollectionCommand<TEntity, TEndpoint, TElementEndpoint, TElementCommand> Inherited Members IndexerCommand<TEndpoint, TElementEndpoint, TElementCommand>.GetSubCommand(string) IndexerCommand<TEndpoint, TElementEndpoint, TElementCommand>.GetElementCommand(TElementEndpoint) EndpointCommand<TEndpoint>.Endpoint EndpointCommand<TEndpoint>.Console EndpointCommand<TEndpoint>.GetSubCommand(string) EndpointCommand<TEndpoint>.ExecuteInnerAsync(IReadOnlyList<string>, CancellationToken) EndpointCommand<TEndpoint>.Input<T>(IReadOnlyList<string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CollectionCommand(TEndpoint) Command operating on a ICollectionEndpoint<TEntity, TElementEndpoint>. protected CollectionCommand(TEndpoint endpoint) Parameters endpoint TEndpoint The endpoint this command operates on. Methods ExecuteAsync(IReadOnlyList<string>, CancellationToken) Parses command-line arguments and executes the resulting operation. public override Task ExecuteAsync(IReadOnlyList<string> args, CancellationToken cancellationToken = default) Parameters args IReadOnlyList<string> the console arguments. cancellationToken CancellationToken Used to cancel the request. Returns Task InputEntities(IReadOnlyList<string>) Acquires a TEntity from the user, e.g. by parsing the args or via JSON on the console. protected virtual IEnumerable<TEntity> InputEntities(IReadOnlyList<string> args) Parameters args IReadOnlyList<string> Returns IEnumerable<TEntity> InputEntity(IReadOnlyList<string>) Acquires a TEntity from the user, e.g. by parsing the args or via JSON on the console. protected virtual TEntity InputEntity(IReadOnlyList<string> args) Parameters args IReadOnlyList<string> Returns TEntity OutputEntities(IEnumerable<TEntity>) Outputs a collection of TEntitys to the user, e.g., via ToString() on the console. protected virtual void OutputEntities(IEnumerable<TEntity> entities) Parameters entities IEnumerable<TEntity>"
  },
  "api/TypedRest.CommandLine.Commands.Generic.ElementCommand-1.html": {
    "href": "api/TypedRest.CommandLine.Commands.Generic.ElementCommand-1.html",
    "title": "Class ElementCommand<TEntity> | TypedRest for .NET",
    "summary": "Class ElementCommand<TEntity> Namespace TypedRest.CommandLine.Commands.Generic Assembly TypedRest.CommandLine.dll Command operating on an IElementEndpoint<TEntity>. public class ElementCommand<TEntity> : EndpointCommand<IElementEndpoint<TEntity>>, IEndpointCommand where TEntity : class Type Parameters TEntity The type of entity the endpoint represents. Inheritance object EndpointCommand<IElementEndpoint<TEntity>> ElementCommand<TEntity> Implements IEndpointCommand Derived PollingCommand<TEntity> Inherited Members EndpointCommand<IElementEndpoint<TEntity>>.Endpoint EndpointCommand<IElementEndpoint<TEntity>>.Console EndpointCommand<IElementEndpoint<TEntity>>.ExecuteAsync(IReadOnlyList<string>, CancellationToken) EndpointCommand<IElementEndpoint<TEntity>>.GetSubCommand(string) EndpointCommand<IElementEndpoint<TEntity>>.Input<T>(IReadOnlyList<string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ElementCommand(IElementEndpoint<TEntity>) Command operating on an IElementEndpoint<TEntity>. public ElementCommand(IElementEndpoint<TEntity> endpoint) Parameters endpoint IElementEndpoint<TEntity> The endpoint this command operates on. Methods ExecuteInnerAsync(IReadOnlyList<string>, CancellationToken) Parses command-line arguments and executes the resulting operation when no additional sub-IEndpointCommand is specified. protected override Task ExecuteInnerAsync(IReadOnlyList<string> args, CancellationToken cancellationToken = default) Parameters args IReadOnlyList<string> the console arguments. cancellationToken CancellationToken Used to cancel the request. Returns Task InputEntity(IReadOnlyList<string>) Acquires a TEntity from the user, e.g. by parsing the args or via JSON on the console. protected virtual TEntity InputEntity(IReadOnlyList<string> args) Parameters args IReadOnlyList<string> Returns TEntity OutputEntity(TEntity) Outputs a TEntity to the user via the console. protected virtual void OutputEntity(TEntity entity) Parameters entity TEntity"
  },
  "api/TypedRest.CommandLine.Commands.Generic.IndexerCommand-3.html": {
    "href": "api/TypedRest.CommandLine.Commands.Generic.IndexerCommand-3.html",
    "title": "Class IndexerCommand<TEndpoint, TElementEndpoint, TElementCommand> | TypedRest for .NET",
    "summary": "Class IndexerCommand<TEndpoint, TElementEndpoint, TElementCommand> Namespace TypedRest.CommandLine.Commands.Generic Assembly TypedRest.CommandLine.dll Command operating on a IIndexerEndpoint<TElementEndpoint>. public abstract class IndexerCommand<TEndpoint, TElementEndpoint, TElementCommand> : EndpointCommand<TEndpoint>, IEndpointCommand where TEndpoint : IIndexerEndpoint<TElementEndpoint> where TElementEndpoint : IEndpoint where TElementCommand : IEndpointCommand Type Parameters TEndpoint The specific type of IIndexerEndpoint<TElementEndpoint> to operate on. TElementEndpoint The specific type of IElementEndpoint<TEntity> the TEndpoint provides for individual elements. TElementCommand The specific type of IEndpointCommand is used to handle TElementEndpoints. This must be a non-abstract class with a constructor that takes a TElementEndpoint, unless you override GetElementCommand(TElementEndpoint). Inheritance object EndpointCommand<TEndpoint> IndexerCommand<TEndpoint, TElementEndpoint, TElementCommand> Implements IEndpointCommand Derived CollectionCommand<TEntity, TEndpoint, TElementEndpoint, TElementCommand> Inherited Members EndpointCommand<TEndpoint>.Endpoint EndpointCommand<TEndpoint>.Console EndpointCommand<TEndpoint>.ExecuteAsync(IReadOnlyList<string>, CancellationToken) EndpointCommand<TEndpoint>.ExecuteInnerAsync(IReadOnlyList<string>, CancellationToken) EndpointCommand<TEndpoint>.Input<T>(IReadOnlyList<string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IndexerCommand(TEndpoint) Command operating on a IIndexerEndpoint<TElementEndpoint>. protected IndexerCommand(TEndpoint endpoint) Parameters endpoint TEndpoint The endpoint this command operates on. Methods GetElementCommand(TElementEndpoint) Gets an IEndpointCommand for the given elementEndpoint. protected TElementCommand GetElementCommand(TElementEndpoint elementEndpoint) Parameters elementEndpoint TElementEndpoint Returns TElementCommand GetSubCommand(string) Creates a sub-IEndpointCommand based on the given name. protected override IEndpointCommand GetSubCommand(string name) Parameters name string Returns IEndpointCommand The IEndpointCommand or null if the name does not match."
  },
  "api/TypedRest.CommandLine.Commands.Generic.html": {
    "href": "api/TypedRest.CommandLine.Commands.Generic.html",
    "title": "Namespace TypedRest.CommandLine.Commands.Generic | TypedRest for .NET",
    "summary": "Namespace TypedRest.CommandLine.Commands.Generic Commands for operating on TypedRest.Endpoints.Generic. Classes CollectionCommand<TEntity> Command operating on a ICollectionEndpoint<TEntity>. CollectionCommand<TEntity, TElementEndpoint, TElementCommand> Command operating on a ICollectionEndpoint<TEntity, TElementEndpoint>. CollectionCommand<TEntity, TEndpoint, TElementEndpoint, TElementCommand> Command operating on a ICollectionEndpoint<TEntity, TElementEndpoint>. ElementCommand<TEntity> Command operating on an IElementEndpoint<TEntity>. IndexerCommand<TEndpoint, TElementEndpoint, TElementCommand> Command operating on a IIndexerEndpoint<TElementEndpoint>."
  },
  "api/TypedRest.CommandLine.Commands.IEndpointCommand.html": {
    "href": "api/TypedRest.CommandLine.Commands.IEndpointCommand.html",
    "title": "Interface IEndpointCommand | TypedRest for .NET",
    "summary": "Interface IEndpointCommand Namespace TypedRest.CommandLine.Commands Assembly TypedRest.CommandLine.dll Command operating on an IEndpoint. public interface IEndpointCommand Properties Console The text input/output device used for user interaction. IConsole Console { get; set; } Property Value IConsole Methods ExecuteAsync(IReadOnlyList<string>, CancellationToken) Parses command-line arguments and executes the resulting operation. Task ExecuteAsync(IReadOnlyList<string> args, CancellationToken cancellationToken = default) Parameters args IReadOnlyList<string> the console arguments. cancellationToken CancellationToken Used to cancel the request. Returns Task"
  },
  "api/TypedRest.CommandLine.Commands.Raw.BlobCommand.html": {
    "href": "api/TypedRest.CommandLine.Commands.Raw.BlobCommand.html",
    "title": "Class BlobCommand | TypedRest for .NET",
    "summary": "Class BlobCommand Namespace TypedRest.CommandLine.Commands.Raw Assembly TypedRest.CommandLine.dll Command operating on an IBlobEndpoint. public class BlobCommand : EndpointCommand<IBlobEndpoint>, IEndpointCommand Inheritance object EndpointCommand<IBlobEndpoint> BlobCommand Implements IEndpointCommand Inherited Members EndpointCommand<IBlobEndpoint>.Endpoint EndpointCommand<IBlobEndpoint>.Console EndpointCommand<IBlobEndpoint>.ExecuteAsync(IReadOnlyList<string>, CancellationToken) EndpointCommand<IBlobEndpoint>.GetSubCommand(string) EndpointCommand<IBlobEndpoint>.Input<T>(IReadOnlyList<string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BlobCommand(IBlobEndpoint) Command operating on an IBlobEndpoint. public BlobCommand(IBlobEndpoint endpoint) Parameters endpoint IBlobEndpoint The endpoint this command operates on. Methods ExecuteInnerAsync(IReadOnlyList<string>, CancellationToken) Parses command-line arguments and executes the resulting operation when no additional sub-IEndpointCommand is specified. protected override Task ExecuteInnerAsync(IReadOnlyList<string> args, CancellationToken cancellationToken = default) Parameters args IReadOnlyList<string> the console arguments. cancellationToken CancellationToken Used to cancel the request. Returns Task"
  },
  "api/TypedRest.CommandLine.Commands.Raw.UploadCommand.html": {
    "href": "api/TypedRest.CommandLine.Commands.Raw.UploadCommand.html",
    "title": "Class UploadCommand | TypedRest for .NET",
    "summary": "Class UploadCommand Namespace TypedRest.CommandLine.Commands.Raw Assembly TypedRest.CommandLine.dll Command operating on an IUploadEndpoint. public class UploadCommand : EndpointCommand<IUploadEndpoint>, IEndpointCommand Inheritance object EndpointCommand<IUploadEndpoint> UploadCommand Implements IEndpointCommand Inherited Members EndpointCommand<IUploadEndpoint>.Endpoint EndpointCommand<IUploadEndpoint>.Console EndpointCommand<IUploadEndpoint>.ExecuteAsync(IReadOnlyList<string>, CancellationToken) EndpointCommand<IUploadEndpoint>.GetSubCommand(string) EndpointCommand<IUploadEndpoint>.Input<T>(IReadOnlyList<string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UploadCommand(IUploadEndpoint) Command operating on an IUploadEndpoint. public UploadCommand(IUploadEndpoint endpoint) Parameters endpoint IUploadEndpoint The endpoint this command operates on. Methods ExecuteInnerAsync(IReadOnlyList<string>, CancellationToken) Parses command-line arguments and executes the resulting operation when no additional sub-IEndpointCommand is specified. protected override Task ExecuteInnerAsync(IReadOnlyList<string> args, CancellationToken cancellationToken = default) Parameters args IReadOnlyList<string> the console arguments. cancellationToken CancellationToken Used to cancel the request. Returns Task"
  },
  "api/TypedRest.CommandLine.Commands.Raw.html": {
    "href": "api/TypedRest.CommandLine.Commands.Raw.html",
    "title": "Namespace TypedRest.CommandLine.Commands.Raw | TypedRest for .NET",
    "summary": "Namespace TypedRest.CommandLine.Commands.Raw Commands for operating on TypedRest.Endpoints.Raw. Classes BlobCommand Command operating on an IBlobEndpoint. UploadCommand Command operating on an IUploadEndpoint."
  },
  "api/TypedRest.CommandLine.Commands.Reactive.PollingCommand-1.html": {
    "href": "api/TypedRest.CommandLine.Commands.Reactive.PollingCommand-1.html",
    "title": "Class PollingCommand<TEntity> | TypedRest for .NET",
    "summary": "Class PollingCommand<TEntity> Namespace TypedRest.CommandLine.Commands.Reactive Assembly TypedRest.CommandLine.dll Command operating on an IPollingEndpoint<TEntity>. public class PollingCommand<TEntity> : ElementCommand<TEntity>, IEndpointCommand where TEntity : class Type Parameters TEntity The type of entity the endpoint represents. Inheritance object EndpointCommand<IElementEndpoint<TEntity>> ElementCommand<TEntity> PollingCommand<TEntity> Implements IEndpointCommand Inherited Members ElementCommand<TEntity>.InputEntity(IReadOnlyList<string>) ElementCommand<TEntity>.OutputEntity(TEntity) EndpointCommand<IElementEndpoint<TEntity>>.Console EndpointCommand<IElementEndpoint<TEntity>>.ExecuteAsync(IReadOnlyList<string>, CancellationToken) EndpointCommand<IElementEndpoint<TEntity>>.GetSubCommand(string) EndpointCommand<IElementEndpoint<TEntity>>.Input<T>(IReadOnlyList<string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PollingCommand(IPollingEndpoint<TEntity>) Command operating on an IPollingEndpoint<TEntity>. public PollingCommand(IPollingEndpoint<TEntity> endpoint) Parameters endpoint IPollingEndpoint<TEntity> The endpoint this command operates on. Fields Endpoint protected readonly IPollingEndpoint<TEntity> Endpoint Field Value IPollingEndpoint<TEntity> Methods ExecuteInnerAsync(IReadOnlyList<string>, CancellationToken) Parses command-line arguments and executes the resulting operation when no additional sub-IEndpointCommand is specified. protected override Task ExecuteInnerAsync(IReadOnlyList<string> args, CancellationToken cancellationToken = default) Parameters args IReadOnlyList<string> the console arguments. cancellationToken CancellationToken Used to cancel the request. Returns Task OutputEntitiesAsync(IObservable<TEntity>, CancellationToken) Outputs a stream of TEntitys to the user, e.g., via ToString() on the console. protected virtual Task OutputEntitiesAsync(IObservable<TEntity> observable, CancellationToken cancellationToken = default) Parameters observable IObservable<TEntity> cancellationToken CancellationToken Returns Task"
  },
  "api/TypedRest.CommandLine.Commands.Reactive.StreamingCollectionCommand-1.html": {
    "href": "api/TypedRest.CommandLine.Commands.Reactive.StreamingCollectionCommand-1.html",
    "title": "Class StreamingCollectionCommand<TEntity> | TypedRest for .NET",
    "summary": "Class StreamingCollectionCommand<TEntity> Namespace TypedRest.CommandLine.Commands.Reactive Assembly TypedRest.CommandLine.dll Command operating on a IStreamingCollectionEndpoint<TEntity>. public class StreamingCollectionCommand<TEntity> : StreamingCollectionCommand<TEntity, IElementEndpoint<TEntity>, ElementCommand<TEntity>>, IEndpointCommand where TEntity : class Type Parameters TEntity The type of entity the endpoint represents. Inheritance object EndpointCommand<IStreamingCollectionEndpoint<TEntity, IElementEndpoint<TEntity>>> IndexerCommand<IStreamingCollectionEndpoint<TEntity, IElementEndpoint<TEntity>>, IElementEndpoint<TEntity>, ElementCommand<TEntity>> CollectionCommand<TEntity, IStreamingCollectionEndpoint<TEntity, IElementEndpoint<TEntity>>, IElementEndpoint<TEntity>, ElementCommand<TEntity>> StreamingCollectionCommand<TEntity, IStreamingCollectionEndpoint<TEntity, IElementEndpoint<TEntity>>, IElementEndpoint<TEntity>, ElementCommand<TEntity>> StreamingCollectionCommand<TEntity, IElementEndpoint<TEntity>, ElementCommand<TEntity>> StreamingCollectionCommand<TEntity> Implements IEndpointCommand Inherited Members StreamingCollectionCommand<TEntity, IStreamingCollectionEndpoint<TEntity, IElementEndpoint<TEntity>>, IElementEndpoint<TEntity>, ElementCommand<TEntity>>.ExecuteAsync(IReadOnlyList<string>, CancellationToken) StreamingCollectionCommand<TEntity, IStreamingCollectionEndpoint<TEntity, IElementEndpoint<TEntity>>, IElementEndpoint<TEntity>, ElementCommand<TEntity>>.OutputEntitiesAsync(IObservable<TEntity>, CancellationToken) CollectionCommand<TEntity, IStreamingCollectionEndpoint<TEntity, IElementEndpoint<TEntity>>, IElementEndpoint<TEntity>, ElementCommand<TEntity>>.ExecuteAsync(IReadOnlyList<string>, CancellationToken) CollectionCommand<TEntity, IStreamingCollectionEndpoint<TEntity, IElementEndpoint<TEntity>>, IElementEndpoint<TEntity>, ElementCommand<TEntity>>.InputEntity(IReadOnlyList<string>) CollectionCommand<TEntity, IStreamingCollectionEndpoint<TEntity, IElementEndpoint<TEntity>>, IElementEndpoint<TEntity>, ElementCommand<TEntity>>.InputEntities(IReadOnlyList<string>) CollectionCommand<TEntity, IStreamingCollectionEndpoint<TEntity, IElementEndpoint<TEntity>>, IElementEndpoint<TEntity>, ElementCommand<TEntity>>.OutputEntities(IEnumerable<TEntity>) IndexerCommand<IStreamingCollectionEndpoint<TEntity, IElementEndpoint<TEntity>>, IElementEndpoint<TEntity>, ElementCommand<TEntity>>.GetSubCommand(string) IndexerCommand<IStreamingCollectionEndpoint<TEntity, IElementEndpoint<TEntity>>, IElementEndpoint<TEntity>, ElementCommand<TEntity>>.GetElementCommand(IElementEndpoint<TEntity>) EndpointCommand<IStreamingCollectionEndpoint<TEntity, IElementEndpoint<TEntity>>>.Endpoint EndpointCommand<IStreamingCollectionEndpoint<TEntity, IElementEndpoint<TEntity>>>.Console EndpointCommand<IStreamingCollectionEndpoint<TEntity, IElementEndpoint<TEntity>>>.ExecuteAsync(IReadOnlyList<string>, CancellationToken) EndpointCommand<IStreamingCollectionEndpoint<TEntity, IElementEndpoint<TEntity>>>.GetSubCommand(string) EndpointCommand<IStreamingCollectionEndpoint<TEntity, IElementEndpoint<TEntity>>>.ExecuteInnerAsync(IReadOnlyList<string>, CancellationToken) EndpointCommand<IStreamingCollectionEndpoint<TEntity, IElementEndpoint<TEntity>>>.Input<T>(IReadOnlyList<string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StreamingCollectionCommand(IStreamingCollectionEndpoint<TEntity>) Command operating on a IStreamingCollectionEndpoint<TEntity>. public StreamingCollectionCommand(IStreamingCollectionEndpoint<TEntity> endpoint) Parameters endpoint IStreamingCollectionEndpoint<TEntity> The endpoint this command operates on."
  },
  "api/TypedRest.CommandLine.Commands.Reactive.StreamingCollectionCommand-3.html": {
    "href": "api/TypedRest.CommandLine.Commands.Reactive.StreamingCollectionCommand-3.html",
    "title": "Class StreamingCollectionCommand<TEntity, TElementEndpoint, TElementCommand> | TypedRest for .NET",
    "summary": "Class StreamingCollectionCommand<TEntity, TElementEndpoint, TElementCommand> Namespace TypedRest.CommandLine.Commands.Reactive Assembly TypedRest.CommandLine.dll Command operating on a IStreamingCollectionEndpoint<TEntity, TElementEndpoint>. public class StreamingCollectionCommand<TEntity, TElementEndpoint, TElementCommand> : StreamingCollectionCommand<TEntity, IStreamingCollectionEndpoint<TEntity, TElementEndpoint>, TElementEndpoint, TElementCommand>, IEndpointCommand where TEntity : class where TElementEndpoint : IElementEndpoint<TEntity> where TElementCommand : IEndpointCommand Type Parameters TEntity The type of entity the endpoint represents. TElementEndpoint The specific type of IElementEndpoint<TEntity> the endpoint provides for individual TEntitys. TElementCommand The specific type of IEndpointCommand is used to handle TElementEndpoints. Must have a public constructor with a TElementEndpoint parameter. Inheritance object EndpointCommand<IStreamingCollectionEndpoint<TEntity, TElementEndpoint>> IndexerCommand<IStreamingCollectionEndpoint<TEntity, TElementEndpoint>, TElementEndpoint, TElementCommand> CollectionCommand<TEntity, IStreamingCollectionEndpoint<TEntity, TElementEndpoint>, TElementEndpoint, TElementCommand> StreamingCollectionCommand<TEntity, IStreamingCollectionEndpoint<TEntity, TElementEndpoint>, TElementEndpoint, TElementCommand> StreamingCollectionCommand<TEntity, TElementEndpoint, TElementCommand> Implements IEndpointCommand Derived StreamingCollectionCommand<TEntity> Inherited Members StreamingCollectionCommand<TEntity, IStreamingCollectionEndpoint<TEntity, TElementEndpoint>, TElementEndpoint, TElementCommand>.ExecuteAsync(IReadOnlyList<string>, CancellationToken) StreamingCollectionCommand<TEntity, IStreamingCollectionEndpoint<TEntity, TElementEndpoint>, TElementEndpoint, TElementCommand>.OutputEntitiesAsync(IObservable<TEntity>, CancellationToken) CollectionCommand<TEntity, IStreamingCollectionEndpoint<TEntity, TElementEndpoint>, TElementEndpoint, TElementCommand>.ExecuteAsync(IReadOnlyList<string>, CancellationToken) CollectionCommand<TEntity, IStreamingCollectionEndpoint<TEntity, TElementEndpoint>, TElementEndpoint, TElementCommand>.InputEntity(IReadOnlyList<string>) CollectionCommand<TEntity, IStreamingCollectionEndpoint<TEntity, TElementEndpoint>, TElementEndpoint, TElementCommand>.InputEntities(IReadOnlyList<string>) CollectionCommand<TEntity, IStreamingCollectionEndpoint<TEntity, TElementEndpoint>, TElementEndpoint, TElementCommand>.OutputEntities(IEnumerable<TEntity>) IndexerCommand<IStreamingCollectionEndpoint<TEntity, TElementEndpoint>, TElementEndpoint, TElementCommand>.GetSubCommand(string) IndexerCommand<IStreamingCollectionEndpoint<TEntity, TElementEndpoint>, TElementEndpoint, TElementCommand>.GetElementCommand(TElementEndpoint) EndpointCommand<IStreamingCollectionEndpoint<TEntity, TElementEndpoint>>.Endpoint EndpointCommand<IStreamingCollectionEndpoint<TEntity, TElementEndpoint>>.Console EndpointCommand<IStreamingCollectionEndpoint<TEntity, TElementEndpoint>>.ExecuteAsync(IReadOnlyList<string>, CancellationToken) EndpointCommand<IStreamingCollectionEndpoint<TEntity, TElementEndpoint>>.GetSubCommand(string) EndpointCommand<IStreamingCollectionEndpoint<TEntity, TElementEndpoint>>.ExecuteInnerAsync(IReadOnlyList<string>, CancellationToken) EndpointCommand<IStreamingCollectionEndpoint<TEntity, TElementEndpoint>>.Input<T>(IReadOnlyList<string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StreamingCollectionCommand(IStreamingCollectionEndpoint<TEntity, TElementEndpoint>) Command operating on a IStreamingCollectionEndpoint<TEntity, TElementEndpoint>. public StreamingCollectionCommand(IStreamingCollectionEndpoint<TEntity, TElementEndpoint> endpoint) Parameters endpoint IStreamingCollectionEndpoint<TEntity, TElementEndpoint> The endpoint this command operates on."
  },
  "api/TypedRest.CommandLine.Commands.Reactive.StreamingCollectionCommand-4.html": {
    "href": "api/TypedRest.CommandLine.Commands.Reactive.StreamingCollectionCommand-4.html",
    "title": "Class StreamingCollectionCommand<TEntity, TEndpoint, TElementEndpoint, TElementCommand> | TypedRest for .NET",
    "summary": "Class StreamingCollectionCommand<TEntity, TEndpoint, TElementEndpoint, TElementCommand> Namespace TypedRest.CommandLine.Commands.Reactive Assembly TypedRest.CommandLine.dll Command operating on a IStreamingCollectionEndpoint<TEntity, TElementEndpoint>. public abstract class StreamingCollectionCommand<TEntity, TEndpoint, TElementEndpoint, TElementCommand> : CollectionCommand<TEntity, TEndpoint, TElementEndpoint, TElementCommand>, IEndpointCommand where TEntity : class where TEndpoint : IStreamingCollectionEndpoint<TEntity, TElementEndpoint> where TElementEndpoint : IElementEndpoint<TEntity> where TElementCommand : IEndpointCommand Type Parameters TEntity The type of entity the endpoint represents. TEndpoint The specific type of IStreamingCollectionEndpoint<TEntity, TElementEndpoint> to operate on. TElementEndpoint The specific type of IElementEndpoint<TEntity> the TEndpoint provides for individual TEntitys. TElementCommand The specific type of IEndpointCommand is used to handle TElementEndpoints. Must have a public constructor with a TElementEndpoint parameter. Inheritance object EndpointCommand<TEndpoint> IndexerCommand<TEndpoint, TElementEndpoint, TElementCommand> CollectionCommand<TEntity, TEndpoint, TElementEndpoint, TElementCommand> StreamingCollectionCommand<TEntity, TEndpoint, TElementEndpoint, TElementCommand> Implements IEndpointCommand Derived StreamingCollectionCommand<TEntity, TElementEndpoint, TElementCommand> Inherited Members CollectionCommand<TEntity, TEndpoint, TElementEndpoint, TElementCommand>.ExecuteAsync(IReadOnlyList<string>, CancellationToken) CollectionCommand<TEntity, TEndpoint, TElementEndpoint, TElementCommand>.InputEntity(IReadOnlyList<string>) CollectionCommand<TEntity, TEndpoint, TElementEndpoint, TElementCommand>.InputEntities(IReadOnlyList<string>) CollectionCommand<TEntity, TEndpoint, TElementEndpoint, TElementCommand>.OutputEntities(IEnumerable<TEntity>) IndexerCommand<TEndpoint, TElementEndpoint, TElementCommand>.GetSubCommand(string) IndexerCommand<TEndpoint, TElementEndpoint, TElementCommand>.GetElementCommand(TElementEndpoint) EndpointCommand<TEndpoint>.Endpoint EndpointCommand<TEndpoint>.Console EndpointCommand<TEndpoint>.GetSubCommand(string) EndpointCommand<TEndpoint>.ExecuteInnerAsync(IReadOnlyList<string>, CancellationToken) EndpointCommand<TEndpoint>.Input<T>(IReadOnlyList<string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StreamingCollectionCommand(TEndpoint) Command operating on a IStreamingCollectionEndpoint<TEntity, TElementEndpoint>. protected StreamingCollectionCommand(TEndpoint endpoint) Parameters endpoint TEndpoint The endpoint this command operates on. Methods ExecuteAsync(IReadOnlyList<string>, CancellationToken) Parses command-line arguments and executes the resulting operation. public override Task ExecuteAsync(IReadOnlyList<string> args, CancellationToken cancellationToken = default) Parameters args IReadOnlyList<string> the console arguments. cancellationToken CancellationToken Used to cancel the request. Returns Task OutputEntitiesAsync(IObservable<TEntity>, CancellationToken) Outputs a stream of TEntitys to the user, e.g., via ToString() on the console. protected virtual Task OutputEntitiesAsync(IObservable<TEntity> observable, CancellationToken cancellationToken = default) Parameters observable IObservable<TEntity> cancellationToken CancellationToken Returns Task"
  },
  "api/TypedRest.CommandLine.Commands.Reactive.StreamingCommand-2.html": {
    "href": "api/TypedRest.CommandLine.Commands.Reactive.StreamingCommand-2.html",
    "title": "Class StreamingCommand<TEntity, TEndpoint> | TypedRest for .NET",
    "summary": "Class StreamingCommand<TEntity, TEndpoint> Namespace TypedRest.CommandLine.Commands.Reactive Assembly TypedRest.CommandLine.dll Command operating on a IStreamingEndpoint<TEntity>. public abstract class StreamingCommand<TEntity, TEndpoint> : EndpointCommand<TEndpoint>, IEndpointCommand where TEndpoint : IStreamingEndpoint<TEntity> Type Parameters TEntity The type of entity the endpoint represents. TEndpoint The specific type of IStreamingEndpoint<TEntity> to operate on. Inheritance object EndpointCommand<TEndpoint> StreamingCommand<TEntity, TEndpoint> Implements IEndpointCommand Inherited Members EndpointCommand<TEndpoint>.Endpoint EndpointCommand<TEndpoint>.Console EndpointCommand<TEndpoint>.ExecuteAsync(IReadOnlyList<string>, CancellationToken) EndpointCommand<TEndpoint>.GetSubCommand(string) EndpointCommand<TEndpoint>.Input<T>(IReadOnlyList<string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StreamingCommand(TEndpoint) Command operating on a IStreamingEndpoint<TEntity>. protected StreamingCommand(TEndpoint endpoint) Parameters endpoint TEndpoint The endpoint this command operates on. Methods ExecuteInnerAsync(IReadOnlyList<string>, CancellationToken) Parses command-line arguments and executes the resulting operation when no additional sub-IEndpointCommand is specified. protected override Task ExecuteInnerAsync(IReadOnlyList<string> args, CancellationToken cancellationToken = default) Parameters args IReadOnlyList<string> the console arguments. cancellationToken CancellationToken Used to cancel the request. Returns Task OutputEntitiesAsync(IObservable<TEntity>, CancellationToken) Outputs a stream of TEntitys to the user, e.g., via ToString() on the console. protected virtual Task OutputEntitiesAsync(IObservable<TEntity> observable, CancellationToken cancellationToken = default) Parameters observable IObservable<TEntity> cancellationToken CancellationToken Returns Task"
  },
  "api/TypedRest.CommandLine.Commands.Reactive.html": {
    "href": "api/TypedRest.CommandLine.Commands.Reactive.html",
    "title": "Namespace TypedRest.CommandLine.Commands.Reactive | TypedRest for .NET",
    "summary": "Namespace TypedRest.CommandLine.Commands.Reactive Commands for operating on TypedRest.Endpoints.Reactive. Classes PollingCommand<TEntity> Command operating on an IPollingEndpoint<TEntity>. StreamingCollectionCommand<TEntity> Command operating on a IStreamingCollectionEndpoint<TEntity>. StreamingCollectionCommand<TEntity, TElementEndpoint, TElementCommand> Command operating on a IStreamingCollectionEndpoint<TEntity, TElementEndpoint>. StreamingCollectionCommand<TEntity, TEndpoint, TElementEndpoint, TElementCommand> Command operating on a IStreamingCollectionEndpoint<TEntity, TElementEndpoint>. StreamingCommand<TEntity, TEndpoint> Command operating on a IStreamingEndpoint<TEntity>."
  },
  "api/TypedRest.CommandLine.Commands.Rpc.ActionCommand.html": {
    "href": "api/TypedRest.CommandLine.Commands.Rpc.ActionCommand.html",
    "title": "Class ActionCommand | TypedRest for .NET",
    "summary": "Class ActionCommand Namespace TypedRest.CommandLine.Commands.Rpc Assembly TypedRest.CommandLine.dll Command operating on an IActionEndpoint. public class ActionCommand : EndpointCommand<IActionEndpoint>, IEndpointCommand Inheritance object EndpointCommand<IActionEndpoint> ActionCommand Implements IEndpointCommand Inherited Members EndpointCommand<IActionEndpoint>.Endpoint EndpointCommand<IActionEndpoint>.Console EndpointCommand<IActionEndpoint>.ExecuteAsync(IReadOnlyList<string>, CancellationToken) EndpointCommand<IActionEndpoint>.GetSubCommand(string) EndpointCommand<IActionEndpoint>.Input<T>(IReadOnlyList<string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ActionCommand(IActionEndpoint) Command operating on an IActionEndpoint. public ActionCommand(IActionEndpoint endpoint) Parameters endpoint IActionEndpoint The endpoint this command operates on. Methods ExecuteInnerAsync(IReadOnlyList<string>, CancellationToken) Parses command-line arguments and executes the resulting operation when no additional sub-IEndpointCommand is specified. protected override Task ExecuteInnerAsync(IReadOnlyList<string> args, CancellationToken cancellationToken = default) Parameters args IReadOnlyList<string> the console arguments. cancellationToken CancellationToken Used to cancel the request. Returns Task"
  },
  "api/TypedRest.CommandLine.Commands.Rpc.ConsumerCommand-1.html": {
    "href": "api/TypedRest.CommandLine.Commands.Rpc.ConsumerCommand-1.html",
    "title": "Class ConsumerCommand<TEntity> | TypedRest for .NET",
    "summary": "Class ConsumerCommand<TEntity> Namespace TypedRest.CommandLine.Commands.Rpc Assembly TypedRest.CommandLine.dll Command operating on an IConsumerEndpoint<TEntity>. public class ConsumerCommand<TEntity> : EndpointCommand<IConsumerEndpoint<TEntity>>, IEndpointCommand Type Parameters TEntity The type of entity the IConsumerEndpoint<TEntity> takes as input. Inheritance object EndpointCommand<IConsumerEndpoint<TEntity>> ConsumerCommand<TEntity> Implements IEndpointCommand Inherited Members EndpointCommand<IConsumerEndpoint<TEntity>>.Endpoint EndpointCommand<IConsumerEndpoint<TEntity>>.Console EndpointCommand<IConsumerEndpoint<TEntity>>.ExecuteAsync(IReadOnlyList<string>, CancellationToken) EndpointCommand<IConsumerEndpoint<TEntity>>.GetSubCommand(string) EndpointCommand<IConsumerEndpoint<TEntity>>.Input<T>(IReadOnlyList<string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ConsumerCommand(IConsumerEndpoint<TEntity>) Command operating on an IConsumerEndpoint<TEntity>. public ConsumerCommand(IConsumerEndpoint<TEntity> endpoint) Parameters endpoint IConsumerEndpoint<TEntity> The endpoint this command operates on. Methods ExecuteInnerAsync(IReadOnlyList<string>, CancellationToken) Parses command-line arguments and executes the resulting operation when no additional sub-IEndpointCommand is specified. protected override Task ExecuteInnerAsync(IReadOnlyList<string> args, CancellationToken cancellationToken = default) Parameters args IReadOnlyList<string> the console arguments. cancellationToken CancellationToken Used to cancel the request. Returns Task InputEntity(IReadOnlyList<string>) Acquires a TEntity from the user, e.g. by parsing the args or via JSON on the console. protected virtual TEntity InputEntity(IReadOnlyList<string> args) Parameters args IReadOnlyList<string> Returns TEntity"
  },
  "api/TypedRest.CommandLine.Commands.Rpc.FunctionCommand-2.html": {
    "href": "api/TypedRest.CommandLine.Commands.Rpc.FunctionCommand-2.html",
    "title": "Class FunctionCommand<TEntity, TResult> | TypedRest for .NET",
    "summary": "Class FunctionCommand<TEntity, TResult> Namespace TypedRest.CommandLine.Commands.Rpc Assembly TypedRest.CommandLine.dll Command operating on an IFunctionEndpoint<TEntity, TResult>. public class FunctionCommand<TEntity, TResult> : EndpointCommand<IFunctionEndpoint<TEntity, TResult>>, IEndpointCommand Type Parameters TEntity The type of entity the IFunctionEndpoint<TEntity, TResult> takes as input. TResult The type of entity the IFunctionEndpoint<TEntity, TResult> returns as a result. Inheritance object EndpointCommand<IFunctionEndpoint<TEntity, TResult>> FunctionCommand<TEntity, TResult> Implements IEndpointCommand Inherited Members EndpointCommand<IFunctionEndpoint<TEntity, TResult>>.Endpoint EndpointCommand<IFunctionEndpoint<TEntity, TResult>>.Console EndpointCommand<IFunctionEndpoint<TEntity, TResult>>.ExecuteAsync(IReadOnlyList<string>, CancellationToken) EndpointCommand<IFunctionEndpoint<TEntity, TResult>>.GetSubCommand(string) EndpointCommand<IFunctionEndpoint<TEntity, TResult>>.ExecuteInnerAsync(IReadOnlyList<string>, CancellationToken) EndpointCommand<IFunctionEndpoint<TEntity, TResult>>.Input<T>(IReadOnlyList<string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FunctionCommand(IFunctionEndpoint<TEntity, TResult>) Command operating on an IFunctionEndpoint<TEntity, TResult>. public FunctionCommand(IFunctionEndpoint<TEntity, TResult> endpoint) Parameters endpoint IFunctionEndpoint<TEntity, TResult> The endpoint this command operates on. Methods ExecuteInnerAsync(IReadOnlyList<string>, CancellationToken) Parses command-line arguments and executes the resulting operation when no additional sub-IEndpointCommand is specified. protected override Task ExecuteInnerAsync(IReadOnlyList<string> args, CancellationToken cancellationToken = default) Parameters args IReadOnlyList<string> the console arguments. cancellationToken CancellationToken Used to cancel the request. Returns Task InputEntity(IReadOnlyList<string>) Acquires a TEntity from the user, e.g. by parsing the args or via JSON on the console. protected virtual TEntity InputEntity(IReadOnlyList<string> args) Parameters args IReadOnlyList<string> Returns TEntity OutputEntity(TResult) Outputs a TResult to the user via the console. protected virtual void OutputEntity(TResult entity) Parameters entity TResult"
  },
  "api/TypedRest.CommandLine.Commands.Rpc.ProducerCommand-1.html": {
    "href": "api/TypedRest.CommandLine.Commands.Rpc.ProducerCommand-1.html",
    "title": "Class ProducerCommand<TResult> | TypedRest for .NET",
    "summary": "Class ProducerCommand<TResult> Namespace TypedRest.CommandLine.Commands.Rpc Assembly TypedRest.CommandLine.dll Command operating on an IProducerEndpoint<TResult>. public class ProducerCommand<TResult> : EndpointCommand<IProducerEndpoint<TResult>>, IEndpointCommand Type Parameters TResult The type of entity the IProducerEndpoint<TResult> returns as a result. Inheritance object EndpointCommand<IProducerEndpoint<TResult>> ProducerCommand<TResult> Implements IEndpointCommand Inherited Members EndpointCommand<IProducerEndpoint<TResult>>.Endpoint EndpointCommand<IProducerEndpoint<TResult>>.Console EndpointCommand<IProducerEndpoint<TResult>>.ExecuteAsync(IReadOnlyList<string>, CancellationToken) EndpointCommand<IProducerEndpoint<TResult>>.GetSubCommand(string) EndpointCommand<IProducerEndpoint<TResult>>.Input<T>(IReadOnlyList<string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProducerCommand(IProducerEndpoint<TResult>) Command operating on an IProducerEndpoint<TResult>. public ProducerCommand(IProducerEndpoint<TResult> endpoint) Parameters endpoint IProducerEndpoint<TResult> The endpoint this command operates on. Methods ExecuteInnerAsync(IReadOnlyList<string>, CancellationToken) Parses command-line arguments and executes the resulting operation when no additional sub-IEndpointCommand is specified. protected override Task ExecuteInnerAsync(IReadOnlyList<string> args, CancellationToken cancellationToken = default) Parameters args IReadOnlyList<string> the console arguments. cancellationToken CancellationToken Used to cancel the request. Returns Task OutputEntity(TResult) Outputs a TResult to the user via the console. protected virtual void OutputEntity(TResult entity) Parameters entity TResult"
  },
  "api/TypedRest.CommandLine.Commands.Rpc.html": {
    "href": "api/TypedRest.CommandLine.Commands.Rpc.html",
    "title": "Namespace TypedRest.CommandLine.Commands.Rpc | TypedRest for .NET",
    "summary": "Namespace TypedRest.CommandLine.Commands.Rpc Commands for operating on TypedRest.Endpoints.Rpc. Classes ActionCommand Command operating on an IActionEndpoint. ConsumerCommand<TEntity> Command operating on an IConsumerEndpoint<TEntity>. FunctionCommand<TEntity, TResult> Command operating on an IFunctionEndpoint<TEntity, TResult>. ProducerCommand<TResult> Command operating on an IProducerEndpoint<TResult>."
  },
  "api/TypedRest.CommandLine.Commands.html": {
    "href": "api/TypedRest.CommandLine.Commands.html",
    "title": "Namespace TypedRest.CommandLine.Commands | TypedRest for .NET",
    "summary": "Namespace TypedRest.CommandLine.Commands Commands operating on TypedRest.Endpoints. Namespaces TypedRest.CommandLine.Commands.Generic Commands for operating on TypedRest.Endpoints.Generic. TypedRest.CommandLine.Commands.Raw Commands for operating on TypedRest.Endpoints.Raw. TypedRest.CommandLine.Commands.Reactive Commands for operating on TypedRest.Endpoints.Reactive. TypedRest.CommandLine.Commands.Rpc Commands for operating on TypedRest.Endpoints.Rpc. Classes EndpointCommand<TEndpoint> Command operating on an IEndpoint. EntryCommand<TEndpoint> Command providing an entry point to a hierarchy of named IEndpointCommands. Interfaces IEndpointCommand Command operating on an IEndpoint."
  },
  "api/TypedRest.CommandLine.EndpointProviderBase-1.html": {
    "href": "api/TypedRest.CommandLine.EndpointProviderBase-1.html",
    "title": "Class EndpointProviderBase<T> | TypedRest for .NET",
    "summary": "Class EndpointProviderBase<T> Namespace TypedRest.CommandLine Assembly TypedRest.CommandLine.dll Builds EntryEndpoints using config files, interactive authentication, OAuth tokens, etc. public abstract class EndpointProviderBase<T> : IEndpointProvider<T> where T : EntryEndpoint Type Parameters T The type of entry endpoint to be created. Must have a constructor with the following signature: (Uri) Inheritance object EndpointProviderBase<T> Implements IEndpointProvider<T> Derived CliEndpointProvider<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ConfigDir protected virtual string ConfigDir { get; } Property Value string TokenCacheFile protected virtual string TokenCacheFile { get; } Property Value string Methods Build() Builds a new endpoint. public T Build() Returns T GetUri() Gets an URI and stores it. protected virtual Uri GetUri() Returns Uri NewEndpoint(Uri) Instantiates a T. protected virtual T NewEndpoint(Uri uri) Parameters uri Uri The base URI of the REST API. Returns T RequestToken(Uri) Asks the user or a service for the OAuth token to present as a \"Bearer\" to the REST API. protected abstract string? RequestToken(Uri uri) Parameters uri Uri Returns string The OAuth token or null if it cannot be requested. RequestUri() Asks the user or a service for the base URI of the REST API. protected abstract Uri? RequestUri() Returns Uri The endpoint URI or null if it cannot be requested. ResetAuthentication() Clears any cached authentication information. public void ResetAuthentication()"
  },
  "api/TypedRest.CommandLine.Executor-2.html": {
    "href": "api/TypedRest.CommandLine.Executor-2.html",
    "title": "Class Executor<TEndpoint, TCommand> | TypedRest for .NET",
    "summary": "Class Executor<TEndpoint, TCommand> Namespace TypedRest.CommandLine Assembly TypedRest.CommandLine.dll Executes IEndpointCommands based on command-line arguments. public class Executor<TEndpoint, TCommand> where TEndpoint : EntryEndpoint where TCommand : IEndpointCommand Type Parameters TEndpoint The type of entry endpoint to use for CliEndpointProvider<T>. Must have suitable constructors. TCommand The type of entry command to use. Must have a constructor that takes a single TEndpoint. Inheritance object Executor<TEndpoint, TCommand> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Executor() Creates an executor using the default CliEndpointProvider<T>. public Executor() Executor(IEndpointProvider<TEndpoint>) Creates an executor using a custom endpointProvider. public Executor(IEndpointProvider<TEndpoint> endpointProvider) Parameters endpointProvider IEndpointProvider<TEndpoint> Methods ExecuteAsync(TCommand, IReadOnlyList<string>, CancellationToken) Executes a command and performs error handling. protected virtual Task<int> ExecuteAsync(TCommand command, IReadOnlyList<string> args, CancellationToken cancellationToken) Parameters command TCommand The command used to execute. args IReadOnlyList<string> the console arguments to parse. cancellationToken CancellationToken Used to cancel the request. Returns Task<int> The exit code. NewCommand(TEndpoint) Instantiates a TCommand. protected virtual TCommand NewCommand(TEndpoint endpoint) Parameters endpoint TEndpoint Returns TCommand RunAsync(IReadOnlyList<string>, CancellationToken) Creates a new endpoint and command and executes it using the specified command-line arguments. public Task<int> RunAsync(IReadOnlyList<string> args, CancellationToken cancellationToken = default) Parameters args IReadOnlyList<string> the console arguments to parse. cancellationToken CancellationToken Used to cancel the request. Returns Task<int> The exit code."
  },
  "api/TypedRest.CommandLine.IEndpointProvider-1.html": {
    "href": "api/TypedRest.CommandLine.IEndpointProvider-1.html",
    "title": "Interface IEndpointProvider<T> | TypedRest for .NET",
    "summary": "Interface IEndpointProvider<T> Namespace TypedRest.CommandLine Assembly TypedRest.CommandLine.dll Builds IEndpoint instances. public interface IEndpointProvider<out T> where T : IEndpoint Type Parameters T The type of endpoint created. Methods Build() Builds a new endpoint. T Build() Returns T ResetAuthentication() Clears any cached authentication information. void ResetAuthentication()"
  },
  "api/TypedRest.CommandLine.IO.IConsole.html": {
    "href": "api/TypedRest.CommandLine.IO.IConsole.html",
    "title": "Interface IConsole | TypedRest for .NET",
    "summary": "Interface IConsole Namespace TypedRest.CommandLine.IO Assembly TypedRest.CommandLine.dll Represents a text input/output device (e.g. a terminal/console) and a serialization strategy for objects. public interface IConsole Methods Read(string) Reads a text input. string Read(string prompt) Parameters prompt string The prompt to ask the user. Returns string ReadSecret(string) Reads a secret text input. string ReadSecret(string prompt) Parameters prompt string The prompt to ask the user. Returns string Read<T>() Reads an input object (usually in JSON format). T? Read<T>() Returns T Type Parameters T The type of object to read. Write(object?) Writes an output object (usually in JSON format). void Write(object? output) Parameters output object WriteError(Exception) Writes an exception as an error message. void WriteError(Exception exception) Parameters exception Exception WriteError(string) Writes an error message. void WriteError(string output) Parameters output string"
  },
  "api/TypedRest.CommandLine.IO.JsonConsole.html": {
    "href": "api/TypedRest.CommandLine.IO.JsonConsole.html",
    "title": "Class JsonConsole | TypedRest for .NET",
    "summary": "Class JsonConsole Namespace TypedRest.CommandLine.IO Assembly TypedRest.CommandLine.dll Reads from and writes to the default system console (stdin/stdout/stderr) using JSON serialization for objects. public class JsonConsole : IConsole Inheritance object JsonConsole Implements IConsole Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Read(string) Reads a text input. public string Read(string prompt) Parameters prompt string The prompt to ask the user. Returns string ReadSecret(string) Reads a secret text input. public string ReadSecret(string prompt) Parameters prompt string The prompt to ask the user. Returns string Read<T>() Reads an input object (usually in JSON format). public T? Read<T>() Returns T Type Parameters T The type of object to read. Write(object?) Writes an output object (usually in JSON format). public void Write(object? output) Parameters output object WriteError(Exception) Writes an exception as an error message. public void WriteError(Exception exception) Parameters exception Exception WriteError(string) Writes an error message. public void WriteError(string output) Parameters output string"
  },
  "api/TypedRest.CommandLine.IO.StreamPrinter-1.html": {
    "href": "api/TypedRest.CommandLine.IO.StreamPrinter-1.html",
    "title": "Class StreamPrinter<TEntity> | TypedRest for .NET",
    "summary": "Class StreamPrinter<TEntity> Namespace TypedRest.CommandLine.IO Assembly TypedRest.CommandLine.dll Prints a stream of TEntitys to an IConsole. public class StreamPrinter<TEntity> : IObserver<TEntity> Type Parameters TEntity Inheritance object StreamPrinter<TEntity> Implements IObserver<TEntity> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StreamPrinter(IConsole) Prints a stream of TEntitys to an IConsole. public StreamPrinter(IConsole console) Parameters console IConsole The console to print to. Methods OnCompleted() Notifies the observer that the provider has finished sending push-based notifications. public void OnCompleted() OnError(Exception) Reprots an error to the user via the console. public virtual void OnError(Exception error) Parameters error Exception OnNext(TEntity) Outputs a TEntity to the user via the console. public virtual void OnNext(TEntity value) Parameters value TEntity PrintAsync(IObservable<TEntity>, CancellationToken) Prints all entities provided by the observable to the JsonConsole. public Task PrintAsync(IObservable<TEntity> observable, CancellationToken cancellationToken) Parameters observable IObservable<TEntity> cancellationToken CancellationToken Returns Task Remarks This method is only intended to be called once per class instance."
  },
  "api/TypedRest.CommandLine.IO.html": {
    "href": "api/TypedRest.CommandLine.IO.html",
    "title": "Namespace TypedRest.CommandLine.IO | TypedRest for .NET",
    "summary": "Namespace TypedRest.CommandLine.IO Input and output methods for command-line interfaces. Classes JsonConsole Reads from and writes to the default system console (stdin/stdout/stderr) using JSON serialization for objects. StreamPrinter<TEntity> Prints a stream of TEntitys to an IConsole. Interfaces IConsole Represents a text input/output device (e.g. a terminal/console) and a serialization strategy for objects."
  },
  "api/TypedRest.CommandLine.html": {
    "href": "api/TypedRest.CommandLine.html",
    "title": "Namespace TypedRest.CommandLine | TypedRest for .NET",
    "summary": "Namespace TypedRest.CommandLine Build command-line interfaces for TypedRest clients. NuGet: TypedRest.CommandLine Namespaces TypedRest.CommandLine.Commands Commands operating on TypedRest.Endpoints. TypedRest.CommandLine.IO Input and output methods for command-line interfaces. Classes CliEndpointProvider<T> Builds EntryEndpoints using config files, interactive authentication, OAuth tokens, etc. EndpointProviderBase<T> Builds EntryEndpoints using config files, interactive authentication, OAuth tokens, etc. Executor<TEndpoint, TCommand> Executes IEndpointCommands based on command-line arguments. Interfaces IEndpointProvider<T> Builds IEndpoint instances."
  },
  "api/TypedRest.Endpoints.EndpointBase.html": {
    "href": "api/TypedRest.Endpoints.EndpointBase.html",
    "title": "Class EndpointBase | TypedRest for .NET",
    "summary": "Class EndpointBase Namespace TypedRest.Endpoints Assembly TypedRest.dll Base class for building endpoints, i.e. remote HTTP resources. public abstract class EndpointBase : IEndpoint Inheritance object EndpointBase Implements IEndpoint Derived EntryEndpoint CachingEndpointBase IndexerEndpoint<TElementEndpoint> BlobEndpoint UploadEndpoint StreamingEndpoint<TEntity> RpcEndpointBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors EndpointBase(Uri, HttpClient, IReadOnlyList<MediaTypeFormatter>, IErrorHandler, ILinkExtractor) Base class for building endpoints, i.e. remote HTTP resources. protected EndpointBase(Uri uri, HttpClient httpClient, IReadOnlyList<MediaTypeFormatter> serializers, IErrorHandler errorHandler, ILinkExtractor linkExtractor) Parameters uri Uri The HTTP URI of the remote element. httpClient HttpClient The HTTP client used to communicate with the remote element. serializers IReadOnlyList<MediaTypeFormatter> A list of serializers used for entities received from the server, sorted from most to least preferred. Always uses first for sending to the server. errorHandler IErrorHandler Handles errors in HTTP responses. linkExtractor ILinkExtractor Detects links in HTTP responses. EndpointBase(IEndpoint, string) Creates a new endpoint with a relative URI. protected EndpointBase(IEndpoint referrer, string relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri string The URI of this endpoint relative to the referrer's. Add a ./ prefix here to imply a trailing slash referrer's URI. EndpointBase(IEndpoint, Uri) Creates a new endpoint with a relative URI. protected EndpointBase(IEndpoint referrer, Uri relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri Uri The URI of this endpoint relative to the referrer's. Properties ErrorHandler Handles errors in responses. public IErrorHandler ErrorHandler { get; } Property Value IErrorHandler HttpClient The HTTP client used to communicate with the remote resource. public HttpClient HttpClient { get; } Property Value HttpClient LinkExtractor Extracts links from responses. public ILinkExtractor LinkExtractor { get; } Property Value ILinkExtractor Serializer The serializer used for entities sent to the server. Equal to the first entry in Serializers. protected virtual MediaTypeFormatter Serializer { get; } Property Value MediaTypeFormatter Exceptions InvalidOperationException Serializers is empty. Serializers A list of serializers used for entities received from the server, sorted from most to least preferred. Always uses first for sending to the server. public IReadOnlyList<MediaTypeFormatter> Serializers { get; } Property Value IReadOnlyList<MediaTypeFormatter> Uri The HTTP URI of the remote resource. public Uri Uri { get; } Property Value Uri Methods FinalizeAsync(Func<Task<HttpResponseMessage>>, string) Handles various cross-cutting concerns regarding a response message such as discovering links and handling errors and then disposes the response message. protected Task FinalizeAsync(Func<Task<HttpResponseMessage>> request, string caller = \"unknown\") Parameters request Func<Task<HttpResponseMessage>> A callback that performs the actual HTTP request. caller string The name of the method calling this method. Returns Task GetConstructor<TEndpoint>() Returns a constructor for TEndpoint as a function with a referrer an a relative URI as input. protected static Func<IEndpoint, Uri, TEndpoint> GetConstructor<TEndpoint>() where TEndpoint : IEndpoint Returns Func<IEndpoint, Uri, TEndpoint> Type Parameters TEndpoint Exceptions ArgumentException No suitable constructor found on TEndpoint. GetLinkTemplate(string) Retrieves a link template with a specific relation type. Prefer LinkTemplate(string, object) when possible. public UriTemplate GetLinkTemplate(string rel) Parameters rel string The relation type of the link template to look for. Returns UriTemplate The unresolved link template. Remarks Uses cached data from last response if possible. Tries lazy lookup with HTTP HEAD on cache miss. Exceptions KeyNotFoundException No link template with the specified rel could be found. GetLinks(string) Resolves all links with a specific relation type. Uses cached data from last response. public IReadOnlyList<(Uri uri, string? title)> GetLinks(string rel) Parameters rel string The relation type of the links to look for. Returns IReadOnlyList<(Uri uri, string title)> HandleAsync(Func<Task<HttpResponseMessage>>, string) Handles various cross-cutting concerns regarding a response message such as discovering links and handling errors. protected virtual Task<HttpResponseMessage> HandleAsync(Func<Task<HttpResponseMessage>> request, string caller = \"unknown\") Parameters request Func<Task<HttpResponseMessage>> A callback that performs the actual HTTP request. caller string The name of the method calling this method. Returns Task<HttpResponseMessage> The HTTP response. HandleCapabilities(HttpResponseMessage) Handles allowed HTTP methods and other capabilities reported by the server. protected virtual void HandleCapabilities(HttpResponseMessage response) Parameters response HttpResponseMessage IsMethodAllowed(HttpMethod) Indicates whether the server has specified a specific HTTP method is currently allowed. protected bool? IsMethodAllowed(HttpMethod method) Parameters method HttpMethod The HTTP methods (e.g. GET, POST, ...) to check. Returns bool? true if the method is allowed, false if the method is not allowed, null If no request has been sent yet or the server did not specify allowed methods. Remarks Uses cached data from last response. Link(string) Resolves a single link with a specific relation type. Uses cached data from last response if possible. Tries lazy lookup with HTTP HEAD on cache miss. public Uri Link(string rel) Parameters rel string The relation type of the link to look for. Returns Uri Exceptions KeyNotFoundException No link with the specified rel could be found. LinkTemplate(string, IDictionary<string, object>) Resolves a link template with a specific relation type. Uses cached data from last response if possible. Tries lazy lookup with HTTP HEAD on cache miss. public Uri LinkTemplate(string rel, IDictionary<string, object> variables) Parameters rel string The relation type of the link template to look for. variables IDictionary<string, object> Variables for resolving the template. Returns Uri The href of the link resolved relative to this endpoint's URI. Exceptions KeyNotFoundException No link template with the specified rel could be found. LinkTemplate(string, object) Resolves a link template with a specific relation type. public Uri LinkTemplate(string rel, object variables) Parameters rel string The relation type of the link template to look for. variables object An object used to provide properties for resolving the template. Returns Uri The href of the link resolved relative to this endpoint's URI. Remarks Uses cached data from last response if possible. Tries lazy lookup with HTTP HEAD on cache miss. Exceptions KeyNotFoundException No link template with the specified rel could be found. SetDefaultLink(string, string?) Registers one or more default links for a specific relation type. public void SetDefaultLink(string rel, string? href) Parameters rel string The relation type of the link to add. href string The href of the link relative to this endpoint's URI. Use null to remove any previous entries for the relation type. Remarks These links are used when no links with this relation type are provided by the server. This should only be called during initial setup of the endpoint. See Also GetLinks(string) Link(string) SetDefaultLinkTemplate(string, string?) Registers a default link template for a specific relation type. public void SetDefaultLinkTemplate(string rel, string? href) Parameters rel string The relation type of the link template to add. href string The href of the link template relative to this endpoint's URI. Use null to remove any previous entry for the relation type. Remarks This template is used when no template with this relation type is provided by the server. This should only be called during initial setup of the endpoint. See Also LinkTemplate(string, object) StartActivity(string) Starts a new Activity if there is any listener registered (e.g. OpenTelemetry), returns null otherwise. protected Activity? StartActivity(string caller = \"unknown\") Parameters caller string The name of the method calling this method. Returns Activity ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/TypedRest.Endpoints.EntryEndpoint.html": {
    "href": "api/TypedRest.Endpoints.EntryEndpoint.html",
    "title": "Class EntryEndpoint | TypedRest for .NET",
    "summary": "Class EntryEndpoint Namespace TypedRest.Endpoints Assembly TypedRest.dll Represent the top-level URI of an API. Derive from this class and add your own set of child-IEndpoints as properties. public class EntryEndpoint : EndpointBase, IEndpoint Inheritance object EndpointBase EntryEndpoint Implements IEndpoint Inherited Members EndpointBase.Uri EndpointBase.HttpClient EndpointBase.Serializers EndpointBase.Serializer EndpointBase.ErrorHandler EndpointBase.LinkExtractor EndpointBase.HandleAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.FinalizeAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.StartActivity(string) EndpointBase.SetDefaultLink(string, string) EndpointBase.SetDefaultLinkTemplate(string, string) EndpointBase.GetLinks(string) EndpointBase.Link(string) EndpointBase.GetLinkTemplate(string) EndpointBase.LinkTemplate(string, IDictionary<string, object>) EndpointBase.LinkTemplate(string, object) EndpointBase.HandleCapabilities(HttpResponseMessage) EndpointBase.IsMethodAllowed(HttpMethod) EndpointBase.ToString() EndpointBase.GetConstructor<TEndpoint>() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors EntryEndpoint(HttpClient, IReadOnlyList<MediaTypeFormatter>, Uri?, IErrorHandler?, ILinkExtractor?) Creates a new entry endpoint. protected EntryEndpoint(HttpClient httpClient, IReadOnlyList<MediaTypeFormatter> serializers, Uri? uri = null, IErrorHandler? errorHandler = null, ILinkExtractor? linkExtractor = null) Parameters httpClient HttpClient The HTTP client used to communicate with the REST API. serializers IReadOnlyList<MediaTypeFormatter> A list of serializers used for entities received from the server, sorted from most to least preferred. Always uses first for sending to the server. uri Uri The base URI of the REST API. Missing trailing slash will be appended automatically. BaseAddress is used if this is unset. errorHandler IErrorHandler Handles errors in HTTP responses. Defaults to DefaultErrorHandler if unset. linkExtractor ILinkExtractor Detects links in HTTP responses. Combines HeaderLinkExtractor and HalLinkExtractor if unset. EntryEndpoint(HttpClient, Uri?, MediaTypeFormatter?, IErrorHandler?, ILinkExtractor?) Creates a new entry endpoint. public EntryEndpoint(HttpClient httpClient, Uri? uri = null, MediaTypeFormatter? serializer = null, IErrorHandler? errorHandler = null, ILinkExtractor? linkExtractor = null) Parameters httpClient HttpClient The HTTP client used to communicate with the REST API. uri Uri The base URI of the REST API. Missing trailing slash will be appended automatically. BaseAddress is used if this is unset. serializer MediaTypeFormatter The serializer used for entities sent to and received from the server. Defaults to NewtonsoftJsonSerializer if unset. errorHandler IErrorHandler Handles errors in HTTP responses. Defaults to DefaultErrorHandler if unset. linkExtractor ILinkExtractor Detects links in HTTP responses. Combines HeaderLinkExtractor and HalLinkExtractor if unset. EntryEndpoint(Uri, NetworkCredential?, MediaTypeFormatter?, IErrorHandler?, ILinkExtractor?) Creates a new entry endpoint. public EntryEndpoint(Uri uri, NetworkCredential? credentials = null, MediaTypeFormatter? serializer = null, IErrorHandler? errorHandler = null, ILinkExtractor? linkExtractor = null) Parameters uri Uri The base URI of the REST API. credentials NetworkCredential Optional HTTP Basic authentication credentials used to authenticate against the REST API. serializer MediaTypeFormatter The serializer used for entities sent to and received from the server. Defaults to NewtonsoftJsonSerializer if unset. errorHandler IErrorHandler Handles errors in HTTP responses. Leave unset for default implementation. linkExtractor ILinkExtractor Detects links in HTTP responses. Leave unset for default implementation. Methods ReadMetaAsync(CancellationToken) Fetches metadata such as links from the server. public Task ReadMetaAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task Exceptions AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code."
  },
  "api/TypedRest.Endpoints.Generic.CachingEndpointBase.html": {
    "href": "api/TypedRest.Endpoints.Generic.CachingEndpointBase.html",
    "title": "Class CachingEndpointBase | TypedRest for .NET",
    "summary": "Class CachingEndpointBase Namespace TypedRest.Endpoints.Generic Assembly TypedRest.dll Base class for building endpoints that use ETags and Last-Modified timestamps for caching and to avoid lost updates. public abstract class CachingEndpointBase : EndpointBase, ICachingEndpoint, IEndpoint Inheritance object EndpointBase CachingEndpointBase Implements ICachingEndpoint IEndpoint Derived CollectionEndpoint<TEntity, TElementEndpoint> ElementEndpoint<TEntity> Inherited Members EndpointBase.Uri EndpointBase.HttpClient EndpointBase.Serializers EndpointBase.Serializer EndpointBase.ErrorHandler EndpointBase.LinkExtractor EndpointBase.HandleAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.FinalizeAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.StartActivity(string) EndpointBase.SetDefaultLink(string, string) EndpointBase.SetDefaultLinkTemplate(string, string) EndpointBase.GetLinks(string) EndpointBase.Link(string) EndpointBase.GetLinkTemplate(string) EndpointBase.LinkTemplate(string, IDictionary<string, object>) EndpointBase.LinkTemplate(string, object) EndpointBase.HandleCapabilities(HttpResponseMessage) EndpointBase.IsMethodAllowed(HttpMethod) EndpointBase.ToString() EndpointBase.GetConstructor<TEndpoint>() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CachingEndpointBase(IEndpoint, string) Creates a new endpoint with a relative URI. protected CachingEndpointBase(IEndpoint referrer, string relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri string The URI of this endpoint relative to the referrer's. Add a ./ prefix here to imply a trailing slash referrer's URI. CachingEndpointBase(IEndpoint, Uri) Base class for building endpoints that use ETags and Last-Modified timestamps for caching and to avoid lost updates. protected CachingEndpointBase(IEndpoint referrer, Uri relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri Uri The URI of this endpoint relative to the referrer's. Add a ./ prefix here to imply a trailing slash referrer's URI. Properties ResponseCache A cached copy of the last response. public ResponseCache? ResponseCache { get; set; } Property Value ResponseCache Methods DeleteContentAsync(CancellationToken, string) Performs an Delete request on the Uri. protected Task DeleteContentAsync(CancellationToken cancellationToken, string caller = \"unknown\") Parameters cancellationToken CancellationToken Used to cancel the request. caller string The name of the method calling this method. Returns Task Remarks Sends IfMatch if there is a cached ETag to detect lost updates. Exceptions InvalidOperationException The content has changed since it was last retrieved with GetContentAsync(CancellationToken, string). Your changes were rejected to prevent a lost update. InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code. GetContentAsync(CancellationToken, string) Performs an HTTP GET request on the Uri and caches the response if the server sends an ETag. protected Task<HttpContent> GetContentAsync(CancellationToken cancellationToken, string caller = \"unknown\") Parameters cancellationToken CancellationToken Used to cancel the request. caller string The name of the method calling this method. Returns Task<HttpContent> The response of the request or the cached response if the server responded with NotModified. Remarks Sends IfNoneMatch if there is already a cached ETag. Exceptions AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone or empty response body HttpRequestException Other non-success status code. PutContentAsync(HttpContent, CancellationToken, string) Performs an Put request on the Uri. protected Task<HttpResponseMessage> PutContentAsync(HttpContent content, CancellationToken cancellationToken, string caller = \"unknown\") Parameters content HttpContent The content to send to the server. cancellationToken CancellationToken Used to cancel the request. caller string The name of the method calling this method. Returns Task<HttpResponseMessage> The response message. Remarks Sends IfMatch if there is a cached ETag to detect lost updates. Exceptions InvalidOperationException The content has changed since it was last retrieved with GetContentAsync(CancellationToken, string). Your changes were rejected to prevent a lost update. InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code."
  },
  "api/TypedRest.Endpoints.Generic.CollectionEndpoint-1.html": {
    "href": "api/TypedRest.Endpoints.Generic.CollectionEndpoint-1.html",
    "title": "Class CollectionEndpoint<TEntity> | TypedRest for .NET",
    "summary": "Class CollectionEndpoint<TEntity> Namespace TypedRest.Endpoints.Generic Assembly TypedRest.dll Endpoint for a collection of TEntitys addressable as ElementEndpoint<TEntity>s. public class CollectionEndpoint<TEntity> : CollectionEndpoint<TEntity, ElementEndpoint<TEntity>>, ICachingEndpoint, ICollectionEndpoint<TEntity, ElementEndpoint<TEntity>>, IIndexerEndpoint<ElementEndpoint<TEntity>>, ICollectionEndpoint<TEntity>, ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>, IIndexerEndpoint<IElementEndpoint<TEntity>>, IEndpoint where TEntity : class Type Parameters TEntity The type of individual elements in the collection. Inheritance object EndpointBase CachingEndpointBase CollectionEndpoint<TEntity, ElementEndpoint<TEntity>> CollectionEndpoint<TEntity> Implements ICachingEndpoint ICollectionEndpoint<TEntity, ElementEndpoint<TEntity>> IIndexerEndpoint<ElementEndpoint<TEntity>> ICollectionEndpoint<TEntity> ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>> IIndexerEndpoint<IElementEndpoint<TEntity>> IEndpoint Inherited Members CollectionEndpoint<TEntity, ElementEndpoint<TEntity>>.this[string] CollectionEndpoint<TEntity, ElementEndpoint<TEntity>>.this[TEntity] CollectionEndpoint<TEntity, ElementEndpoint<TEntity>>.ReadAllAllowed CollectionEndpoint<TEntity, ElementEndpoint<TEntity>>.ReadAllAsync(CancellationToken) CollectionEndpoint<TEntity, ElementEndpoint<TEntity>>.RangeUnit CollectionEndpoint<TEntity, ElementEndpoint<TEntity>>.HandleCapabilities(HttpResponseMessage) CollectionEndpoint<TEntity, ElementEndpoint<TEntity>>.ReadRangeAllowed CollectionEndpoint<TEntity, ElementEndpoint<TEntity>>.ReadRangeAsync(RangeItemHeaderValue, CancellationToken) CollectionEndpoint<TEntity, ElementEndpoint<TEntity>>.CreateAllowed CollectionEndpoint<TEntity, ElementEndpoint<TEntity>>.CreateAsync(TEntity, CancellationToken) CollectionEndpoint<TEntity, ElementEndpoint<TEntity>>.CreateAllAllowed CollectionEndpoint<TEntity, ElementEndpoint<TEntity>>.CreateAllAsync(IEnumerable<TEntity>, CancellationToken) CollectionEndpoint<TEntity, ElementEndpoint<TEntity>>.SetAllAllowed CollectionEndpoint<TEntity, ElementEndpoint<TEntity>>.SetAllAsync(IEnumerable<TEntity>, CancellationToken) CachingEndpointBase.ResponseCache CachingEndpointBase.GetContentAsync(CancellationToken, string) CachingEndpointBase.PutContentAsync(HttpContent, CancellationToken, string) CachingEndpointBase.DeleteContentAsync(CancellationToken, string) EndpointBase.Uri EndpointBase.HttpClient EndpointBase.Serializers EndpointBase.Serializer EndpointBase.ErrorHandler EndpointBase.LinkExtractor EndpointBase.HandleAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.FinalizeAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.StartActivity(string) EndpointBase.SetDefaultLink(string, string) EndpointBase.SetDefaultLinkTemplate(string, string) EndpointBase.GetLinks(string) EndpointBase.Link(string) EndpointBase.GetLinkTemplate(string) EndpointBase.LinkTemplate(string, IDictionary<string, object>) EndpointBase.LinkTemplate(string, object) EndpointBase.HandleCapabilities(HttpResponseMessage) EndpointBase.IsMethodAllowed(HttpMethod) EndpointBase.ToString() EndpointBase.GetConstructor<TEndpoint>() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CollectionEndpoint(IEndpoint, string) Creates a new collection endpoint. public CollectionEndpoint(IEndpoint referrer, string relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri string The URI of this endpoint relative to the referrer's. Add a ./ prefix here to imply a trailing slash referrer's URI. CollectionEndpoint(IEndpoint, Uri) Creates a new collection endpoint. public CollectionEndpoint(IEndpoint referrer, Uri relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri Uri The URI of this endpoint relative to the referrer's."
  },
  "api/TypedRest.Endpoints.Generic.CollectionEndpoint-2.html": {
    "href": "api/TypedRest.Endpoints.Generic.CollectionEndpoint-2.html",
    "title": "Class CollectionEndpoint<TEntity, TElementEndpoint> | TypedRest for .NET",
    "summary": "Class CollectionEndpoint<TEntity, TElementEndpoint> Namespace TypedRest.Endpoints.Generic Assembly TypedRest.dll Endpoint for a collection of TEntitys addressable as TElementEndpoints. public class CollectionEndpoint<TEntity, TElementEndpoint> : CachingEndpointBase, ICachingEndpoint, ICollectionEndpoint<TEntity, TElementEndpoint>, IIndexerEndpoint<TElementEndpoint>, IEndpoint where TEntity : class where TElementEndpoint : class, IElementEndpoint<TEntity> Type Parameters TEntity The type of individual elements in the collection. TElementEndpoint The type of IElementEndpoint<TEntity> to provide for individual TEntitys. Must have a public constructor with an IEndpoint and an Uri or string parameter. Inheritance object EndpointBase CachingEndpointBase CollectionEndpoint<TEntity, TElementEndpoint> Implements ICachingEndpoint ICollectionEndpoint<TEntity, TElementEndpoint> IIndexerEndpoint<TElementEndpoint> IEndpoint Derived CollectionEndpoint<TEntity> StreamingCollectionEndpoint<TEntity, TElementEndpoint> Inherited Members CachingEndpointBase.ResponseCache CachingEndpointBase.GetContentAsync(CancellationToken, string) CachingEndpointBase.PutContentAsync(HttpContent, CancellationToken, string) CachingEndpointBase.DeleteContentAsync(CancellationToken, string) EndpointBase.Uri EndpointBase.HttpClient EndpointBase.Serializers EndpointBase.Serializer EndpointBase.ErrorHandler EndpointBase.LinkExtractor EndpointBase.HandleAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.FinalizeAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.StartActivity(string) EndpointBase.SetDefaultLink(string, string) EndpointBase.SetDefaultLinkTemplate(string, string) EndpointBase.GetLinks(string) EndpointBase.Link(string) EndpointBase.GetLinkTemplate(string) EndpointBase.LinkTemplate(string, IDictionary<string, object>) EndpointBase.LinkTemplate(string, object) EndpointBase.IsMethodAllowed(HttpMethod) EndpointBase.ToString() EndpointBase.GetConstructor<TEndpoint>() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods CollectionEndpointExtensions.ContainsAsync<TEntity, TElementEndpoint>(ICollectionEndpoint<TEntity, TElementEndpoint>, TEntity, CancellationToken) CollectionEndpointExtensions.DeleteAsync<TEntity, TElementEndpoint>(ICollectionEndpoint<TEntity, TElementEndpoint>, TEntity, CancellationToken) CollectionEndpointExtensions.MergeAsync<TEntity, TElementEndpoint>(ICollectionEndpoint<TEntity, TElementEndpoint>, TEntity, CancellationToken) CollectionEndpointExtensions.SetAsync<TEntity, TElementEndpoint>(ICollectionEndpoint<TEntity, TElementEndpoint>, TEntity, CancellationToken) CollectionEndpointExtensions.ContainsAsync<TElementEndpoint>(IIndexerEndpoint<TElementEndpoint>, string, CancellationToken) CollectionEndpointExtensions.DeleteAsync<TElementEndpoint>(IIndexerEndpoint<TElementEndpoint>, string, CancellationToken) Constructors CollectionEndpoint(IEndpoint, string) Creates a new element collection endpoint. public CollectionEndpoint(IEndpoint referrer, string relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri string The URI of this endpoint relative to the referrer's. Add a ./ prefix here to imply a trailing slash referrer's URI. CollectionEndpoint(IEndpoint, Uri) Endpoint for a collection of TEntitys addressable as TElementEndpoints. public CollectionEndpoint(IEndpoint referrer, Uri relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri Uri The URI of this endpoint relative to the referrer's. Properties CreateAllAllowed Indicates whether the server has specified CreateAllAllowed is currently allowed. public bool? CreateAllAllowed { get; } Property Value bool? An indicator whether the verb is allowed. If no request has been sent yet or the server did not specify allowed verbs null is returned. Remarks Uses cached data from last response. CreateAllowed Indicates whether the server has specified CreateAsync(TEntity, CancellationToken) is currently allowed. public bool? CreateAllowed { get; } Property Value bool? true if the method is allowed, false if the method is not allowed, null If no request has been sent yet or the server did not specify allowed methods. Remarks Uses cached data from last response. this[string] Returns an element endpoint for a specific child element. public virtual TElementEndpoint this[string id] { get; } Parameters id string The ID identifying the entity. Property Value TElementEndpoint this[TEntity] Returns an ElementEndpoint<TEntity> for a specific child element. public virtual TElementEndpoint this[TEntity entity] { get; } Parameters entity TEntity An existing entity to extract the ID from. Property Value TElementEndpoint RangeUnit The value used for Unit. public string RangeUnit { get; set; } Property Value string ReadAllAllowed Indicates whether the server has specified ReadAllAsync(CancellationToken) is currently allowed. public bool? ReadAllAllowed { get; } Property Value bool? true if the method is allowed, false if the method is not allowed, null If no request has been sent yet or the server did not specify allowed methods. Remarks Uses cached data from last response. ReadRangeAllowed Indicates whether the server has specified ReadRangeAsync(RangeItemHeaderValue, CancellationToken) is allowed. public bool? ReadRangeAllowed { get; } Property Value bool? An indicator whether the method is allowed. If no request has been sent yet. Remarks Uses cached data from last response. SetAllAllowed Indicates whether the server has specified SetAllAllowed is currently allowed. public bool? SetAllAllowed { get; } Property Value bool? An indicator whether the verb is allowed. If no request has been sent yet or the server did not specify allowed verbs null is returned. Remarks Uses cached data from last response. Methods CreateAllAsync(IEnumerable<TEntity>, CancellationToken) Adds (or updates) multiple entities as elements in the collection. public virtual Task CreateAllAsync(IEnumerable<TEntity> entities, CancellationToken cancellationToken = default) Parameters entities IEnumerable<TEntity> The entities to create or modify. cancellationToken CancellationToken Used to cancel the request. Returns Task Remarks Uses a link with the relation type bulk to determine the URI to POST to. Defaults to the relative URI bulk. Exceptions InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden InvalidOperationException Conflict HttpRequestException Other non-success status code. CreateAsync(TEntity, CancellationToken) Adds a entity as a new element to the collection. public virtual ITask<TElementEndpoint?> CreateAsync(TEntity entity, CancellationToken cancellationToken = default) Parameters entity TEntity The new entity. cancellationToken CancellationToken Used to cancel the request. Returns ITask<TElementEndpoint> An endpoint for the newly created entity; null if the server returned neither a \"Location\" header nor an entity with an ID in the response body. Exceptions InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden InvalidOperationException Conflict HttpRequestException Other non-success status code. HandleCapabilities(HttpResponseMessage) Handles allowed HTTP methods and other capabilities reported by the server. protected override void HandleCapabilities(HttpResponseMessage response) Parameters response HttpResponseMessage ReadAllAsync(CancellationToken) Returns all entities in the collection. public virtual Task<List<TEntity>> ReadAllAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Used to cancel the request. Returns Task<List<TEntity>> Exceptions AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code. ReadRangeAsync(RangeItemHeaderValue, CancellationToken) Returns all entities within a specific range of the collection. public virtual Task<PartialResponse<TEntity>> ReadRangeAsync(RangeItemHeaderValue range, CancellationToken cancellationToken = default) Parameters range RangeItemHeaderValue The range of entities to retrieve. cancellationToken CancellationToken Used to cancel the request. Returns Task<PartialResponse<TEntity>> A subset of the entities and the range they come from. May not exactly match the request range. Exceptions AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone InvalidOperationException The requested range is not satisfiable. HttpRequestException Other non-success status code. SetAllAsync(IEnumerable<TEntity>, CancellationToken) Replaces the entire content of the collection with new entities. public Task SetAllAsync(IEnumerable<TEntity> entities, CancellationToken cancellationToken = default) Parameters entities IEnumerable<TEntity> The new set of entities the collection shall contain. cancellationToken CancellationToken Used to cancel the request. Returns Task Exceptions InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden InvalidOperationException The entities have changed since they were last retrieved with ReadAllAsync(CancellationToken). Your changes were rejected to prevent a lost update. HttpRequestException Other non-success status code."
  },
  "api/TypedRest.Endpoints.Generic.CollectionEndpointExtensions.html": {
    "href": "api/TypedRest.Endpoints.Generic.CollectionEndpointExtensions.html",
    "title": "Class CollectionEndpointExtensions | TypedRest for .NET",
    "summary": "Class CollectionEndpointExtensions Namespace TypedRest.Endpoints.Generic Assembly TypedRest.dll Provides extension methods for IIndexerEndpoint<TElementEndpoint> and ICollectionEndpoint<TEntity, TElementEndpoint>. public static class CollectionEndpointExtensions Inheritance object CollectionEndpointExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ContainsAsync<TElementEndpoint>(IIndexerEndpoint<TElementEndpoint>, string, CancellationToken) Determines whether the collection contains a specific element. public static Task<bool> ContainsAsync<TElementEndpoint>(this IIndexerEndpoint<TElementEndpoint> endpoint, string id, CancellationToken cancellationToken = default) where TElementEndpoint : IElementEndpoint Parameters endpoint IIndexerEndpoint<TElementEndpoint> The collection endpoint containing the element. id string The ID identifying the entity in the collection. cancellationToken CancellationToken Used to cancel the request. Returns Task<bool> Type Parameters TElementEndpoint The type of IEndpoint to provide for individual entity. Remarks This is a convenience method equivalent to combining this[string] with ExistsAsync(CancellationToken). Exceptions AuthenticationException Unauthorized UnauthorizedAccessException Forbidden HttpRequestException Other non-success status code. ContainsAsync<TEntity, TElementEndpoint>(ICollectionEndpoint<TEntity, TElementEndpoint>, TEntity, CancellationToken) Determines whether the collection contains a specific element. public static Task<bool> ContainsAsync<TEntity, TElementEndpoint>(this ICollectionEndpoint<TEntity, TElementEndpoint> endpoint, TEntity element, CancellationToken cancellationToken = default) where TEntity : class where TElementEndpoint : IElementEndpoint<TEntity> Parameters endpoint ICollectionEndpoint<TEntity, TElementEndpoint> The collection endpoint containing the element. element TEntity The element to be checked. cancellationToken CancellationToken Used to cancel the request. Returns Task<bool> Type Parameters TEntity The type of individual elements in the collection. TElementEndpoint The type of IEndpoint to provide for individual TEntitys. Remarks This is a convenience method equivalent to combining this[TEntity] with ExistsAsync(CancellationToken). Exceptions AuthenticationException Unauthorized UnauthorizedAccessException Forbidden HttpRequestException Other non-success status code. DeleteAsync<TElementEndpoint>(IIndexerEndpoint<TElementEndpoint>, string, CancellationToken) Deletes an existing element from the collection. public static Task DeleteAsync<TElementEndpoint>(this IIndexerEndpoint<TElementEndpoint> endpoint, string id, CancellationToken cancellationToken = default) where TElementEndpoint : IElementEndpoint Parameters endpoint IIndexerEndpoint<TElementEndpoint> The collection endpoint containing the element. id string The ID identifying the entity in the collection. cancellationToken CancellationToken Used to cancel the request. Returns Task Type Parameters TElementEndpoint The type of IEndpoint to provide for individual entities. Remarks This is a convenience method equivalent to combining this[string] with DeleteAsync(CancellationToken). Exceptions AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code. DeleteAsync<TEntity, TElementEndpoint>(ICollectionEndpoint<TEntity, TElementEndpoint>, TEntity, CancellationToken) Deletes an existing element from the collection. public static Task DeleteAsync<TEntity, TElementEndpoint>(this ICollectionEndpoint<TEntity, TElementEndpoint> endpoint, TEntity element, CancellationToken cancellationToken = default) where TEntity : class where TElementEndpoint : IElementEndpoint<TEntity> Parameters endpoint ICollectionEndpoint<TEntity, TElementEndpoint> The collection endpoint containing the element. element TEntity The element to be deleted. cancellationToken CancellationToken Used to cancel the request. Returns Task Type Parameters TEntity The type of individual elements in the collection. TElementEndpoint The type of IEndpoint to provide for individual TEntitys. Remarks This is a convenience method equivalent to combining this[TEntity] with DeleteAsync(CancellationToken). Exceptions AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code. MergeAsync<TEntity, TElementEndpoint>(ICollectionEndpoint<TEntity, TElementEndpoint>, TEntity, CancellationToken) Modifies an existing element in the collection by merging changes on the server-side. public static Task<TEntity?> MergeAsync<TEntity, TElementEndpoint>(this ICollectionEndpoint<TEntity, TElementEndpoint> endpoint, TEntity element, CancellationToken cancellationToken = default) where TEntity : class where TElementEndpoint : IElementEndpoint<TEntity> Parameters endpoint ICollectionEndpoint<TEntity, TElementEndpoint> The collection endpoint containing the element. element TEntity The TEntity data to merge with the existing element. cancellationToken CancellationToken Used to cancel the request. Returns Task<TEntity> The TEntity as returned by the server, possibly with additional fields set. null if the server does not respond with a result entity. Type Parameters TEntity The type of individual elements in the collection. TElementEndpoint The type of IEndpoint to provide for individual TEntitys. Remarks This is a convenience method equivalent to combining this[TEntity] with SetAsync(TEntity, CancellationToken). Exceptions InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code. SetAsync<TEntity, TElementEndpoint>(ICollectionEndpoint<TEntity, TElementEndpoint>, TEntity, CancellationToken) Sets/replaces an existing element in the collection. public static Task<TEntity?> SetAsync<TEntity, TElementEndpoint>(this ICollectionEndpoint<TEntity, TElementEndpoint> endpoint, TEntity element, CancellationToken cancellationToken = default) where TEntity : class where TElementEndpoint : IElementEndpoint<TEntity> Parameters endpoint ICollectionEndpoint<TEntity, TElementEndpoint> The collection endpoint containing the element. element TEntity The new state of the element. cancellationToken CancellationToken Used to cancel the request. Returns Task<TEntity> The TEntity as returned by the server, possibly with additional fields set. null if the server does not respond with a result entity. Type Parameters TEntity The type of individual elements in the collection. TElementEndpoint The type of IEndpoint to provide for individual TEntitys. Remarks This is a convenience method equivalent to combining this[TEntity] with SetAsync(TEntity, CancellationToken). Exceptions InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code."
  },
  "api/TypedRest.Endpoints.Generic.ElementEndpoint-1.html": {
    "href": "api/TypedRest.Endpoints.Generic.ElementEndpoint-1.html",
    "title": "Class ElementEndpoint<TEntity> | TypedRest for .NET",
    "summary": "Class ElementEndpoint<TEntity> Namespace TypedRest.Endpoints.Generic Assembly TypedRest.dll Endpoint for an individual resource. public class ElementEndpoint<TEntity> : CachingEndpointBase, ICachingEndpoint, IElementEndpoint<TEntity>, IElementEndpoint, IEndpoint where TEntity : class Type Parameters TEntity The type of entity the endpoint represents. Inheritance object EndpointBase CachingEndpointBase ElementEndpoint<TEntity> Implements ICachingEndpoint IElementEndpoint<TEntity> IElementEndpoint IEndpoint Derived PollingEndpoint<TEntity> Inherited Members CachingEndpointBase.ResponseCache CachingEndpointBase.GetContentAsync(CancellationToken, string) CachingEndpointBase.PutContentAsync(HttpContent, CancellationToken, string) CachingEndpointBase.DeleteContentAsync(CancellationToken, string) EndpointBase.Uri EndpointBase.HttpClient EndpointBase.Serializers EndpointBase.Serializer EndpointBase.ErrorHandler EndpointBase.LinkExtractor EndpointBase.HandleAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.FinalizeAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.StartActivity(string) EndpointBase.SetDefaultLink(string, string) EndpointBase.SetDefaultLinkTemplate(string, string) EndpointBase.GetLinks(string) EndpointBase.Link(string) EndpointBase.GetLinkTemplate(string) EndpointBase.LinkTemplate(string, IDictionary<string, object>) EndpointBase.LinkTemplate(string, object) EndpointBase.HandleCapabilities(HttpResponseMessage) EndpointBase.IsMethodAllowed(HttpMethod) EndpointBase.ToString() EndpointBase.GetConstructor<TEndpoint>() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ElementEndpoint(IEndpoint, string) Creates a new element endpoint. public ElementEndpoint(IEndpoint referrer, string relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri string The URI of this endpoint relative to the referrer's. Add a ./ prefix here to imply a trailing slash referrer's URI. ElementEndpoint(IEndpoint, Uri) Creates a new element endpoint. public ElementEndpoint(IEndpoint referrer, Uri relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri Uri The URI of this endpoint relative to the referrer's. Properties DeleteAllowed Indicates whether the server has specified DeleteAsync(CancellationToken) is currently allowed. public bool? DeleteAllowed { get; } Property Value bool? true if the method is allowed, false if the method is not allowed, null If no request has been sent yet or the server did not specify allowed methods. Remarks Uses cached data from last response. MergeAllowed Indicates whether the server has specified MergeAsync(TEntity, CancellationToken) is currently allowed. public bool? MergeAllowed { get; } Property Value bool? true if the method is allowed, false if the method is not allowed, null If no request has been sent yet or the server did not specify allowed methods. Remarks Uses cached data from last response. Response A cached copy of the entity as received from the server. public TEntity? Response { get; } Property Value TEntity SetAllowed Indicates whether the server has specified SetAsync(TEntity, CancellationToken) is currently allowed. public bool? SetAllowed { get; } Property Value bool? true if the method is allowed, false if the method is not allowed, null If no request has been sent yet or the server did not specify allowed methods. Remarks Uses cached data from last response. Methods DeleteAsync(CancellationToken) Deletes the element. public virtual Task DeleteAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Used to cancel the request. Returns Task Exceptions InvalidOperationException The entity has changed since it was last retrieved with ReadAsync(CancellationToken). Your delete call was rejected to prevent a lost update. InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code. ExistsAsync(CancellationToken) Determines whether the element currently exists. public Task<bool> ExistsAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Used to cancel the request. Returns Task<bool> Exceptions AuthenticationException Unauthorized UnauthorizedAccessException Forbidden HttpRequestException Other non-success status code. MergeAsync(TEntity, CancellationToken) Modifies an existing entity by merging changes on the server-side. public Task<TEntity?> MergeAsync(TEntity entity, CancellationToken cancellationToken = default) Parameters entity TEntity The entity data to merge with the existing one. cancellationToken CancellationToken Used to cancel the request. Returns Task<TEntity> The modified entity as returned by the server, possibly with additional fields set. null if the server does not respond with a result entity. Exceptions InvalidOperationException The entity has changed since it was last retrieved with ReadAsync(CancellationToken). Your changes were rejected to prevent a lost update. InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code. ReadAsync(CancellationToken) Returns the entitiy. public virtual Task<TEntity> ReadAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Used to cancel the request. Returns Task<TEntity> Exceptions AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code. SetAsync(TEntity, CancellationToken) Sets/replaces the entity. public virtual Task<TEntity?> SetAsync(TEntity entity, CancellationToken cancellationToken = default) Parameters entity TEntity The new entities. cancellationToken CancellationToken Used to cancel the request. Returns Task<TEntity> The entity as returned by the server, possibly with additional fields set. null if the server does not respond with a result entity. Exceptions InvalidOperationException The entity has changed since it was last retrieved with ReadAsync(CancellationToken). Your changes were rejected to prevent a lost update. InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code. UpdateAsync(Action<JsonPatchDocument<TEntity>>, int, CancellationToken) Applies a JSON Patch to the entity. Sends the patch instructions to the server for processing; falls back to local processing with optimistic concurrency if that fails. public Task<TEntity?> UpdateAsync(Action<JsonPatchDocument<TEntity>> patchAction, int maxRetries = 3, CancellationToken cancellationToken = default) Parameters patchAction Action<JsonPatchDocument<TEntity>> Callback for building a patch document describing the desired modifications. maxRetries int The maximum number of retries to perform for optimistic concurrency before giving up. cancellationToken CancellationToken Used to cancel the request. Returns Task<TEntity> The entity as returned by the server, possibly with additional fields set. null if the server does not respond with a result entity. Exceptions InvalidOperationException The number of retries performed for optimistic concurrency exceeded maxRetries. NotSupportedException Serializers does not contain a JsonMediaTypeFormatter. InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code. UpdateAsync(Action<TEntity>, int, CancellationToken) Reads the current state of the entity, applies a change to it and stores the result. Applies optimistic concurrency using automatic retries. public Task<TEntity?> UpdateAsync(Action<TEntity> updateAction, int maxRetries = 3, CancellationToken cancellationToken = default) Parameters updateAction Action<TEntity> A callback that takes the current state of the entity and applies the desired modifications. maxRetries int The maximum number of retries to perform for optimistic concurrency before giving up. cancellationToken CancellationToken Used to cancel the request. Returns Task<TEntity> The entity as returned by the server, possibly with additional fields set. null if the server does not respond with a result entity. Exceptions InvalidOperationException The number of retries performed for optimistic concurrency exceeded maxRetries. InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code. UpdateAsync(Func<TEntity, TEntity>, int, CancellationToken) Reads the current state of the entity, applies a change to it and stores the result. Applies optimistic concurrency using automatic retries. public Task<TEntity?> UpdateAsync(Func<TEntity, TEntity> updateAction, int maxRetries = 3, CancellationToken cancellationToken = default) Parameters updateAction Func<TEntity, TEntity> A callback that takes the current state of the entity and applies the desired modifications. maxRetries int The maximum number of retries to perform for optimistic concurrency before giving up. cancellationToken CancellationToken Used to cancel the request. Returns Task<TEntity> The entity as returned by the server, possibly with additional fields set. null if the server does not respond with a result entity. Exceptions InvalidOperationException The number of retries performed for optimistic concurrency exceeded maxRetries. InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code."
  },
  "api/TypedRest.Endpoints.Generic.ICollectionEndpoint-1.html": {
    "href": "api/TypedRest.Endpoints.Generic.ICollectionEndpoint-1.html",
    "title": "Interface ICollectionEndpoint<TEntity> | TypedRest for .NET",
    "summary": "Interface ICollectionEndpoint<TEntity> Namespace TypedRest.Endpoints.Generic Assembly TypedRest.dll Endpoint for a collection of TEntitys addressable as IElementEndpoint<TEntity>s. public interface ICollectionEndpoint<TEntity> : ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>, IIndexerEndpoint<IElementEndpoint<TEntity>>, IEndpoint where TEntity : class Type Parameters TEntity The type of individual elements in the collection. Inherited Members ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>.this[TEntity] ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>.ReadAllAllowed ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>.ReadAllAsync(CancellationToken) ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>.ReadRangeAllowed ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>.ReadRangeAsync(RangeItemHeaderValue, CancellationToken) ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>.CreateAllowed ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>.CreateAsync(TEntity, CancellationToken) ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>.CreateAllAllowed ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>.CreateAllAsync(IEnumerable<TEntity>, CancellationToken) ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>.SetAllAllowed ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>.SetAllAsync(IEnumerable<TEntity>, CancellationToken) IIndexerEndpoint<IElementEndpoint<TEntity>>.this[string] IEndpoint.Uri IEndpoint.HttpClient IEndpoint.Serializers IEndpoint.ErrorHandler IEndpoint.LinkExtractor IEndpoint.GetLinks(string) IEndpoint.Link(string) IEndpoint.LinkTemplate(string, IDictionary<string, object>) IEndpoint.LinkTemplate(string, object) Extension Methods CollectionEndpointExtensions.ContainsAsync<TEntity, TElementEndpoint>(ICollectionEndpoint<TEntity, TElementEndpoint>, TEntity, CancellationToken) CollectionEndpointExtensions.DeleteAsync<TEntity, TElementEndpoint>(ICollectionEndpoint<TEntity, TElementEndpoint>, TEntity, CancellationToken) CollectionEndpointExtensions.MergeAsync<TEntity, TElementEndpoint>(ICollectionEndpoint<TEntity, TElementEndpoint>, TEntity, CancellationToken) CollectionEndpointExtensions.SetAsync<TEntity, TElementEndpoint>(ICollectionEndpoint<TEntity, TElementEndpoint>, TEntity, CancellationToken) CollectionEndpointExtensions.ContainsAsync<TElementEndpoint>(IIndexerEndpoint<TElementEndpoint>, string, CancellationToken) CollectionEndpointExtensions.DeleteAsync<TElementEndpoint>(IIndexerEndpoint<TElementEndpoint>, string, CancellationToken)"
  },
  "api/TypedRest.Endpoints.Generic.ICollectionEndpoint-2.html": {
    "href": "api/TypedRest.Endpoints.Generic.ICollectionEndpoint-2.html",
    "title": "Interface ICollectionEndpoint<TEntity, TElementEndpoint> | TypedRest for .NET",
    "summary": "Interface ICollectionEndpoint<TEntity, TElementEndpoint> Namespace TypedRest.Endpoints.Generic Assembly TypedRest.dll Endpoint for a collection of TEntitys addressable as TElementEndpoints. public interface ICollectionEndpoint<TEntity, out TElementEndpoint> : IIndexerEndpoint<TElementEndpoint>, IEndpoint where TEntity : class where TElementEndpoint : IElementEndpoint<TEntity> Type Parameters TEntity The type of individual elements in the collection. TElementEndpoint The type of IElementEndpoint<TEntity> to provide for individual TEntitys. Inherited Members IIndexerEndpoint<TElementEndpoint>.this[string] IEndpoint.Uri IEndpoint.HttpClient IEndpoint.Serializers IEndpoint.ErrorHandler IEndpoint.LinkExtractor IEndpoint.GetLinks(string) IEndpoint.Link(string) IEndpoint.LinkTemplate(string, IDictionary<string, object>) IEndpoint.LinkTemplate(string, object) Extension Methods CollectionEndpointExtensions.ContainsAsync<TEntity, TElementEndpoint>(ICollectionEndpoint<TEntity, TElementEndpoint>, TEntity, CancellationToken) CollectionEndpointExtensions.DeleteAsync<TEntity, TElementEndpoint>(ICollectionEndpoint<TEntity, TElementEndpoint>, TEntity, CancellationToken) CollectionEndpointExtensions.MergeAsync<TEntity, TElementEndpoint>(ICollectionEndpoint<TEntity, TElementEndpoint>, TEntity, CancellationToken) CollectionEndpointExtensions.SetAsync<TEntity, TElementEndpoint>(ICollectionEndpoint<TEntity, TElementEndpoint>, TEntity, CancellationToken) CollectionEndpointExtensions.ContainsAsync<TElementEndpoint>(IIndexerEndpoint<TElementEndpoint>, string, CancellationToken) CollectionEndpointExtensions.DeleteAsync<TElementEndpoint>(IIndexerEndpoint<TElementEndpoint>, string, CancellationToken) Remarks Use the more constrained ICollectionEndpoint<TEntity> when possible. Properties CreateAllAllowed Indicates whether the server has specified CreateAllAllowed is currently allowed. bool? CreateAllAllowed { get; } Property Value bool? An indicator whether the verb is allowed. If no request has been sent yet or the server did not specify allowed verbs null is returned. Remarks Uses cached data from last response. CreateAllowed Indicates whether the server has specified CreateAsync(TEntity, CancellationToken) is currently allowed. bool? CreateAllowed { get; } Property Value bool? true if the method is allowed, false if the method is not allowed, null If no request has been sent yet or the server did not specify allowed methods. Remarks Uses cached data from last response. this[TEntity] Returns an ElementEndpoint<TEntity> for a specific child element. TElementEndpoint this[TEntity entity] { get; } Parameters entity TEntity An existing entity to extract the ID from. Property Value TElementEndpoint ReadAllAllowed Indicates whether the server has specified ReadAllAsync(CancellationToken) is currently allowed. bool? ReadAllAllowed { get; } Property Value bool? true if the method is allowed, false if the method is not allowed, null If no request has been sent yet or the server did not specify allowed methods. Remarks Uses cached data from last response. ReadRangeAllowed Indicates whether the server has specified ReadRangeAsync(RangeItemHeaderValue, CancellationToken) is allowed. bool? ReadRangeAllowed { get; } Property Value bool? An indicator whether the method is allowed. If no request has been sent yet. Remarks Uses cached data from last response. SetAllAllowed Indicates whether the server has specified SetAllAllowed is currently allowed. bool? SetAllAllowed { get; } Property Value bool? An indicator whether the verb is allowed. If no request has been sent yet or the server did not specify allowed verbs null is returned. Remarks Uses cached data from last response. Methods CreateAllAsync(IEnumerable<TEntity>, CancellationToken) Adds (or updates) multiple entities as elements in the collection. Task CreateAllAsync(IEnumerable<TEntity> entities, CancellationToken cancellationToken = default) Parameters entities IEnumerable<TEntity> The entities to create or modify. cancellationToken CancellationToken Used to cancel the request. Returns Task Remarks Uses a link with the relation type bulk to determine the URI to POST to. Defaults to the relative URI bulk. Exceptions InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden InvalidOperationException Conflict HttpRequestException Other non-success status code. CreateAsync(TEntity, CancellationToken) Adds a entity as a new element to the collection. ITask<out TElementEndpoint?> CreateAsync(TEntity entity, CancellationToken cancellationToken = default) Parameters entity TEntity The new entity. cancellationToken CancellationToken Used to cancel the request. Returns ITask<TElementEndpoint> An endpoint for the newly created entity; null if the server returned neither a \"Location\" header nor an entity with an ID in the response body. Exceptions InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden InvalidOperationException Conflict HttpRequestException Other non-success status code. ReadAllAsync(CancellationToken) Returns all entities in the collection. Task<List<TEntity>> ReadAllAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Used to cancel the request. Returns Task<List<TEntity>> Exceptions AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code. ReadRangeAsync(RangeItemHeaderValue, CancellationToken) Returns all entities within a specific range of the collection. Task<PartialResponse<TEntity>> ReadRangeAsync(RangeItemHeaderValue range, CancellationToken cancellationToken = default) Parameters range RangeItemHeaderValue The range of entities to retrieve. cancellationToken CancellationToken Used to cancel the request. Returns Task<PartialResponse<TEntity>> A subset of the entities and the range they come from. May not exactly match the request range. Exceptions AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone InvalidOperationException The requested range is not satisfiable. HttpRequestException Other non-success status code. SetAllAsync(IEnumerable<TEntity>, CancellationToken) Replaces the entire content of the collection with new entities. Task SetAllAsync(IEnumerable<TEntity> entities, CancellationToken cancellationToken = default) Parameters entities IEnumerable<TEntity> The new set of entities the collection shall contain. cancellationToken CancellationToken Used to cancel the request. Returns Task Exceptions InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden InvalidOperationException The entities have changed since they were last retrieved with ReadAllAsync(CancellationToken). Your changes were rejected to prevent a lost update. HttpRequestException Other non-success status code."
  },
  "api/TypedRest.Endpoints.Generic.IElementEndpoint-1.html": {
    "href": "api/TypedRest.Endpoints.Generic.IElementEndpoint-1.html",
    "title": "Interface IElementEndpoint<TEntity> | TypedRest for .NET",
    "summary": "Interface IElementEndpoint<TEntity> Namespace TypedRest.Endpoints.Generic Assembly TypedRest.dll Endpoint for an individual resource. public interface IElementEndpoint<TEntity> : IElementEndpoint, IEndpoint where TEntity : class Type Parameters TEntity The type of entity the endpoint represents. Inherited Members IElementEndpoint.ExistsAsync(CancellationToken) IElementEndpoint.DeleteAllowed IElementEndpoint.DeleteAsync(CancellationToken) IEndpoint.Uri IEndpoint.HttpClient IEndpoint.Serializers IEndpoint.ErrorHandler IEndpoint.LinkExtractor IEndpoint.GetLinks(string) IEndpoint.Link(string) IEndpoint.LinkTemplate(string, IDictionary<string, object>) IEndpoint.LinkTemplate(string, object) Properties MergeAllowed Indicates whether the server has specified MergeAsync(TEntity, CancellationToken) is currently allowed. bool? MergeAllowed { get; } Property Value bool? true if the method is allowed, false if the method is not allowed, null If no request has been sent yet or the server did not specify allowed methods. Remarks Uses cached data from last response. Response A cached copy of the entity as received from the server. TEntity? Response { get; } Property Value TEntity SetAllowed Indicates whether the server has specified SetAsync(TEntity, CancellationToken) is currently allowed. bool? SetAllowed { get; } Property Value bool? true if the method is allowed, false if the method is not allowed, null If no request has been sent yet or the server did not specify allowed methods. Remarks Uses cached data from last response. Methods MergeAsync(TEntity, CancellationToken) Modifies an existing entity by merging changes on the server-side. Task<TEntity?> MergeAsync(TEntity entity, CancellationToken cancellationToken = default) Parameters entity TEntity The entity data to merge with the existing one. cancellationToken CancellationToken Used to cancel the request. Returns Task<TEntity> The modified entity as returned by the server, possibly with additional fields set. null if the server does not respond with a result entity. Exceptions InvalidOperationException The entity has changed since it was last retrieved with ReadAsync(CancellationToken). Your changes were rejected to prevent a lost update. InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code. ReadAsync(CancellationToken) Returns the entitiy. Task<TEntity> ReadAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Used to cancel the request. Returns Task<TEntity> Exceptions AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code. SetAsync(TEntity, CancellationToken) Sets/replaces the entity. Task<TEntity?> SetAsync(TEntity entity, CancellationToken cancellationToken = default) Parameters entity TEntity The new entities. cancellationToken CancellationToken Used to cancel the request. Returns Task<TEntity> The entity as returned by the server, possibly with additional fields set. null if the server does not respond with a result entity. Exceptions InvalidOperationException The entity has changed since it was last retrieved with ReadAsync(CancellationToken). Your changes were rejected to prevent a lost update. InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code. UpdateAsync(Action<JsonPatchDocument<TEntity>>, int, CancellationToken) Applies a JSON Patch to the entity. Sends the patch instructions to the server for processing; falls back to local processing with optimistic concurrency if that fails. Task<TEntity?> UpdateAsync(Action<JsonPatchDocument<TEntity>> patchAction, int maxRetries = 3, CancellationToken cancellationToken = default) Parameters patchAction Action<JsonPatchDocument<TEntity>> Callback for building a patch document describing the desired modifications. maxRetries int The maximum number of retries to perform for optimistic concurrency before giving up. cancellationToken CancellationToken Used to cancel the request. Returns Task<TEntity> The entity as returned by the server, possibly with additional fields set. null if the server does not respond with a result entity. Exceptions InvalidOperationException The number of retries performed for optimistic concurrency exceeded maxRetries. NotSupportedException Serializers does not contain a JsonMediaTypeFormatter. InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code. UpdateAsync(Action<TEntity>, int, CancellationToken) Reads the current state of the entity, applies a change to it and stores the result. Applies optimistic concurrency using automatic retries. Task<TEntity?> UpdateAsync(Action<TEntity> updateAction, int maxRetries = 3, CancellationToken cancellationToken = default) Parameters updateAction Action<TEntity> A callback that takes the current state of the entity and applies the desired modifications. maxRetries int The maximum number of retries to perform for optimistic concurrency before giving up. cancellationToken CancellationToken Used to cancel the request. Returns Task<TEntity> The entity as returned by the server, possibly with additional fields set. null if the server does not respond with a result entity. Exceptions InvalidOperationException The number of retries performed for optimistic concurrency exceeded maxRetries. InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code. UpdateAsync(Func<TEntity, TEntity>, int, CancellationToken) Reads the current state of the entity, applies a change to it and stores the result. Applies optimistic concurrency using automatic retries. Task<TEntity?> UpdateAsync(Func<TEntity, TEntity> updateAction, int maxRetries = 3, CancellationToken cancellationToken = default) Parameters updateAction Func<TEntity, TEntity> A callback that takes the current state of the entity and applies the desired modifications. maxRetries int The maximum number of retries to perform for optimistic concurrency before giving up. cancellationToken CancellationToken Used to cancel the request. Returns Task<TEntity> The entity as returned by the server, possibly with additional fields set. null if the server does not respond with a result entity. Exceptions InvalidOperationException The number of retries performed for optimistic concurrency exceeded maxRetries. InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code."
  },
  "api/TypedRest.Endpoints.Generic.IElementEndpoint.html": {
    "href": "api/TypedRest.Endpoints.Generic.IElementEndpoint.html",
    "title": "Interface IElementEndpoint | TypedRest for .NET",
    "summary": "Interface IElementEndpoint Namespace TypedRest.Endpoints.Generic Assembly TypedRest.dll Endpoint for an individual resource. Usually you will want to use the typed-variant of this interface: IElementEndpoint<TEntity> public interface IElementEndpoint : IEndpoint Inherited Members IEndpoint.Uri IEndpoint.HttpClient IEndpoint.Serializers IEndpoint.ErrorHandler IEndpoint.LinkExtractor IEndpoint.GetLinks(string) IEndpoint.Link(string) IEndpoint.LinkTemplate(string, IDictionary<string, object>) IEndpoint.LinkTemplate(string, object) Properties DeleteAllowed Indicates whether the server has specified DeleteAsync(CancellationToken) is currently allowed. bool? DeleteAllowed { get; } Property Value bool? true if the method is allowed, false if the method is not allowed, null If no request has been sent yet or the server did not specify allowed methods. Remarks Uses cached data from last response. Methods DeleteAsync(CancellationToken) Deletes the element. Task DeleteAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Used to cancel the request. Returns Task Exceptions InvalidOperationException The entity has changed since it was last retrieved with ReadAsync(CancellationToken). Your delete call was rejected to prevent a lost update. InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code. ExistsAsync(CancellationToken) Determines whether the element currently exists. Task<bool> ExistsAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Used to cancel the request. Returns Task<bool> Exceptions AuthenticationException Unauthorized UnauthorizedAccessException Forbidden HttpRequestException Other non-success status code."
  },
  "api/TypedRest.Endpoints.Generic.IIndexerEndpoint-1.html": {
    "href": "api/TypedRest.Endpoints.Generic.IIndexerEndpoint-1.html",
    "title": "Interface IIndexerEndpoint<TElementEndpoint> | TypedRest for .NET",
    "summary": "Interface IIndexerEndpoint<TElementEndpoint> Namespace TypedRest.Endpoints.Generic Assembly TypedRest.dll Endpoint that addresses child TElementEndpoints by ID. public interface IIndexerEndpoint<out TElementEndpoint> : IEndpoint where TElementEndpoint : IEndpoint Type Parameters TElementEndpoint The type of IEndpoint to provide for individual elements. Inherited Members IEndpoint.Uri IEndpoint.HttpClient IEndpoint.Serializers IEndpoint.ErrorHandler IEndpoint.LinkExtractor IEndpoint.GetLinks(string) IEndpoint.Link(string) IEndpoint.LinkTemplate(string, IDictionary<string, object>) IEndpoint.LinkTemplate(string, object) Properties this[string] Returns an element endpoint for a specific child element. TElementEndpoint this[string id] { get; } Parameters id string The ID identifying the entity. Property Value TElementEndpoint"
  },
  "api/TypedRest.Endpoints.Generic.IndexerEndpoint-1.html": {
    "href": "api/TypedRest.Endpoints.Generic.IndexerEndpoint-1.html",
    "title": "Class IndexerEndpoint<TElementEndpoint> | TypedRest for .NET",
    "summary": "Class IndexerEndpoint<TElementEndpoint> Namespace TypedRest.Endpoints.Generic Assembly TypedRest.dll Endpoint that addresses child TElementEndpoints by ID. public class IndexerEndpoint<TElementEndpoint> : EndpointBase, IIndexerEndpoint<TElementEndpoint>, IEndpoint where TElementEndpoint : IEndpoint Type Parameters TElementEndpoint The type of IEndpoint to provide for individual elements. Must have a public constructor with an IEndpoint and an Uri or string parameter. Inheritance object EndpointBase IndexerEndpoint<TElementEndpoint> Implements IIndexerEndpoint<TElementEndpoint> IEndpoint Inherited Members EndpointBase.Uri EndpointBase.HttpClient EndpointBase.Serializers EndpointBase.Serializer EndpointBase.ErrorHandler EndpointBase.LinkExtractor EndpointBase.HandleAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.FinalizeAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.StartActivity(string) EndpointBase.SetDefaultLink(string, string) EndpointBase.SetDefaultLinkTemplate(string, string) EndpointBase.GetLinks(string) EndpointBase.Link(string) EndpointBase.GetLinkTemplate(string) EndpointBase.LinkTemplate(string, IDictionary<string, object>) EndpointBase.LinkTemplate(string, object) EndpointBase.HandleCapabilities(HttpResponseMessage) EndpointBase.IsMethodAllowed(HttpMethod) EndpointBase.ToString() EndpointBase.GetConstructor<TEndpoint>() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors IndexerEndpoint(IEndpoint, string) Creates a new indexer endpoint. public IndexerEndpoint(IEndpoint referrer, string relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri string The URI of this endpoint relative to the referrer's. Add a ./ prefix here to imply a trailing slash referrer's URI. IndexerEndpoint(IEndpoint, Uri) Creates a new indexer endpoint. public IndexerEndpoint(IEndpoint referrer, Uri relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri Uri The URI of this endpoint relative to the referrer's. Properties this[string] Returns an element endpoint for a specific child element. public virtual TElementEndpoint this[string id] { get; } Parameters id string The ID identifying the entity. Property Value TElementEndpoint"
  },
  "api/TypedRest.Endpoints.Generic.html": {
    "href": "api/TypedRest.Endpoints.Generic.html",
    "title": "Namespace TypedRest.Endpoints.Generic | TypedRest for .NET",
    "summary": "Namespace TypedRest.Endpoints.Generic Generic endpoints allow you to model collections and elements. Classes CachingEndpointBase Base class for building endpoints that use ETags and Last-Modified timestamps for caching and to avoid lost updates. CollectionEndpointExtensions Provides extension methods for IIndexerEndpoint<TElementEndpoint> and ICollectionEndpoint<TEntity, TElementEndpoint>. CollectionEndpoint<TEntity> Endpoint for a collection of TEntitys addressable as ElementEndpoint<TEntity>s. CollectionEndpoint<TEntity, TElementEndpoint> Endpoint for a collection of TEntitys addressable as TElementEndpoints. ElementEndpoint<TEntity> Endpoint for an individual resource. IndexerEndpoint<TElementEndpoint> Endpoint that addresses child TElementEndpoints by ID. Interfaces ICollectionEndpoint<TEntity> Endpoint for a collection of TEntitys addressable as IElementEndpoint<TEntity>s. ICollectionEndpoint<TEntity, TElementEndpoint> Endpoint for a collection of TEntitys addressable as TElementEndpoints. IElementEndpoint Endpoint for an individual resource. Usually you will want to use the typed-variant of this interface: IElementEndpoint<TEntity> IElementEndpoint<TEntity> Endpoint for an individual resource. IIndexerEndpoint<TElementEndpoint> Endpoint that addresses child TElementEndpoints by ID."
  },
  "api/TypedRest.Endpoints.ICachingEndpoint.html": {
    "href": "api/TypedRest.Endpoints.ICachingEndpoint.html",
    "title": "Interface ICachingEndpoint | TypedRest for .NET",
    "summary": "Interface ICachingEndpoint Namespace TypedRest.Endpoints Assembly TypedRest.dll Endpoint that caches the last response. public interface ICachingEndpoint : IEndpoint Inherited Members IEndpoint.Uri IEndpoint.HttpClient IEndpoint.Serializers IEndpoint.ErrorHandler IEndpoint.LinkExtractor IEndpoint.GetLinks(string) IEndpoint.Link(string) IEndpoint.LinkTemplate(string, IDictionary<string, object>) IEndpoint.LinkTemplate(string, object) Properties ResponseCache A cached copy of the last response. ResponseCache? ResponseCache { get; set; } Property Value ResponseCache"
  },
  "api/TypedRest.Endpoints.IEndpoint.html": {
    "href": "api/TypedRest.Endpoints.IEndpoint.html",
    "title": "Interface IEndpoint | TypedRest for .NET",
    "summary": "Interface IEndpoint Namespace TypedRest.Endpoints Assembly TypedRest.dll Endpoint, i.e. a remote HTTP resource. public interface IEndpoint Properties ErrorHandler Handles errors in responses. IErrorHandler ErrorHandler { get; } Property Value IErrorHandler HttpClient The HTTP client used to communicate with the remote resource. HttpClient HttpClient { get; } Property Value HttpClient LinkExtractor Extracts links from responses. ILinkExtractor LinkExtractor { get; } Property Value ILinkExtractor Serializers A list of serializers used for entities received from the server, sorted from most to least preferred. Always uses first for sending to the server. IReadOnlyList<MediaTypeFormatter> Serializers { get; } Property Value IReadOnlyList<MediaTypeFormatter> Uri The HTTP URI of the remote resource. Uri Uri { get; } Property Value Uri Methods GetLinks(string) Resolves all links with a specific relation type. Uses cached data from last response. IReadOnlyList<(Uri uri, string? title)> GetLinks(string rel) Parameters rel string The relation type of the links to look for. Returns IReadOnlyList<(Uri uri, string title)> Link(string) Resolves a single link with a specific relation type. Uses cached data from last response if possible. Tries lazy lookup with HTTP HEAD on cache miss. Uri Link(string rel) Parameters rel string The relation type of the link to look for. Returns Uri Exceptions KeyNotFoundException No link with the specified rel could be found. LinkTemplate(string, IDictionary<string, object>) Resolves a link template with a specific relation type. Uses cached data from last response if possible. Tries lazy lookup with HTTP HEAD on cache miss. Uri LinkTemplate(string rel, IDictionary<string, object> variables) Parameters rel string The relation type of the link template to look for. variables IDictionary<string, object> Variables for resolving the template. Returns Uri The href of the link resolved relative to this endpoint's URI. Exceptions KeyNotFoundException No link template with the specified rel could be found. LinkTemplate(string, object) Resolves a link template with a specific relation type. Uri LinkTemplate(string rel, object variables) Parameters rel string The relation type of the link template to look for. variables object An object used to provide properties for resolving the template. Returns Uri The href of the link resolved relative to this endpoint's URI. Remarks Uses cached data from last response if possible. Tries lazy lookup with HTTP HEAD on cache miss. Exceptions KeyNotFoundException No link template with the specified rel could be found."
  },
  "api/TypedRest.Endpoints.Raw.BlobEndpoint.html": {
    "href": "api/TypedRest.Endpoints.Raw.BlobEndpoint.html",
    "title": "Class BlobEndpoint | TypedRest for .NET",
    "summary": "Class BlobEndpoint Namespace TypedRest.Endpoints.Raw Assembly TypedRest.dll Endpoint for a binary blob that can be downloaded or uploaded. public class BlobEndpoint : EndpointBase, IBlobEndpoint, IEndpoint Inheritance object EndpointBase BlobEndpoint Implements IBlobEndpoint IEndpoint Inherited Members EndpointBase.Uri EndpointBase.HttpClient EndpointBase.Serializers EndpointBase.Serializer EndpointBase.ErrorHandler EndpointBase.LinkExtractor EndpointBase.HandleAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.FinalizeAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.StartActivity(string) EndpointBase.SetDefaultLink(string, string) EndpointBase.SetDefaultLinkTemplate(string, string) EndpointBase.GetLinks(string) EndpointBase.Link(string) EndpointBase.GetLinkTemplate(string) EndpointBase.LinkTemplate(string, IDictionary<string, object>) EndpointBase.LinkTemplate(string, object) EndpointBase.HandleCapabilities(HttpResponseMessage) EndpointBase.IsMethodAllowed(HttpMethod) EndpointBase.ToString() EndpointBase.GetConstructor<TEndpoint>() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods BlobEndpointExtensions.DownloadAsync(IBlobEndpoint, string, CancellationToken) BlobEndpointExtensions.UploadFromAsync(IBlobEndpoint, string, string?, CancellationToken) Constructors BlobEndpoint(IEndpoint, string) Creates a new blob endpoint. public BlobEndpoint(IEndpoint referrer, string relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri string The URI of this endpoint relative to the referrer's. Add a ./ prefix here to imply a trailing slash referrer's URI. BlobEndpoint(IEndpoint, Uri) Endpoint for a binary blob that can be downloaded or uploaded. public BlobEndpoint(IEndpoint referrer, Uri relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri Uri The URI of this endpoint relative to the referrer's. Properties DeleteAllowed Indicates whether the server has specified DeleteAsync(CancellationToken) is currently allowed. public bool? DeleteAllowed { get; } Property Value bool? true if the method is allowed, false if the method is not allowed, null If no request has been sent yet or the server did not specify allowed methods. Remarks Uses cached data from last response. DownloadAllowed Indicates whether the server has specified DownloadAsync(CancellationToken) is currently allowed. public bool? DownloadAllowed { get; } Property Value bool? true if the method is allowed, false if the method is not allowed, null If no request has been sent yet or the server did not specify allowed methods. Remarks Uses cached data from last response. UploadAllowed Indicates whether the server has specified UploadFromAsync(Stream, string?, CancellationToken) is currently allowed. public bool? UploadAllowed { get; } Property Value bool? true if the method is allowed, false if the method is not allowed, null If no request has been sent yet or the server did not specify allowed methods. Remarks Uses cached data from last response. Methods DeleteAsync(CancellationToken) Deletes the blob from the server. public Task DeleteAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Used to cancel the request. Returns Task Exceptions InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code. DownloadAsync(CancellationToken) Downloads the blob's content to a stream. public Task<Stream> DownloadAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Used to cancel the request. Returns Task<Stream> A stream with the blob's content. Exceptions AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code. ProbeAsync(CancellationToken) Queries the server about capabilities of the endpoint without performing any action. public Task ProbeAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Used to cancel the request. Returns Task Exceptions AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code. UploadFromAsync(Stream, string?, CancellationToken) Uploads data as the blob's content from a stream. public Task UploadFromAsync(Stream stream, string? mimeType = null, CancellationToken cancellationToken = default) Parameters stream Stream The stream to read the upload data from. mimeType string The MIME type of the data to upload. cancellationToken CancellationToken Used to cancel the request. Returns Task Exceptions InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden HttpRequestException Other non-success status code."
  },
  "api/TypedRest.Endpoints.Raw.BlobEndpointExtensions.html": {
    "href": "api/TypedRest.Endpoints.Raw.BlobEndpointExtensions.html",
    "title": "Class BlobEndpointExtensions | TypedRest for .NET",
    "summary": "Class BlobEndpointExtensions Namespace TypedRest.Endpoints.Raw Assembly TypedRest.dll Provides extension methods for IBlobEndpoint. public static class BlobEndpointExtensions Inheritance object BlobEndpointExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DownloadAsync(IBlobEndpoint, string, CancellationToken) Downloads the blob's content to a file. public static Task DownloadAsync(this IBlobEndpoint endpoint, string path, CancellationToken cancellationToken = default) Parameters endpoint IBlobEndpoint The blob endpoint. path string The path of the file to write the download data to. cancellationToken CancellationToken Used to cancel the request. Returns Task A stream with the blob's content. Exceptions IOException Failed to write the file. AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code. UploadFromAsync(IBlobEndpoint, string, string?, CancellationToken) Uploads content as the blob's content from a file. public static Task UploadFromAsync(this IBlobEndpoint endpoint, string path, string? mimeType = null, CancellationToken cancellationToken = default) Parameters endpoint IBlobEndpoint The blob endpoint. path string The path of the file to read the upload data from. mimeType string The MIME type of the data to upload. cancellationToken CancellationToken Used to cancel the request. Returns Task Exceptions IOException Failed to read the file. InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code."
  },
  "api/TypedRest.Endpoints.Raw.IBlobEndpoint.html": {
    "href": "api/TypedRest.Endpoints.Raw.IBlobEndpoint.html",
    "title": "Interface IBlobEndpoint | TypedRest for .NET",
    "summary": "Interface IBlobEndpoint Namespace TypedRest.Endpoints.Raw Assembly TypedRest.dll Endpoint for a binary blob that can be downloaded or uploaded. public interface IBlobEndpoint : IEndpoint Inherited Members IEndpoint.Uri IEndpoint.HttpClient IEndpoint.Serializers IEndpoint.ErrorHandler IEndpoint.LinkExtractor IEndpoint.GetLinks(string) IEndpoint.Link(string) IEndpoint.LinkTemplate(string, IDictionary<string, object>) IEndpoint.LinkTemplate(string, object) Extension Methods BlobEndpointExtensions.DownloadAsync(IBlobEndpoint, string, CancellationToken) BlobEndpointExtensions.UploadFromAsync(IBlobEndpoint, string, string?, CancellationToken) Properties DeleteAllowed Indicates whether the server has specified DeleteAsync(CancellationToken) is currently allowed. bool? DeleteAllowed { get; } Property Value bool? true if the method is allowed, false if the method is not allowed, null If no request has been sent yet or the server did not specify allowed methods. Remarks Uses cached data from last response. DownloadAllowed Indicates whether the server has specified DownloadAsync(CancellationToken) is currently allowed. bool? DownloadAllowed { get; } Property Value bool? true if the method is allowed, false if the method is not allowed, null If no request has been sent yet or the server did not specify allowed methods. Remarks Uses cached data from last response. UploadAllowed Indicates whether the server has specified UploadFromAsync(Stream, string?, CancellationToken) is currently allowed. bool? UploadAllowed { get; } Property Value bool? true if the method is allowed, false if the method is not allowed, null If no request has been sent yet or the server did not specify allowed methods. Remarks Uses cached data from last response. Methods DeleteAsync(CancellationToken) Deletes the blob from the server. Task DeleteAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Used to cancel the request. Returns Task Exceptions InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code. DownloadAsync(CancellationToken) Downloads the blob's content to a stream. Task<Stream> DownloadAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Used to cancel the request. Returns Task<Stream> A stream with the blob's content. Exceptions AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code. ProbeAsync(CancellationToken) Queries the server about capabilities of the endpoint without performing any action. Task ProbeAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Used to cancel the request. Returns Task Exceptions AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code. UploadFromAsync(Stream, string?, CancellationToken) Uploads data as the blob's content from a stream. Task UploadFromAsync(Stream stream, string? mimeType = null, CancellationToken cancellationToken = default) Parameters stream Stream The stream to read the upload data from. mimeType string The MIME type of the data to upload. cancellationToken CancellationToken Used to cancel the request. Returns Task Exceptions InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden HttpRequestException Other non-success status code."
  },
  "api/TypedRest.Endpoints.Raw.IUploadEndpoint.html": {
    "href": "api/TypedRest.Endpoints.Raw.IUploadEndpoint.html",
    "title": "Interface IUploadEndpoint | TypedRest for .NET",
    "summary": "Interface IUploadEndpoint Namespace TypedRest.Endpoints.Raw Assembly TypedRest.dll Endpoint that accepts binary uploads. public interface IUploadEndpoint : IEndpoint Inherited Members IEndpoint.Uri IEndpoint.HttpClient IEndpoint.Serializers IEndpoint.ErrorHandler IEndpoint.LinkExtractor IEndpoint.GetLinks(string) IEndpoint.Link(string) IEndpoint.LinkTemplate(string, IDictionary<string, object>) IEndpoint.LinkTemplate(string, object) Extension Methods UploadEndpointExtensions.UploadFromAsync(IUploadEndpoint, string, string?, CancellationToken) Methods UploadFromAsync(Stream, string?, string?, CancellationToken) Uploads data to the endpoint from a stream. Task UploadFromAsync(Stream stream, string? fileName = null, string? mimeType = null, CancellationToken cancellationToken = default) Parameters stream Stream The stream to read the upload data from. fileName string The name of the uploaded file. mimeType string The MIME type of the data to upload. cancellationToken CancellationToken Used to cancel the request. Returns Task Exceptions InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code."
  },
  "api/TypedRest.Endpoints.Raw.UploadEndpoint.html": {
    "href": "api/TypedRest.Endpoints.Raw.UploadEndpoint.html",
    "title": "Class UploadEndpoint | TypedRest for .NET",
    "summary": "Class UploadEndpoint Namespace TypedRest.Endpoints.Raw Assembly TypedRest.dll Endpoint that accepts binary uploads using multi-part form encoding or raw bodies. public class UploadEndpoint : EndpointBase, IUploadEndpoint, IEndpoint Inheritance object EndpointBase UploadEndpoint Implements IUploadEndpoint IEndpoint Inherited Members EndpointBase.Uri EndpointBase.HttpClient EndpointBase.Serializers EndpointBase.Serializer EndpointBase.ErrorHandler EndpointBase.LinkExtractor EndpointBase.HandleAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.FinalizeAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.StartActivity(string) EndpointBase.SetDefaultLink(string, string) EndpointBase.SetDefaultLinkTemplate(string, string) EndpointBase.GetLinks(string) EndpointBase.Link(string) EndpointBase.GetLinkTemplate(string) EndpointBase.LinkTemplate(string, IDictionary<string, object>) EndpointBase.LinkTemplate(string, object) EndpointBase.HandleCapabilities(HttpResponseMessage) EndpointBase.IsMethodAllowed(HttpMethod) EndpointBase.ToString() EndpointBase.GetConstructor<TEndpoint>() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods UploadEndpointExtensions.UploadFromAsync(IUploadEndpoint, string, string?, CancellationToken) Constructors UploadEndpoint(IEndpoint, string, string?) Creates a new upload endpoint using multi-part form encoding. public UploadEndpoint(IEndpoint referrer, string relativeUri, string? formField = null) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri string The URI of this endpoint relative to the referrer's. formField string The name of the form field to place the uploaded data into; leave null to use raw bodies instead of a multi-part forms. UploadEndpoint(IEndpoint, Uri, string?) Endpoint that accepts binary uploads using multi-part form encoding or raw bodies. public UploadEndpoint(IEndpoint referrer, Uri relativeUri, string? formField = null) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri Uri The URI of this endpoint relative to the referrer's. formField string The name of the form field to place the uploaded data into; leave null to use raw bodies instead of a multi-part forms. Methods UploadFromAsync(Stream, string?, string?, CancellationToken) Uploads data to the endpoint from a stream. public Task UploadFromAsync(Stream stream, string? fileName = null, string? mimeType = null, CancellationToken cancellationToken = default) Parameters stream Stream The stream to read the upload data from. fileName string The name of the uploaded file. mimeType string The MIME type of the data to upload. cancellationToken CancellationToken Used to cancel the request. Returns Task Exceptions InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code."
  },
  "api/TypedRest.Endpoints.Raw.UploadEndpointExtensions.html": {
    "href": "api/TypedRest.Endpoints.Raw.UploadEndpointExtensions.html",
    "title": "Class UploadEndpointExtensions | TypedRest for .NET",
    "summary": "Class UploadEndpointExtensions Namespace TypedRest.Endpoints.Raw Assembly TypedRest.dll Provides extension methods for IUploadEndpoint. public static class UploadEndpointExtensions Inheritance object UploadEndpointExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods UploadFromAsync(IUploadEndpoint, string, string?, CancellationToken) Uploads data to the endpoint from a file. public static Task UploadFromAsync(this IUploadEndpoint endpoint, string path, string? mimeType = null, CancellationToken cancellationToken = default) Parameters endpoint IUploadEndpoint The blob endpoint. path string The path of the file to read the upload data from. mimeType string The MIME type of the data to upload. cancellationToken CancellationToken Used to cancel the request. Returns Task Exceptions IOException Failed to read the file. InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code."
  },
  "api/TypedRest.Endpoints.Raw.html": {
    "href": "api/TypedRest.Endpoints.Raw.html",
    "title": "Namespace TypedRest.Endpoints.Raw | TypedRest for .NET",
    "summary": "Namespace TypedRest.Endpoints.Raw Raw endpoints allow you to transmit binary data rather than serialized objects. Classes BlobEndpoint Endpoint for a binary blob that can be downloaded or uploaded. BlobEndpointExtensions Provides extension methods for IBlobEndpoint. UploadEndpoint Endpoint that accepts binary uploads using multi-part form encoding or raw bodies. UploadEndpointExtensions Provides extension methods for IUploadEndpoint. Interfaces IBlobEndpoint Endpoint for a binary blob that can be downloaded or uploaded. IUploadEndpoint Endpoint that accepts binary uploads."
  },
  "api/TypedRest.Endpoints.Reactive.IPollingEndpoint-1.html": {
    "href": "api/TypedRest.Endpoints.Reactive.IPollingEndpoint-1.html",
    "title": "Interface IPollingEndpoint<TEntity> | TypedRest for .NET",
    "summary": "Interface IPollingEndpoint<TEntity> Namespace TypedRest.Endpoints.Reactive Assembly TypedRest.Reactive.dll Endpoint for a resource that can be polled for state changes. public interface IPollingEndpoint<TEntity> : IElementEndpoint<TEntity>, IElementEndpoint, IEndpoint where TEntity : class Type Parameters TEntity The type of entity the endpoint represents. Inherited Members IElementEndpoint<TEntity>.Response IElementEndpoint<TEntity>.ReadAsync(CancellationToken) IElementEndpoint<TEntity>.SetAllowed IElementEndpoint<TEntity>.SetAsync(TEntity, CancellationToken) IElementEndpoint<TEntity>.MergeAllowed IElementEndpoint<TEntity>.MergeAsync(TEntity, CancellationToken) IElementEndpoint<TEntity>.UpdateAsync(Func<TEntity, TEntity>, int, CancellationToken) IElementEndpoint<TEntity>.UpdateAsync(Action<TEntity>, int, CancellationToken) IElementEndpoint<TEntity>.UpdateAsync(Action<JsonPatchDocument<TEntity>>, int, CancellationToken) IElementEndpoint.ExistsAsync(CancellationToken) IElementEndpoint.DeleteAllowed IElementEndpoint.DeleteAsync(CancellationToken) IEndpoint.Uri IEndpoint.HttpClient IEndpoint.Serializers IEndpoint.ErrorHandler IEndpoint.LinkExtractor IEndpoint.GetLinks(string) IEndpoint.Link(string) IEndpoint.LinkTemplate(string, IDictionary<string, object>) IEndpoint.LinkTemplate(string, object) Properties PollingInterval The interval in which to send requests to the server. The server can modify this value using the Retry-After header. TimeSpan PollingInterval { get; set; } Property Value TimeSpan Methods GetObservable() Provides an observable stream of entity states. Compares entities using Equals(object) to detect changes. IObservable<TEntity> GetObservable() Returns IObservable<TEntity>"
  },
  "api/TypedRest.Endpoints.Reactive.IStreamingCollectionEndpoint-1.html": {
    "href": "api/TypedRest.Endpoints.Reactive.IStreamingCollectionEndpoint-1.html",
    "title": "Interface IStreamingCollectionEndpoint<TEntity> | TypedRest for .NET",
    "summary": "Interface IStreamingCollectionEndpoint<TEntity> Namespace TypedRest.Endpoints.Reactive Assembly TypedRest.Reactive.dll Endpoint for a collection of TEntitys observable as an append-only stream. public interface IStreamingCollectionEndpoint<TEntity> : IStreamingCollectionEndpoint<TEntity, IElementEndpoint<TEntity>>, ICollectionEndpoint<TEntity>, ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>, IIndexerEndpoint<IElementEndpoint<TEntity>>, IEndpoint where TEntity : class Type Parameters TEntity The type of entity the endpoint represents. Inherited Members IStreamingCollectionEndpoint<TEntity, IElementEndpoint<TEntity>>.PollingInterval IStreamingCollectionEndpoint<TEntity, IElementEndpoint<TEntity>>.GetObservable(long) ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>.this[TEntity] ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>.ReadAllAllowed ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>.ReadAllAsync(CancellationToken) ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>.ReadRangeAllowed ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>.ReadRangeAsync(RangeItemHeaderValue, CancellationToken) ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>.CreateAllowed ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>.CreateAsync(TEntity, CancellationToken) ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>.CreateAllAllowed ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>.CreateAllAsync(IEnumerable<TEntity>, CancellationToken) ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>.SetAllAllowed ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>.SetAllAsync(IEnumerable<TEntity>, CancellationToken) IIndexerEndpoint<IElementEndpoint<TEntity>>.this[string] IEndpoint.Uri IEndpoint.HttpClient IEndpoint.Serializers IEndpoint.ErrorHandler IEndpoint.LinkExtractor IEndpoint.GetLinks(string) IEndpoint.Link(string) IEndpoint.LinkTemplate(string, IDictionary<string, object>) IEndpoint.LinkTemplate(string, object) Extension Methods CollectionEndpointExtensions.ContainsAsync<TEntity, TElementEndpoint>(ICollectionEndpoint<TEntity, TElementEndpoint>, TEntity, CancellationToken) CollectionEndpointExtensions.DeleteAsync<TEntity, TElementEndpoint>(ICollectionEndpoint<TEntity, TElementEndpoint>, TEntity, CancellationToken) CollectionEndpointExtensions.MergeAsync<TEntity, TElementEndpoint>(ICollectionEndpoint<TEntity, TElementEndpoint>, TEntity, CancellationToken) CollectionEndpointExtensions.SetAsync<TEntity, TElementEndpoint>(ICollectionEndpoint<TEntity, TElementEndpoint>, TEntity, CancellationToken) CollectionEndpointExtensions.ContainsAsync<TElementEndpoint>(IIndexerEndpoint<TElementEndpoint>, string, CancellationToken) CollectionEndpointExtensions.DeleteAsync<TElementEndpoint>(IIndexerEndpoint<TElementEndpoint>, string, CancellationToken)"
  },
  "api/TypedRest.Endpoints.Reactive.IStreamingCollectionEndpoint-2.html": {
    "href": "api/TypedRest.Endpoints.Reactive.IStreamingCollectionEndpoint-2.html",
    "title": "Interface IStreamingCollectionEndpoint<TEntity, TElementEndpoint> | TypedRest for .NET",
    "summary": "Interface IStreamingCollectionEndpoint<TEntity, TElementEndpoint> Namespace TypedRest.Endpoints.Reactive Assembly TypedRest.Reactive.dll Endpoint for a collection of TEntitys observable as an append-only stream. public interface IStreamingCollectionEndpoint<TEntity, out TElementEndpoint> : ICollectionEndpoint<TEntity, TElementEndpoint>, IIndexerEndpoint<TElementEndpoint>, IEndpoint where TEntity : class where TElementEndpoint : IElementEndpoint<TEntity> Type Parameters TEntity The type of individual elements in the collection. TElementEndpoint The type of IEndpoint to provide for individual TEntitys. Inherited Members ICollectionEndpoint<TEntity, TElementEndpoint>.this[TEntity] ICollectionEndpoint<TEntity, TElementEndpoint>.ReadAllAllowed ICollectionEndpoint<TEntity, TElementEndpoint>.ReadAllAsync(CancellationToken) ICollectionEndpoint<TEntity, TElementEndpoint>.ReadRangeAllowed ICollectionEndpoint<TEntity, TElementEndpoint>.ReadRangeAsync(RangeItemHeaderValue, CancellationToken) ICollectionEndpoint<TEntity, TElementEndpoint>.CreateAllowed ICollectionEndpoint<TEntity, TElementEndpoint>.CreateAsync(TEntity, CancellationToken) ICollectionEndpoint<TEntity, TElementEndpoint>.CreateAllAllowed ICollectionEndpoint<TEntity, TElementEndpoint>.CreateAllAsync(IEnumerable<TEntity>, CancellationToken) ICollectionEndpoint<TEntity, TElementEndpoint>.SetAllAllowed ICollectionEndpoint<TEntity, TElementEndpoint>.SetAllAsync(IEnumerable<TEntity>, CancellationToken) IIndexerEndpoint<TElementEndpoint>.this[string] IEndpoint.Uri IEndpoint.HttpClient IEndpoint.Serializers IEndpoint.ErrorHandler IEndpoint.LinkExtractor IEndpoint.GetLinks(string) IEndpoint.Link(string) IEndpoint.LinkTemplate(string, IDictionary<string, object>) IEndpoint.LinkTemplate(string, object) Extension Methods CollectionEndpointExtensions.ContainsAsync<TEntity, TElementEndpoint>(ICollectionEndpoint<TEntity, TElementEndpoint>, TEntity, CancellationToken) CollectionEndpointExtensions.DeleteAsync<TEntity, TElementEndpoint>(ICollectionEndpoint<TEntity, TElementEndpoint>, TEntity, CancellationToken) CollectionEndpointExtensions.MergeAsync<TEntity, TElementEndpoint>(ICollectionEndpoint<TEntity, TElementEndpoint>, TEntity, CancellationToken) CollectionEndpointExtensions.SetAsync<TEntity, TElementEndpoint>(ICollectionEndpoint<TEntity, TElementEndpoint>, TEntity, CancellationToken) CollectionEndpointExtensions.ContainsAsync<TElementEndpoint>(IIndexerEndpoint<TElementEndpoint>, string, CancellationToken) CollectionEndpointExtensions.DeleteAsync<TElementEndpoint>(IIndexerEndpoint<TElementEndpoint>, string, CancellationToken) Remarks Use the more constrained IStreamingCollectionEndpoint<TEntity> when possible. Properties PollingInterval The interval in which to send requests to the server. The server can modify this value using the Retry-After header. TimeSpan PollingInterval { get; set; } Property Value TimeSpan Methods GetObservable(long) Provides an observable stream of elements. IObservable<TEntity> GetObservable(long startIndex = 0) Parameters startIndex long The index of the first element to return in the stream. Use negative values to start counting from the end of the stream. Returns IObservable<TEntity> A cold observable. HTTP communication only starts on Subscribe(IObserver<T>)."
  },
  "api/TypedRest.Endpoints.Reactive.IStreamingEndpoint-1.html": {
    "href": "api/TypedRest.Endpoints.Reactive.IStreamingEndpoint-1.html",
    "title": "Interface IStreamingEndpoint<TEntity> | TypedRest for .NET",
    "summary": "Interface IStreamingEndpoint<TEntity> Namespace TypedRest.Endpoints.Reactive Assembly TypedRest.Reactive.dll Endpoint for a stream of TEntitys. public interface IStreamingEndpoint<out TEntity> : IEndpoint Type Parameters TEntity The type of individual elements in the stream. Inherited Members IEndpoint.Uri IEndpoint.HttpClient IEndpoint.Serializers IEndpoint.ErrorHandler IEndpoint.LinkExtractor IEndpoint.GetLinks(string) IEndpoint.Link(string) IEndpoint.LinkTemplate(string, IDictionary<string, object>) IEndpoint.LinkTemplate(string, object) Methods GetObservable() Provides an observable stream of entities. IObservable<out TEntity> GetObservable() Returns IObservable<TEntity> A cold observable. HTTP communication only starts on Subscribe(IObserver<T>)."
  },
  "api/TypedRest.Endpoints.Reactive.PollingEndpoint-1.html": {
    "href": "api/TypedRest.Endpoints.Reactive.PollingEndpoint-1.html",
    "title": "Class PollingEndpoint<TEntity> | TypedRest for .NET",
    "summary": "Class PollingEndpoint<TEntity> Namespace TypedRest.Endpoints.Reactive Assembly TypedRest.Reactive.dll Endpoint for a resource that can be polled for state changes. public class PollingEndpoint<TEntity> : ElementEndpoint<TEntity>, ICachingEndpoint, IPollingEndpoint<TEntity>, IElementEndpoint<TEntity>, IElementEndpoint, IEndpoint where TEntity : class Type Parameters TEntity The type of entity the endpoint represents. Inheritance object EndpointBase CachingEndpointBase ElementEndpoint<TEntity> PollingEndpoint<TEntity> Implements ICachingEndpoint IPollingEndpoint<TEntity> IElementEndpoint<TEntity> IElementEndpoint IEndpoint Inherited Members ElementEndpoint<TEntity>.Response ElementEndpoint<TEntity>.ReadAsync(CancellationToken) ElementEndpoint<TEntity>.ExistsAsync(CancellationToken) ElementEndpoint<TEntity>.SetAllowed ElementEndpoint<TEntity>.SetAsync(TEntity, CancellationToken) ElementEndpoint<TEntity>.MergeAllowed ElementEndpoint<TEntity>.MergeAsync(TEntity, CancellationToken) ElementEndpoint<TEntity>.DeleteAllowed ElementEndpoint<TEntity>.DeleteAsync(CancellationToken) ElementEndpoint<TEntity>.UpdateAsync(Func<TEntity, TEntity>, int, CancellationToken) ElementEndpoint<TEntity>.UpdateAsync(Action<TEntity>, int, CancellationToken) ElementEndpoint<TEntity>.UpdateAsync(Action<JsonPatchDocument<TEntity>>, int, CancellationToken) CachingEndpointBase.ResponseCache CachingEndpointBase.GetContentAsync(CancellationToken, string) CachingEndpointBase.PutContentAsync(HttpContent, CancellationToken, string) CachingEndpointBase.DeleteContentAsync(CancellationToken, string) EndpointBase.Uri EndpointBase.HttpClient EndpointBase.Serializers EndpointBase.Serializer EndpointBase.ErrorHandler EndpointBase.LinkExtractor EndpointBase.FinalizeAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.StartActivity(string) EndpointBase.SetDefaultLink(string, string) EndpointBase.SetDefaultLinkTemplate(string, string) EndpointBase.GetLinks(string) EndpointBase.Link(string) EndpointBase.GetLinkTemplate(string) EndpointBase.LinkTemplate(string, IDictionary<string, object>) EndpointBase.LinkTemplate(string, object) EndpointBase.HandleCapabilities(HttpResponseMessage) EndpointBase.IsMethodAllowed(HttpMethod) EndpointBase.ToString() EndpointBase.GetConstructor<TEndpoint>() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PollingEndpoint(IEndpoint, string, Predicate<TEntity>?) Creates a new polling endpoint. public PollingEndpoint(IEndpoint referrer, string relativeUri, Predicate<TEntity>? endCondition = null) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri string The URI of this endpoint relative to the referrer's. Add a ./ prefix here to imply a trailing slash referrer's URI. endCondition Predicate<TEntity> A check to determine whether the entity has reached its final state and no further polling is required. PollingEndpoint(IEndpoint, Uri, Predicate<TEntity>?) Creates a new polling endpoint. public PollingEndpoint(IEndpoint referrer, Uri relativeUri, Predicate<TEntity>? endCondition = null) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri Uri The URI of this endpoint relative to the referrer's. endCondition Predicate<TEntity> A check to determine whether the entity has reached its final state and no further polling is required. Properties PollingInterval The interval in which to send requests to the server. The server can modify this value using the Retry-After header. public TimeSpan PollingInterval { get; set; } Property Value TimeSpan Methods GetObservable() Provides an observable stream of entity states. Compares entities using Equals(object) to detect changes. public IObservable<TEntity> GetObservable() Returns IObservable<TEntity> HandleAsync(Func<Task<HttpResponseMessage>>, string) Handles various cross-cutting concerns regarding a response message such as discovering links and handling errors. protected override Task<HttpResponseMessage> HandleAsync(Func<Task<HttpResponseMessage>> request, string caller = \"unknown\") Parameters request Func<Task<HttpResponseMessage>> A callback that performs the actual HTTP request. caller string The name of the method calling this method. Returns Task<HttpResponseMessage> The HTTP response."
  },
  "api/TypedRest.Endpoints.Reactive.StreamingCollectionEndpoint-1.html": {
    "href": "api/TypedRest.Endpoints.Reactive.StreamingCollectionEndpoint-1.html",
    "title": "Class StreamingCollectionEndpoint<TEntity> | TypedRest for .NET",
    "summary": "Class StreamingCollectionEndpoint<TEntity> Namespace TypedRest.Endpoints.Reactive Assembly TypedRest.Reactive.dll Endpoint for a collection of TEntitys observable as an append-only stream using long-polling. public class StreamingCollectionEndpoint<TEntity> : StreamingCollectionEndpoint<TEntity, ElementEndpoint<TEntity>>, ICachingEndpoint, IStreamingCollectionEndpoint<TEntity, ElementEndpoint<TEntity>>, ICollectionEndpoint<TEntity, ElementEndpoint<TEntity>>, IIndexerEndpoint<ElementEndpoint<TEntity>>, IStreamingCollectionEndpoint<TEntity>, IStreamingCollectionEndpoint<TEntity, IElementEndpoint<TEntity>>, ICollectionEndpoint<TEntity>, ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>>, IIndexerEndpoint<IElementEndpoint<TEntity>>, IEndpoint where TEntity : class Type Parameters TEntity The type of entity the endpoint represents. Inheritance object EndpointBase CachingEndpointBase CollectionEndpoint<TEntity, ElementEndpoint<TEntity>> StreamingCollectionEndpoint<TEntity, ElementEndpoint<TEntity>> StreamingCollectionEndpoint<TEntity> Implements ICachingEndpoint IStreamingCollectionEndpoint<TEntity, ElementEndpoint<TEntity>> ICollectionEndpoint<TEntity, ElementEndpoint<TEntity>> IIndexerEndpoint<ElementEndpoint<TEntity>> IStreamingCollectionEndpoint<TEntity> IStreamingCollectionEndpoint<TEntity, IElementEndpoint<TEntity>> ICollectionEndpoint<TEntity> ICollectionEndpoint<TEntity, IElementEndpoint<TEntity>> IIndexerEndpoint<IElementEndpoint<TEntity>> IEndpoint Inherited Members StreamingCollectionEndpoint<TEntity, ElementEndpoint<TEntity>>.HandleAsync(Func<Task<HttpResponseMessage>>, string) StreamingCollectionEndpoint<TEntity, ElementEndpoint<TEntity>>.PollingInterval StreamingCollectionEndpoint<TEntity, ElementEndpoint<TEntity>>.GetObservable(long) CollectionEndpoint<TEntity, ElementEndpoint<TEntity>>.this[string] CollectionEndpoint<TEntity, ElementEndpoint<TEntity>>.this[TEntity] CollectionEndpoint<TEntity, ElementEndpoint<TEntity>>.ReadAllAllowed CollectionEndpoint<TEntity, ElementEndpoint<TEntity>>.ReadAllAsync(CancellationToken) CollectionEndpoint<TEntity, ElementEndpoint<TEntity>>.RangeUnit CollectionEndpoint<TEntity, ElementEndpoint<TEntity>>.HandleCapabilities(HttpResponseMessage) CollectionEndpoint<TEntity, ElementEndpoint<TEntity>>.ReadRangeAllowed CollectionEndpoint<TEntity, ElementEndpoint<TEntity>>.ReadRangeAsync(RangeItemHeaderValue, CancellationToken) CollectionEndpoint<TEntity, ElementEndpoint<TEntity>>.CreateAllowed CollectionEndpoint<TEntity, ElementEndpoint<TEntity>>.CreateAsync(TEntity, CancellationToken) CollectionEndpoint<TEntity, ElementEndpoint<TEntity>>.CreateAllAllowed CollectionEndpoint<TEntity, ElementEndpoint<TEntity>>.CreateAllAsync(IEnumerable<TEntity>, CancellationToken) CollectionEndpoint<TEntity, ElementEndpoint<TEntity>>.SetAllAllowed CollectionEndpoint<TEntity, ElementEndpoint<TEntity>>.SetAllAsync(IEnumerable<TEntity>, CancellationToken) CachingEndpointBase.ResponseCache CachingEndpointBase.GetContentAsync(CancellationToken, string) CachingEndpointBase.PutContentAsync(HttpContent, CancellationToken, string) CachingEndpointBase.DeleteContentAsync(CancellationToken, string) EndpointBase.Uri EndpointBase.HttpClient EndpointBase.Serializers EndpointBase.Serializer EndpointBase.ErrorHandler EndpointBase.LinkExtractor EndpointBase.HandleAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.FinalizeAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.StartActivity(string) EndpointBase.SetDefaultLink(string, string) EndpointBase.SetDefaultLinkTemplate(string, string) EndpointBase.GetLinks(string) EndpointBase.Link(string) EndpointBase.GetLinkTemplate(string) EndpointBase.LinkTemplate(string, IDictionary<string, object>) EndpointBase.LinkTemplate(string, object) EndpointBase.HandleCapabilities(HttpResponseMessage) EndpointBase.IsMethodAllowed(HttpMethod) EndpointBase.ToString() EndpointBase.GetConstructor<TEndpoint>() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors StreamingCollectionEndpoint(IEndpoint, string) Creates a new streaming collection endpoint. public StreamingCollectionEndpoint(IEndpoint referrer, string relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri string The URI of this endpoint relative to the referrer's. Add a ./ prefix here to imply a trailing slash referrer's URI. StreamingCollectionEndpoint(IEndpoint, Uri) Creates a new streaming collection endpoint. public StreamingCollectionEndpoint(IEndpoint referrer, Uri relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri Uri The URI of this endpoint relative to the referrer's."
  },
  "api/TypedRest.Endpoints.Reactive.StreamingCollectionEndpoint-2.html": {
    "href": "api/TypedRest.Endpoints.Reactive.StreamingCollectionEndpoint-2.html",
    "title": "Class StreamingCollectionEndpoint<TEntity, TElementEndpoint> | TypedRest for .NET",
    "summary": "Class StreamingCollectionEndpoint<TEntity, TElementEndpoint> Namespace TypedRest.Endpoints.Reactive Assembly TypedRest.Reactive.dll Endpoint for a collection of TEntitys observable as an append-only stream using long-polling. public class StreamingCollectionEndpoint<TEntity, TElementEndpoint> : CollectionEndpoint<TEntity, TElementEndpoint>, ICachingEndpoint, IStreamingCollectionEndpoint<TEntity, TElementEndpoint>, ICollectionEndpoint<TEntity, TElementEndpoint>, IIndexerEndpoint<TElementEndpoint>, IEndpoint where TEntity : class where TElementEndpoint : class, IElementEndpoint<TEntity> Type Parameters TEntity The type of individual elements in the collection. TElementEndpoint The type of IEndpoint to provide for individual TEntitys. Must have a public constructor with an IEndpoint and an Uri or string parameter. Inheritance object EndpointBase CachingEndpointBase CollectionEndpoint<TEntity, TElementEndpoint> StreamingCollectionEndpoint<TEntity, TElementEndpoint> Implements ICachingEndpoint IStreamingCollectionEndpoint<TEntity, TElementEndpoint> ICollectionEndpoint<TEntity, TElementEndpoint> IIndexerEndpoint<TElementEndpoint> IEndpoint Derived StreamingCollectionEndpoint<TEntity> Inherited Members CollectionEndpoint<TEntity, TElementEndpoint>.this[string] CollectionEndpoint<TEntity, TElementEndpoint>.this[TEntity] CollectionEndpoint<TEntity, TElementEndpoint>.ReadAllAllowed CollectionEndpoint<TEntity, TElementEndpoint>.ReadAllAsync(CancellationToken) CollectionEndpoint<TEntity, TElementEndpoint>.RangeUnit CollectionEndpoint<TEntity, TElementEndpoint>.HandleCapabilities(HttpResponseMessage) CollectionEndpoint<TEntity, TElementEndpoint>.ReadRangeAllowed CollectionEndpoint<TEntity, TElementEndpoint>.ReadRangeAsync(RangeItemHeaderValue, CancellationToken) CollectionEndpoint<TEntity, TElementEndpoint>.CreateAllowed CollectionEndpoint<TEntity, TElementEndpoint>.CreateAsync(TEntity, CancellationToken) CollectionEndpoint<TEntity, TElementEndpoint>.CreateAllAllowed CollectionEndpoint<TEntity, TElementEndpoint>.CreateAllAsync(IEnumerable<TEntity>, CancellationToken) CollectionEndpoint<TEntity, TElementEndpoint>.SetAllAllowed CollectionEndpoint<TEntity, TElementEndpoint>.SetAllAsync(IEnumerable<TEntity>, CancellationToken) CachingEndpointBase.ResponseCache CachingEndpointBase.GetContentAsync(CancellationToken, string) CachingEndpointBase.PutContentAsync(HttpContent, CancellationToken, string) CachingEndpointBase.DeleteContentAsync(CancellationToken, string) EndpointBase.Uri EndpointBase.HttpClient EndpointBase.Serializers EndpointBase.Serializer EndpointBase.ErrorHandler EndpointBase.LinkExtractor EndpointBase.FinalizeAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.StartActivity(string) EndpointBase.SetDefaultLink(string, string) EndpointBase.SetDefaultLinkTemplate(string, string) EndpointBase.GetLinks(string) EndpointBase.Link(string) EndpointBase.GetLinkTemplate(string) EndpointBase.LinkTemplate(string, IDictionary<string, object>) EndpointBase.LinkTemplate(string, object) EndpointBase.HandleCapabilities(HttpResponseMessage) EndpointBase.IsMethodAllowed(HttpMethod) EndpointBase.ToString() EndpointBase.GetConstructor<TEndpoint>() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods CollectionEndpointExtensions.ContainsAsync<TEntity, TElementEndpoint>(ICollectionEndpoint<TEntity, TElementEndpoint>, TEntity, CancellationToken) CollectionEndpointExtensions.DeleteAsync<TEntity, TElementEndpoint>(ICollectionEndpoint<TEntity, TElementEndpoint>, TEntity, CancellationToken) CollectionEndpointExtensions.MergeAsync<TEntity, TElementEndpoint>(ICollectionEndpoint<TEntity, TElementEndpoint>, TEntity, CancellationToken) CollectionEndpointExtensions.SetAsync<TEntity, TElementEndpoint>(ICollectionEndpoint<TEntity, TElementEndpoint>, TEntity, CancellationToken) CollectionEndpointExtensions.ContainsAsync<TElementEndpoint>(IIndexerEndpoint<TElementEndpoint>, string, CancellationToken) CollectionEndpointExtensions.DeleteAsync<TElementEndpoint>(IIndexerEndpoint<TElementEndpoint>, string, CancellationToken) Constructors StreamingCollectionEndpoint(IEndpoint, string) Creates a new streaming collection endpoint. public StreamingCollectionEndpoint(IEndpoint referrer, string relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri string The URI of this endpoint relative to the referrer's. Add a ./ prefix here to imply a trailing slash referrer's URI. StreamingCollectionEndpoint(IEndpoint, Uri) Creates a new streaming collection endpoint. public StreamingCollectionEndpoint(IEndpoint referrer, Uri relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri Uri The URI of this endpoint relative to the referrer's. Properties PollingInterval The interval in which to send requests to the server. The server can modify this value using the Retry-After header. public TimeSpan PollingInterval { get; set; } Property Value TimeSpan Methods GetObservable(long) Provides an observable stream of elements. public IObservable<TEntity> GetObservable(long startIndex = 0) Parameters startIndex long The index of the first element to return in the stream. Use negative values to start counting from the end of the stream. Returns IObservable<TEntity> A cold observable. HTTP communication only starts on Subscribe(IObserver<T>). HandleAsync(Func<Task<HttpResponseMessage>>, string) Handles various cross-cutting concerns regarding a response message such as discovering links and handling errors. protected override Task<HttpResponseMessage> HandleAsync(Func<Task<HttpResponseMessage>> request, string caller = \"unknown\") Parameters request Func<Task<HttpResponseMessage>> A callback that performs the actual HTTP request. caller string The name of the method calling this method. Returns Task<HttpResponseMessage> The HTTP response."
  },
  "api/TypedRest.Endpoints.Reactive.StreamingEndpoint-1.html": {
    "href": "api/TypedRest.Endpoints.Reactive.StreamingEndpoint-1.html",
    "title": "Class StreamingEndpoint<TEntity> | TypedRest for .NET",
    "summary": "Class StreamingEndpoint<TEntity> Namespace TypedRest.Endpoints.Reactive Assembly TypedRest.Reactive.dll Endpoint for a stream of TEntitys using a persistent HTTP connection. public class StreamingEndpoint<TEntity> : EndpointBase, IStreamingEndpoint<TEntity>, IEndpoint Type Parameters TEntity The type of individual elements in the stream. Inheritance object EndpointBase StreamingEndpoint<TEntity> Implements IStreamingEndpoint<TEntity> IEndpoint Inherited Members EndpointBase.Uri EndpointBase.HttpClient EndpointBase.Serializers EndpointBase.Serializer EndpointBase.ErrorHandler EndpointBase.LinkExtractor EndpointBase.HandleAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.FinalizeAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.StartActivity(string) EndpointBase.SetDefaultLink(string, string) EndpointBase.SetDefaultLinkTemplate(string, string) EndpointBase.GetLinks(string) EndpointBase.Link(string) EndpointBase.GetLinkTemplate(string) EndpointBase.LinkTemplate(string, IDictionary<string, object>) EndpointBase.LinkTemplate(string, object) EndpointBase.HandleCapabilities(HttpResponseMessage) EndpointBase.IsMethodAllowed(HttpMethod) EndpointBase.ToString() EndpointBase.GetConstructor<TEndpoint>() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors StreamingEndpoint(IEndpoint, string, string) Creates a new streaming endpoint. public StreamingEndpoint(IEndpoint referrer, string relativeUri, string separator = \"\\n\") Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri string The URI of this endpoint relative to the referrer's. Add a ./ prefix here to imply a trailing slash referrer's URI. separator string The character sequence used to detect that a new element starts in an HTTP stream. StreamingEndpoint(IEndpoint, Uri, string) Endpoint for a stream of TEntitys using a persistent HTTP connection. public StreamingEndpoint(IEndpoint referrer, Uri relativeUri, string separator = \"\\n\") Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri Uri The URI of this endpoint relative to the referrer's. separator string The character sequence used to detect that a new element starts in an HTTP stream. Properties BufferSize The size of the buffer used to collect data for deserialization in bytes. public int BufferSize { get; set; } Property Value int Methods GetObservable() Provides an observable stream of entities. public virtual IObservable<TEntity> GetObservable() Returns IObservable<TEntity> A cold observable. HTTP communication only starts on Subscribe(IObserver<T>)."
  },
  "api/TypedRest.Endpoints.Reactive.html": {
    "href": "api/TypedRest.Endpoints.Reactive.html",
    "title": "Namespace TypedRest.Endpoints.Reactive | TypedRest for .NET",
    "summary": "Namespace TypedRest.Endpoints.Reactive Reactive endpoints allow you to receive data as push streams rather than explicitly pulling. NuGet: TypedRest.Reactive Classes PollingEndpoint<TEntity> Endpoint for a resource that can be polled for state changes. StreamingCollectionEndpoint<TEntity> Endpoint for a collection of TEntitys observable as an append-only stream using long-polling. StreamingCollectionEndpoint<TEntity, TElementEndpoint> Endpoint for a collection of TEntitys observable as an append-only stream using long-polling. StreamingEndpoint<TEntity> Endpoint for a stream of TEntitys using a persistent HTTP connection. Interfaces IPollingEndpoint<TEntity> Endpoint for a resource that can be polled for state changes. IStreamingCollectionEndpoint<TEntity> Endpoint for a collection of TEntitys observable as an append-only stream. IStreamingCollectionEndpoint<TEntity, TElementEndpoint> Endpoint for a collection of TEntitys observable as an append-only stream. IStreamingEndpoint<TEntity> Endpoint for a stream of TEntitys."
  },
  "api/TypedRest.Endpoints.Rpc.ActionEndpoint.html": {
    "href": "api/TypedRest.Endpoints.Rpc.ActionEndpoint.html",
    "title": "Class ActionEndpoint | TypedRest for .NET",
    "summary": "Class ActionEndpoint Namespace TypedRest.Endpoints.Rpc Assembly TypedRest.dll RPC endpoint that is invoked with no input or output. public class ActionEndpoint : RpcEndpointBase, IActionEndpoint, IRpcEndpoint, IEndpoint Inheritance object EndpointBase RpcEndpointBase ActionEndpoint Implements IActionEndpoint IRpcEndpoint IEndpoint Inherited Members RpcEndpointBase.ProbeAsync(CancellationToken) RpcEndpointBase.InvokeAllowed EndpointBase.Uri EndpointBase.HttpClient EndpointBase.Serializers EndpointBase.Serializer EndpointBase.ErrorHandler EndpointBase.LinkExtractor EndpointBase.HandleAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.FinalizeAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.StartActivity(string) EndpointBase.SetDefaultLink(string, string) EndpointBase.SetDefaultLinkTemplate(string, string) EndpointBase.GetLinks(string) EndpointBase.Link(string) EndpointBase.GetLinkTemplate(string) EndpointBase.LinkTemplate(string, IDictionary<string, object>) EndpointBase.LinkTemplate(string, object) EndpointBase.HandleCapabilities(HttpResponseMessage) EndpointBase.IsMethodAllowed(HttpMethod) EndpointBase.ToString() EndpointBase.GetConstructor<TEndpoint>() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ActionEndpoint(IEndpoint, string) Creates a new action endpoint. public ActionEndpoint(IEndpoint referrer, string relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri string The URI of this endpoint relative to the referrer's. Add a ./ prefix here to imply a trailing slash referrer's URI. ActionEndpoint(IEndpoint, Uri) Creates a new action endpoint. public ActionEndpoint(IEndpoint referrer, Uri relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri Uri The URI of this endpoint relative to the referrer's. Methods InvokeAsync(CancellationToken) Invokes the action. public Task InvokeAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Used to cancel the request. Returns Task Exceptions AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code."
  },
  "api/TypedRest.Endpoints.Rpc.ConsumerEndpoint-1.html": {
    "href": "api/TypedRest.Endpoints.Rpc.ConsumerEndpoint-1.html",
    "title": "Class ConsumerEndpoint<TEntity> | TypedRest for .NET",
    "summary": "Class ConsumerEndpoint<TEntity> Namespace TypedRest.Endpoints.Rpc Assembly TypedRest.dll RPC endpoint that takes TEntity as input when invoked. public class ConsumerEndpoint<TEntity> : RpcEndpointBase, IConsumerEndpoint<TEntity>, IRpcEndpoint, IEndpoint Type Parameters TEntity The type of entity the endpoint takes as input. Inheritance object EndpointBase RpcEndpointBase ConsumerEndpoint<TEntity> Implements IConsumerEndpoint<TEntity> IRpcEndpoint IEndpoint Inherited Members RpcEndpointBase.ProbeAsync(CancellationToken) RpcEndpointBase.InvokeAllowed EndpointBase.Uri EndpointBase.HttpClient EndpointBase.Serializers EndpointBase.Serializer EndpointBase.ErrorHandler EndpointBase.LinkExtractor EndpointBase.HandleAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.FinalizeAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.StartActivity(string) EndpointBase.SetDefaultLink(string, string) EndpointBase.SetDefaultLinkTemplate(string, string) EndpointBase.GetLinks(string) EndpointBase.Link(string) EndpointBase.GetLinkTemplate(string) EndpointBase.LinkTemplate(string, IDictionary<string, object>) EndpointBase.LinkTemplate(string, object) EndpointBase.HandleCapabilities(HttpResponseMessage) EndpointBase.IsMethodAllowed(HttpMethod) EndpointBase.ToString() EndpointBase.GetConstructor<TEndpoint>() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ConsumerEndpoint(IEndpoint, string) Creates a new action endpoint with a relative URI. public ConsumerEndpoint(IEndpoint referrer, string relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri string The URI of this endpoint relative to the referrer's. Add a ./ prefix here to imply a trailing slash referrer's URI. ConsumerEndpoint(IEndpoint, Uri) Creates a new action endpoint with a relative URI. public ConsumerEndpoint(IEndpoint referrer, Uri relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri Uri The URI of this endpoint relative to the referrer's. Methods InvokeAsync(TEntity, CancellationToken) Sends the entity to the consumer. public Task InvokeAsync(TEntity entity, CancellationToken cancellationToken = default) Parameters entity TEntity The entity to post as input. cancellationToken CancellationToken Used to cancel the request. Returns Task Exceptions AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code."
  },
  "api/TypedRest.Endpoints.Rpc.FunctionEndpoint-2.html": {
    "href": "api/TypedRest.Endpoints.Rpc.FunctionEndpoint-2.html",
    "title": "Class FunctionEndpoint<TEntity, TResult> | TypedRest for .NET",
    "summary": "Class FunctionEndpoint<TEntity, TResult> Namespace TypedRest.Endpoints.Rpc Assembly TypedRest.dll RPC endpoint that takes TEntity as input and returns TResult as output when invoked. public class FunctionEndpoint<TEntity, TResult> : RpcEndpointBase, IFunctionEndpoint<TEntity, TResult>, IRpcEndpoint, IEndpoint Type Parameters TEntity The type of entity the endpoint takes as input. TResult The type of entity the endpoint returns as output. Inheritance object EndpointBase RpcEndpointBase FunctionEndpoint<TEntity, TResult> Implements IFunctionEndpoint<TEntity, TResult> IRpcEndpoint IEndpoint Inherited Members RpcEndpointBase.ProbeAsync(CancellationToken) RpcEndpointBase.InvokeAllowed EndpointBase.Uri EndpointBase.HttpClient EndpointBase.Serializers EndpointBase.Serializer EndpointBase.ErrorHandler EndpointBase.LinkExtractor EndpointBase.HandleAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.FinalizeAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.StartActivity(string) EndpointBase.SetDefaultLink(string, string) EndpointBase.SetDefaultLinkTemplate(string, string) EndpointBase.GetLinks(string) EndpointBase.Link(string) EndpointBase.GetLinkTemplate(string) EndpointBase.LinkTemplate(string, IDictionary<string, object>) EndpointBase.LinkTemplate(string, object) EndpointBase.HandleCapabilities(HttpResponseMessage) EndpointBase.IsMethodAllowed(HttpMethod) EndpointBase.ToString() EndpointBase.GetConstructor<TEndpoint>() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors FunctionEndpoint(IEndpoint, string) Creates a new function endpoint with a relative URI. public FunctionEndpoint(IEndpoint referrer, string relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri string The URI of this endpoint relative to the referrer's. Add a ./ prefix here to imply a trailing slash referrer's URI. FunctionEndpoint(IEndpoint, Uri) Creates a new function endpoint with a relative URI. public FunctionEndpoint(IEndpoint referrer, Uri relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri Uri The URI of this endpoint relative to the referrer's. Methods InvokeAsync(TEntity, CancellationToken) Invokes the function. public Task<TResult> InvokeAsync(TEntity entity, CancellationToken cancellationToken = default) Parameters entity TEntity The entity to post as input. cancellationToken CancellationToken Used to cancel the request. Returns Task<TResult> The result returned by the server. Exceptions AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code."
  },
  "api/TypedRest.Endpoints.Rpc.IActionEndpoint.html": {
    "href": "api/TypedRest.Endpoints.Rpc.IActionEndpoint.html",
    "title": "Interface IActionEndpoint | TypedRest for .NET",
    "summary": "Interface IActionEndpoint Namespace TypedRest.Endpoints.Rpc Assembly TypedRest.dll RPC endpoint that is invoked with no input or output. public interface IActionEndpoint : IRpcEndpoint, IEndpoint Inherited Members IRpcEndpoint.ProbeAsync(CancellationToken) IRpcEndpoint.InvokeAllowed IEndpoint.Uri IEndpoint.HttpClient IEndpoint.Serializers IEndpoint.ErrorHandler IEndpoint.LinkExtractor IEndpoint.GetLinks(string) IEndpoint.Link(string) IEndpoint.LinkTemplate(string, IDictionary<string, object>) IEndpoint.LinkTemplate(string, object) Methods InvokeAsync(CancellationToken) Invokes the action. Task InvokeAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Used to cancel the request. Returns Task Exceptions AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code."
  },
  "api/TypedRest.Endpoints.Rpc.IConsumerEndpoint-1.html": {
    "href": "api/TypedRest.Endpoints.Rpc.IConsumerEndpoint-1.html",
    "title": "Interface IConsumerEndpoint<TEntity> | TypedRest for .NET",
    "summary": "Interface IConsumerEndpoint<TEntity> Namespace TypedRest.Endpoints.Rpc Assembly TypedRest.dll RPC endpoint that takes TEntity as input when invoked. public interface IConsumerEndpoint<in TEntity> : IRpcEndpoint, IEndpoint Type Parameters TEntity The type of entity the endpoint takes as input. Inherited Members IRpcEndpoint.ProbeAsync(CancellationToken) IRpcEndpoint.InvokeAllowed IEndpoint.Uri IEndpoint.HttpClient IEndpoint.Serializers IEndpoint.ErrorHandler IEndpoint.LinkExtractor IEndpoint.GetLinks(string) IEndpoint.Link(string) IEndpoint.LinkTemplate(string, IDictionary<string, object>) IEndpoint.LinkTemplate(string, object) Methods InvokeAsync(TEntity, CancellationToken) Sends the entity to the consumer. Task InvokeAsync(TEntity entity, CancellationToken cancellationToken = default) Parameters entity TEntity The entity to post as input. cancellationToken CancellationToken Used to cancel the request. Returns Task Exceptions AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code."
  },
  "api/TypedRest.Endpoints.Rpc.IFunctionEndpoint-2.html": {
    "href": "api/TypedRest.Endpoints.Rpc.IFunctionEndpoint-2.html",
    "title": "Interface IFunctionEndpoint<TEntity, TResult> | TypedRest for .NET",
    "summary": "Interface IFunctionEndpoint<TEntity, TResult> Namespace TypedRest.Endpoints.Rpc Assembly TypedRest.dll RPC endpoint that takes TEntity as input and returns TResult as output when invoked. public interface IFunctionEndpoint<in TEntity, TResult> : IRpcEndpoint, IEndpoint Type Parameters TEntity The type of entity the endpoint takes as input. TResult The type of entity the endpoint returns as output. Inherited Members IRpcEndpoint.ProbeAsync(CancellationToken) IRpcEndpoint.InvokeAllowed IEndpoint.Uri IEndpoint.HttpClient IEndpoint.Serializers IEndpoint.ErrorHandler IEndpoint.LinkExtractor IEndpoint.GetLinks(string) IEndpoint.Link(string) IEndpoint.LinkTemplate(string, IDictionary<string, object>) IEndpoint.LinkTemplate(string, object) Methods InvokeAsync(TEntity, CancellationToken) Invokes the function. Task<TResult> InvokeAsync(TEntity entity, CancellationToken cancellationToken = default) Parameters entity TEntity The entity to post as input. cancellationToken CancellationToken Used to cancel the request. Returns Task<TResult> The result returned by the server. Exceptions AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code."
  },
  "api/TypedRest.Endpoints.Rpc.IProducerEndpoint-1.html": {
    "href": "api/TypedRest.Endpoints.Rpc.IProducerEndpoint-1.html",
    "title": "Interface IProducerEndpoint<TResult> | TypedRest for .NET",
    "summary": "Interface IProducerEndpoint<TResult> Namespace TypedRest.Endpoints.Rpc Assembly TypedRest.dll RPC endpoint that takes no input and returns TResult as output when invoked. public interface IProducerEndpoint<out TResult> : IRpcEndpoint, IEndpoint Type Parameters TResult The type of entity the endpoint returns as output. Inherited Members IRpcEndpoint.ProbeAsync(CancellationToken) IRpcEndpoint.InvokeAllowed IEndpoint.Uri IEndpoint.HttpClient IEndpoint.Serializers IEndpoint.ErrorHandler IEndpoint.LinkExtractor IEndpoint.GetLinks(string) IEndpoint.Link(string) IEndpoint.LinkTemplate(string, IDictionary<string, object>) IEndpoint.LinkTemplate(string, object) Methods InvokeAsync(CancellationToken) Gets a result from the producer. ITask<out TResult> InvokeAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Used to cancel the request. Returns ITask<TResult> The result returned by the server. Exceptions AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code."
  },
  "api/TypedRest.Endpoints.Rpc.IRpcEndpoint.html": {
    "href": "api/TypedRest.Endpoints.Rpc.IRpcEndpoint.html",
    "title": "Interface IRpcEndpoint | TypedRest for .NET",
    "summary": "Interface IRpcEndpoint Namespace TypedRest.Endpoints.Rpc Assembly TypedRest.dll An endpoint for a non-RESTful resource that acts like a callable function. public interface IRpcEndpoint : IEndpoint Inherited Members IEndpoint.Uri IEndpoint.HttpClient IEndpoint.Serializers IEndpoint.ErrorHandler IEndpoint.LinkExtractor IEndpoint.GetLinks(string) IEndpoint.Link(string) IEndpoint.LinkTemplate(string, IDictionary<string, object>) IEndpoint.LinkTemplate(string, object) Properties InvokeAllowed Indicates whether the server has specified the invoke method is currently allowed. bool? InvokeAllowed { get; } Property Value bool? true if the method is allowed, false if the method is not allowed, null If no request has been sent yet or the server did not specify allowed methods. Remarks Uses cached data from last response. Methods ProbeAsync(CancellationToken) Queries the server about capabilities of the endpoint without performing any action. Task ProbeAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Used to cancel the request. Returns Task Exceptions AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code."
  },
  "api/TypedRest.Endpoints.Rpc.ProducerEndpoint-1.html": {
    "href": "api/TypedRest.Endpoints.Rpc.ProducerEndpoint-1.html",
    "title": "Class ProducerEndpoint<TResult> | TypedRest for .NET",
    "summary": "Class ProducerEndpoint<TResult> Namespace TypedRest.Endpoints.Rpc Assembly TypedRest.dll RPC endpoint that returns TResult as output when invoked. public class ProducerEndpoint<TResult> : RpcEndpointBase, IProducerEndpoint<TResult>, IRpcEndpoint, IEndpoint Type Parameters TResult The type of entity the endpoint returns as output. Inheritance object EndpointBase RpcEndpointBase ProducerEndpoint<TResult> Implements IProducerEndpoint<TResult> IRpcEndpoint IEndpoint Inherited Members RpcEndpointBase.ProbeAsync(CancellationToken) RpcEndpointBase.InvokeAllowed EndpointBase.Uri EndpointBase.HttpClient EndpointBase.Serializers EndpointBase.Serializer EndpointBase.ErrorHandler EndpointBase.LinkExtractor EndpointBase.HandleAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.FinalizeAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.StartActivity(string) EndpointBase.SetDefaultLink(string, string) EndpointBase.SetDefaultLinkTemplate(string, string) EndpointBase.GetLinks(string) EndpointBase.Link(string) EndpointBase.GetLinkTemplate(string) EndpointBase.LinkTemplate(string, IDictionary<string, object>) EndpointBase.LinkTemplate(string, object) EndpointBase.HandleCapabilities(HttpResponseMessage) EndpointBase.IsMethodAllowed(HttpMethod) EndpointBase.ToString() EndpointBase.GetConstructor<TEndpoint>() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ProducerEndpoint(IEndpoint, string) Creates a new function endpoint with a relative URI. public ProducerEndpoint(IEndpoint referrer, string relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri string The URI of this endpoint relative to the referrer's. Add a ./ prefix here to imply a trailing slash referrer's URI. ProducerEndpoint(IEndpoint, Uri) Creates a new function endpoint with a relative URI. public ProducerEndpoint(IEndpoint referrer, Uri relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri Uri The URI of this endpoint relative to the referrer's. Methods InvokeAsync(CancellationToken) Gets a result from the producer. public ITask<TResult> InvokeAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Used to cancel the request. Returns ITask<TResult> The result returned by the server. Exceptions AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code."
  },
  "api/TypedRest.Endpoints.Rpc.RpcEndpointBase.html": {
    "href": "api/TypedRest.Endpoints.Rpc.RpcEndpointBase.html",
    "title": "Class RpcEndpointBase | TypedRest for .NET",
    "summary": "Class RpcEndpointBase Namespace TypedRest.Endpoints.Rpc Assembly TypedRest.dll Base class for building RPC endpoints. public abstract class RpcEndpointBase : EndpointBase, IRpcEndpoint, IEndpoint Inheritance object EndpointBase RpcEndpointBase Implements IRpcEndpoint IEndpoint Derived ActionEndpoint ConsumerEndpoint<TEntity> FunctionEndpoint<TEntity, TResult> ProducerEndpoint<TResult> Inherited Members EndpointBase.Uri EndpointBase.HttpClient EndpointBase.Serializers EndpointBase.Serializer EndpointBase.ErrorHandler EndpointBase.LinkExtractor EndpointBase.HandleAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.FinalizeAsync(Func<Task<HttpResponseMessage>>, string) EndpointBase.StartActivity(string) EndpointBase.SetDefaultLink(string, string) EndpointBase.SetDefaultLinkTemplate(string, string) EndpointBase.GetLinks(string) EndpointBase.Link(string) EndpointBase.GetLinkTemplate(string) EndpointBase.LinkTemplate(string, IDictionary<string, object>) EndpointBase.LinkTemplate(string, object) EndpointBase.HandleCapabilities(HttpResponseMessage) EndpointBase.IsMethodAllowed(HttpMethod) EndpointBase.ToString() EndpointBase.GetConstructor<TEndpoint>() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RpcEndpointBase(IEndpoint, string) Creates a new RPC endpoint with a relative URI. protected RpcEndpointBase(IEndpoint referrer, string relativeUri) Parameters referrer IEndpoint relativeUri string RpcEndpointBase(IEndpoint, Uri) Base class for building RPC endpoints. protected RpcEndpointBase(IEndpoint referrer, Uri relativeUri) Parameters referrer IEndpoint The endpoint used to navigate to this one. relativeUri Uri The URI of this endpoint relative to the referrer's. Add a ./ prefix here to imply a trailing slash referrer's URI. Properties InvokeAllowed Indicates whether the server has specified the invoke method is currently allowed. public bool? InvokeAllowed { get; } Property Value bool? true if the method is allowed, false if the method is not allowed, null If no request has been sent yet or the server did not specify allowed methods. Remarks Uses cached data from last response. Methods ProbeAsync(CancellationToken) Queries the server about capabilities of the endpoint without performing any action. public Task ProbeAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Used to cancel the request. Returns Task Exceptions AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone HttpRequestException Other non-success status code."
  },
  "api/TypedRest.Endpoints.Rpc.html": {
    "href": "api/TypedRest.Endpoints.Rpc.html",
    "title": "Namespace TypedRest.Endpoints.Rpc | TypedRest for .NET",
    "summary": "Namespace TypedRest.Endpoints.Rpc RPC endpoints allow you to interact with non-RESTful resources that act like callable functions. Classes ActionEndpoint RPC endpoint that is invoked with no input or output. ConsumerEndpoint<TEntity> RPC endpoint that takes TEntity as input when invoked. FunctionEndpoint<TEntity, TResult> RPC endpoint that takes TEntity as input and returns TResult as output when invoked. ProducerEndpoint<TResult> RPC endpoint that returns TResult as output when invoked. RpcEndpointBase Base class for building RPC endpoints. Interfaces IActionEndpoint RPC endpoint that is invoked with no input or output. IConsumerEndpoint<TEntity> RPC endpoint that takes TEntity as input when invoked. IFunctionEndpoint<TEntity, TResult> RPC endpoint that takes TEntity as input and returns TResult as output when invoked. IProducerEndpoint<TResult> RPC endpoint that takes no input and returns TResult as output when invoked. IRpcEndpoint An endpoint for a non-RESTful resource that acts like a callable function."
  },
  "api/TypedRest.Endpoints.html": {
    "href": "api/TypedRest.Endpoints.html",
    "title": "Namespace TypedRest.Endpoints | TypedRest for .NET",
    "summary": "Namespace TypedRest.Endpoints Endpoints represent URIs that provides methods for operating on specific resources. Namespaces TypedRest.Endpoints.Generic Generic endpoints allow you to model collections and elements. TypedRest.Endpoints.Raw Raw endpoints allow you to transmit binary data rather than serialized objects. TypedRest.Endpoints.Reactive Reactive endpoints allow you to receive data as push streams rather than explicitly pulling. NuGet: TypedRest.Reactive TypedRest.Endpoints.Rpc RPC endpoints allow you to interact with non-RESTful resources that act like callable functions. Classes EndpointBase Base class for building endpoints, i.e. remote HTTP resources. EntryEndpoint Represent the top-level URI of an API. Derive from this class and add your own set of child-IEndpoints as properties. Interfaces ICachingEndpoint Endpoint that caches the last response. IEndpoint Endpoint, i.e. a remote HTTP resource."
  },
  "api/TypedRest.Errors.DefaultErrorHandler.html": {
    "href": "api/TypedRest.Errors.DefaultErrorHandler.html",
    "title": "Class DefaultErrorHandler | TypedRest for .NET",
    "summary": "Class DefaultErrorHandler Namespace TypedRest.Errors Assembly TypedRest.dll Handles errors in HTTP responses by mapping status codes to common exception types. public class DefaultErrorHandler : IErrorHandler Inheritance object DefaultErrorHandler Implements IErrorHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ExtractMessage(string, MediaTypeHeaderValue?) Tries to extract an error message from the response body. protected virtual string? ExtractMessage(string body, MediaTypeHeaderValue? contentType) Parameters body string The response body in string form. contentType MediaTypeHeaderValue The content type of the response body. Returns string HandleAsync(HttpResponseMessage) Throws appropriate Exceptions based on HTTP status codes and response bodies. public Task HandleAsync(HttpResponseMessage response) Parameters response HttpResponseMessage Returns Task Exceptions InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone InvalidOperationException Conflict, PreconditionFailed or RequestedRangeNotSatisfiable HttpRequestException Other non-success status code. MapException(HttpStatusCode, string) Maps the HTTP status code to an exception. protected virtual Exception MapException(HttpStatusCode statusCode, string message) Parameters statusCode HttpStatusCode The status code. message string An error message to include in the exception. Returns Exception"
  },
  "api/TypedRest.Errors.IErrorHandler.html": {
    "href": "api/TypedRest.Errors.IErrorHandler.html",
    "title": "Interface IErrorHandler | TypedRest for .NET",
    "summary": "Interface IErrorHandler Namespace TypedRest.Errors Assembly TypedRest.dll Handles errors in HTTP responses. public interface IErrorHandler Methods HandleAsync(HttpResponseMessage) Throws appropriate Exceptions based on HTTP status codes and response bodies. Task HandleAsync(HttpResponseMessage response) Parameters response HttpResponseMessage Returns Task Exceptions InvalidDataException BadRequest AuthenticationException Unauthorized UnauthorizedAccessException Forbidden KeyNotFoundException NotFound or Gone InvalidOperationException Conflict, PreconditionFailed or RequestedRangeNotSatisfiable HttpRequestException Other non-success status code."
  },
  "api/TypedRest.Errors.html": {
    "href": "api/TypedRest.Errors.html",
    "title": "Namespace TypedRest.Errors | TypedRest for .NET",
    "summary": "Namespace TypedRest.Errors Handling errors in HTTP responses. Classes DefaultErrorHandler Handles errors in HTTP responses by mapping status codes to common exception types. Interfaces IErrorHandler Handles errors in HTTP responses."
  },
  "api/TypedRest.ExceptionExtensions.html": {
    "href": "api/TypedRest.ExceptionExtensions.html",
    "title": "Class ExceptionExtensions | TypedRest for .NET",
    "summary": "Class ExceptionExtensions Namespace TypedRest Assembly TypedRest.dll Provides extension methods for Exception. public static class ExceptionExtensions Inheritance object ExceptionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetFullMessage(Exception) Concatenates the Messages of the entire InnerException tree. public static string GetFullMessage(this Exception exception) Parameters exception Exception Returns string GetHttpResponseBody(Exception) Retrieves an HTTP response body from the exception. public static string? GetHttpResponseBody(this Exception exception) Parameters exception Exception Returns string GetHttpResponseHeaders(Exception) Retrieves HTTP response headers from the exception. public static HttpResponseHeaders? GetHttpResponseHeaders(this Exception exception) Parameters exception Exception Returns HttpResponseHeaders HttpRetryDelayAsync(Exception, CancellationToken) Waits for the duration specified in Retry-After header if it was set. public static Task HttpRetryDelayAsync(this Exception exception, CancellationToken cancellationToken = default) Parameters exception Exception cancellationToken CancellationToken Returns Task SetHttpResponseBody(Exception, string) Stores an HTTP response body in the exception. public static void SetHttpResponseBody(this Exception exception, string body) Parameters exception Exception body string SetHttpResponseHeaders(Exception, HttpResponseHeaders) Stores HTTP response headers in the exception. public static void SetHttpResponseHeaders(this Exception exception, HttpResponseHeaders headers) Parameters exception Exception headers HttpResponseHeaders"
  },
  "api/TypedRest.Http.HttpClientExtensions.html": {
    "href": "api/TypedRest.Http.HttpClientExtensions.html",
    "title": "Class HttpClientExtensions | TypedRest for .NET",
    "summary": "Class HttpClientExtensions Namespace TypedRest.Http Assembly TypedRest.dll Provides extension methods for HttpClient. public static class HttpClientExtensions Inheritance object HttpClientExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddBasicAuth(HttpClient, NetworkCredential) Adds HTTP Basic authentication. public static void AddBasicAuth(this HttpClient httpClient, NetworkCredential credentials) Parameters httpClient HttpClient The HTTP client to configure. credentials NetworkCredential The credentials to use. HeadAsync(HttpClient, Uri, CancellationToken) Send a HEAD request to the specified URI. public static Task<HttpResponseMessage> HeadAsync(this HttpClient httpClient, Uri uri, CancellationToken cancellationToken = default) Parameters httpClient HttpClient uri Uri cancellationToken CancellationToken Returns Task<HttpResponseMessage> OptionsAsync(HttpClient, Uri, CancellationToken) Send an OPTIONS request to the specified URI. public static Task<HttpResponseMessage> OptionsAsync(this HttpClient httpClient, Uri uri, CancellationToken cancellationToken = default) Parameters httpClient HttpClient uri Uri cancellationToken CancellationToken Returns Task<HttpResponseMessage> PatchAsync<T>(HttpClient, Uri, T, MediaTypeFormatter, CancellationToken) public static Task<HttpResponseMessage> PatchAsync<T>(this HttpClient httpClient, Uri uri, T value, MediaTypeFormatter formatter, CancellationToken cancellationToken = default) Parameters httpClient HttpClient uri Uri value T formatter MediaTypeFormatter cancellationToken CancellationToken Returns Task<HttpResponseMessage> Type Parameters T"
  },
  "api/TypedRest.Http.HttpContentExtensions.html": {
    "href": "api/TypedRest.Http.HttpContentExtensions.html",
    "title": "Class HttpContentExtensions | TypedRest for .NET",
    "summary": "Class HttpContentExtensions Namespace TypedRest.Http Assembly TypedRest.dll Provides extension methods for HttpContent. public static class HttpContentExtensions Inheritance object HttpContentExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ReadAsAsync<T>(HttpContent, IReadOnlyList<MediaTypeFormatter>, CancellationToken) Deserializes HTTP content as an object. public static Task<T> ReadAsAsync<T>(this HttpContent content, IReadOnlyList<MediaTypeFormatter> serializers, CancellationToken cancellationToken = default) Parameters content HttpContent The HTTP content from which to read. serializers IReadOnlyList<MediaTypeFormatter> A list of serializers available for deserializing the body. cancellationToken CancellationToken Used to cancel the request. Returns Task<T> Type Parameters T The type of the object to read."
  },
  "api/TypedRest.Http.HttpEntityStream-1.html": {
    "href": "api/TypedRest.Http.HttpEntityStream-1.html",
    "title": "Class HttpEntityStream<TEntity> | TypedRest for .NET",
    "summary": "Class HttpEntityStream<TEntity> Namespace TypedRest.Http Assembly TypedRest.Reactive.dll Exposes an HTTP body as a stream of deserialized entities. public class HttpEntityStream<TEntity> Type Parameters TEntity The type of entity this stream provides. Inheritance object HttpEntityStream<TEntity> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HttpEntityStream(HttpContent, MediaTypeFormatter, string, int) Creates a new HTTP entity stream. public HttpEntityStream(HttpContent content, MediaTypeFormatter serializer, string separator, int bufferSize) Parameters content HttpContent The HTTP body. serializer MediaTypeFormatter Used to deserialize entities in the body. separator string The character sequence used to detect that a new element starts in an HTTP stream. bufferSize int The size of the buffer used to collect data for deserialization in bytes. Methods GetNextAsync(CancellationToken) Retrieves the next entity from the stream. public Task<TEntity> GetNextAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Used to cancel the request. Returns Task<TEntity> Exceptions EndOfStreamException The stream has ended and there are no further entities. TaskCanceledException The cancellationToken was triggered."
  },
  "api/TypedRest.Http.HttpMethods.html": {
    "href": "api/TypedRest.Http.HttpMethods.html",
    "title": "Class HttpMethods | TypedRest for .NET",
    "summary": "Class HttpMethods Namespace TypedRest.Http Assembly TypedRest.dll Provides additional values for HttpMethod. public static class HttpMethods Inheritance object HttpMethods Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Patch Represents an HTTP PATCH protocol method that is used to modify an existing entity at a URI. public static HttpMethod Patch { get; } Property Value HttpMethod"
  },
  "api/TypedRest.Http.HttpResponseHeadersExtensions.html": {
    "href": "api/TypedRest.Http.HttpResponseHeadersExtensions.html",
    "title": "Class HttpResponseHeadersExtensions | TypedRest for .NET",
    "summary": "Class HttpResponseHeadersExtensions Namespace TypedRest.Http Assembly TypedRest.Reactive.dll Provides extension methods for HttpResponseHeaders. public static class HttpResponseHeadersExtensions Inheritance object HttpResponseHeadersExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RetryAfterDuration(HttpResponseHeaders) Returns the relative waiting time extracted from the Retry-After header if any. public static TimeSpan? RetryAfterDuration(this HttpResponseHeaders headers) Parameters headers HttpResponseHeaders Returns TimeSpan?"
  },
  "api/TypedRest.Http.PartialResponse-1.html": {
    "href": "api/TypedRest.Http.PartialResponse-1.html",
    "title": "Class PartialResponse<TEntity> | TypedRest for .NET",
    "summary": "Class PartialResponse<TEntity> Namespace TypedRest.Http Assembly TypedRest.dll Represents a subset of a set of elements. public sealed class PartialResponse<TEntity> Type Parameters TEntity The type of element the response contains. Inheritance object PartialResponse<TEntity> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors PartialResponse(IReadOnlyList<TEntity>, ContentRangeHeaderValue?) Represents a subset of a set of elements. public PartialResponse(IReadOnlyList<TEntity> elements, ContentRangeHeaderValue? range) Parameters elements IReadOnlyList<TEntity> The returned elements. range ContentRangeHeaderValue The range the elements come from. Properties Elements The returned elements. public IReadOnlyList<TEntity> Elements { get; } Property Value IReadOnlyList<TEntity> EndReached Indicates whether the response reaches the end of the elements available on the server. public bool EndReached { get; } Property Value bool Range The range the Elements come from. public ContentRangeHeaderValue? Range { get; } Property Value ContentRangeHeaderValue"
  },
  "api/TypedRest.Http.ResponseCache.html": {
    "href": "api/TypedRest.Http.ResponseCache.html",
    "title": "Class ResponseCache | TypedRest for .NET",
    "summary": "Class ResponseCache Namespace TypedRest.Http Assembly TypedRest.dll Captures the content of an HttpResponseMessage for caching. public sealed class ResponseCache Inheritance object ResponseCache Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties IsExpired Indicates whether this cached response has expired. public bool IsExpired { get; } Property Value bool Methods From(HttpResponseMessage) Creates a ResponseCache from a response if it is eligible for caching. public static ResponseCache? From(HttpResponseMessage response) Parameters response HttpResponseMessage Returns ResponseCache The ResponseCache; null if the response is not eligible for caching. GetContent() Returns a copy of the cached HttpContent. public HttpContent GetContent() Returns HttpContent SetIfModifiedHeaders(HttpRequestHeaders) Sets request headers that require that the resource has been modified since it was cached. public void SetIfModifiedHeaders(HttpRequestHeaders headers) Parameters headers HttpRequestHeaders SetIfUnmodifiedHeaders(HttpRequestHeaders) Sets request headers that require that the resource has not been modified since it was cached. public void SetIfUnmodifiedHeaders(HttpRequestHeaders headers) Parameters headers HttpRequestHeaders"
  },
  "api/TypedRest.Http.html": {
    "href": "api/TypedRest.Http.html",
    "title": "Namespace TypedRest.Http | TypedRest for .NET",
    "summary": "Namespace TypedRest.Http Helper methods and structures for performing HTTP requests. Classes HttpClientExtensions Provides extension methods for HttpClient. HttpContentExtensions Provides extension methods for HttpContent. HttpEntityStream<TEntity> Exposes an HTTP body as a stream of deserialized entities. HttpMethods Provides additional values for HttpMethod. HttpResponseHeadersExtensions Provides extension methods for HttpResponseHeaders. PartialResponse<TEntity> Represents a subset of a set of elements. ResponseCache Captures the content of an HttpResponseMessage for caching."
  },
  "api/TypedRest.Links.AggregateLinkExtractor.html": {
    "href": "api/TypedRest.Links.AggregateLinkExtractor.html",
    "title": "Class AggregateLinkExtractor | TypedRest for .NET",
    "summary": "Class AggregateLinkExtractor Namespace TypedRest.Links Assembly TypedRest.dll Combines the results of multiple ILinkExtractors. public sealed class AggregateLinkExtractor : ILinkExtractor Inheritance object AggregateLinkExtractor Implements ILinkExtractor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors AggregateLinkExtractor(params ILinkExtractor[]) Creates a new aggregate link extractor. public AggregateLinkExtractor(params ILinkExtractor[] extractors) Parameters extractors ILinkExtractor[] The link extractors to aggregate. Methods GetLinksAsync(HttpResponseMessage) Extracts links from the response. public Task<IReadOnlyList<Link>> GetLinksAsync(HttpResponseMessage response) Parameters response HttpResponseMessage Returns Task<IReadOnlyList<Link>> Exceptions FormatException One or more of the links found are invalid (e.g. missing a 'rel' type)."
  },
  "api/TypedRest.Links.HalLinkExtractor.html": {
    "href": "api/TypedRest.Links.HalLinkExtractor.html",
    "title": "Class HalLinkExtractor | TypedRest for .NET",
    "summary": "Class HalLinkExtractor Namespace TypedRest.Links Assembly TypedRest.dll Extracts links from JSON bodies according to the Hypertext Application Language (HAL) specification. public sealed class HalLinkExtractor : ILinkExtractor Inheritance object HalLinkExtractor Implements ILinkExtractor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods GetLinksAsync(HttpResponseMessage) Extracts links from the response. public Task<IReadOnlyList<Link>> GetLinksAsync(HttpResponseMessage response) Parameters response HttpResponseMessage Returns Task<IReadOnlyList<Link>> Exceptions FormatException One or more of the links found are invalid (e.g. missing a 'rel' type)."
  },
  "api/TypedRest.Links.HeaderLinkExtractor.html": {
    "href": "api/TypedRest.Links.HeaderLinkExtractor.html",
    "title": "Class HeaderLinkExtractor | TypedRest for .NET",
    "summary": "Class HeaderLinkExtractor Namespace TypedRest.Links Assembly TypedRest.dll Extracts links from HTTP headers. public sealed class HeaderLinkExtractor : ILinkExtractor Inheritance object HeaderLinkExtractor Implements ILinkExtractor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods GetLinksAsync(HttpResponseMessage) Extracts links from the response. public Task<IReadOnlyList<Link>> GetLinksAsync(HttpResponseMessage response) Parameters response HttpResponseMessage Returns Task<IReadOnlyList<Link>> Exceptions FormatException One or more of the links found are invalid (e.g. missing a 'rel' type)."
  },
  "api/TypedRest.Links.ILinkExtractor.html": {
    "href": "api/TypedRest.Links.ILinkExtractor.html",
    "title": "Interface ILinkExtractor | TypedRest for .NET",
    "summary": "Interface ILinkExtractor Namespace TypedRest.Links Assembly TypedRest.dll Extracts links from responses. public interface ILinkExtractor Methods GetLinksAsync(HttpResponseMessage) Extracts links from the response. Task<IReadOnlyList<Link>> GetLinksAsync(HttpResponseMessage response) Parameters response HttpResponseMessage Returns Task<IReadOnlyList<Link>> Exceptions FormatException One or more of the links found are invalid (e.g. missing a 'rel' type)."
  },
  "api/TypedRest.Links.Link.html": {
    "href": "api/TypedRest.Links.Link.html",
    "title": "Class Link | TypedRest for .NET",
    "summary": "Class Link Namespace TypedRest.Links Assembly TypedRest.dll Represents a link to another resource. public sealed class Link Inheritance object Link Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Link(string, string, string?, bool) Creates a new link public Link(string rel, string href, string? title = null, bool templated = false) Parameters rel string The relation type of the link. href string The href/target of the link. title string The title of the link (optional). templated bool Indicates whether the link is an URI Template (RFC 6570). Properties Href The href/target of the link. public string Href { get; } Property Value string Rel The relation type of the link. public string Rel { get; } Property Value string Templated Indicates whether the link is an URI Template (RFC 6570). public bool Templated { get; } Property Value bool Title The title of the link (optional). public string? Title { get; } Property Value string"
  },
  "api/TypedRest.Links.html": {
    "href": "api/TypedRest.Links.html",
    "title": "Namespace TypedRest.Links | TypedRest for .NET",
    "summary": "Namespace TypedRest.Links Handling links between HTTP resources. Classes AggregateLinkExtractor Combines the results of multiple ILinkExtractors. HalLinkExtractor Extracts links from JSON bodies according to the Hypertext Application Language (HAL) specification. HeaderLinkExtractor Extracts links from HTTP headers. Link Represents a link to another resource. Interfaces ILinkExtractor Extracts links from responses."
  },
  "api/TypedRest.OAuth.HttpClientBuilderExtensions.html": {
    "href": "api/TypedRest.OAuth.HttpClientBuilderExtensions.html",
    "title": "Class HttpClientBuilderExtensions | TypedRest for .NET",
    "summary": "Class HttpClientBuilderExtensions Namespace TypedRest.OAuth Assembly TypedRest.OAuth.dll Provides extension methods for IHttpClientBuilder. public static class HttpClientBuilderExtensions Inheritance object HttpClientBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddOAuthHandler(IHttpClientBuilder, Action<OAuthOptions>) Adds an HTTP message delegating handler that transparently performs OAuth 2.0 authentication with a client secret. public static IHttpClientBuilder AddOAuthHandler(this IHttpClientBuilder builder, Action<OAuthOptions> configureOptions) Parameters builder IHttpClientBuilder The builder to apply the configuration to. configureOptions Action<OAuthOptions> A delegate that is used to configure OAuthOptions. Returns IHttpClientBuilder AddOAuthHandler(IHttpClientBuilder, Func<IServiceProvider, OAuthOptions>) Adds an HTTP message delegating handler that transparently performs OAuth 2.0 authentication with a client secret. public static IHttpClientBuilder AddOAuthHandler(this IHttpClientBuilder builder, Func<IServiceProvider, OAuthOptions> configureOptions) Parameters builder IHttpClientBuilder The builder to apply the configuration to. configureOptions Func<IServiceProvider, OAuthOptions> A delegate that is used to provide OAuthOptions. Returns IHttpClientBuilder AddOAuthHandler(IHttpClientBuilder, Uri, string, string) Adds an HTTP message delegating handler that transparently performs OAuth 2.0 authentication with a client secret. public static IHttpClientBuilder AddOAuthHandler(this IHttpClientBuilder builder, Uri uri, string clientId, string clientSecret) Parameters builder IHttpClientBuilder The builder to apply the configuration to. uri Uri The URI of the identity server to request an authentication token from. clientId string The client identifier to present to the identity server. clientSecret string The client secret to present to the identity server. Returns IHttpClientBuilder"
  },
  "api/TypedRest.OAuth.OAuthHandler.html": {
    "href": "api/TypedRest.OAuth.OAuthHandler.html",
    "title": "Class OAuthHandler | TypedRest for .NET",
    "summary": "Class OAuthHandler Namespace TypedRest.OAuth Assembly TypedRest.OAuth.dll HTTP message delegating handler that transparently performs OAuth 2.0 authentication with a client secret. Performs OpenID Connect discovery to find the token endpoint. public class OAuthHandler : DelegatingHandler, IDisposable Inheritance object HttpMessageHandler DelegatingHandler OAuthHandler Implements IDisposable Inherited Members DelegatingHandler.Dispose(bool) DelegatingHandler.Send(HttpRequestMessage, CancellationToken) DelegatingHandler.InnerHandler HttpMessageHandler.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OAuthHandler(OAuthOptions, HttpMessageHandler?) Creates a new OAuth handler. public OAuthHandler(OAuthOptions oAuthOptions, HttpMessageHandler? innerHandler = null) Parameters oAuthOptions OAuthOptions Options for OAuth 2.0 / OpenID Connect authentication. innerHandler HttpMessageHandler An optional inner HTTP message handler to delegate to. Methods SendAsync(HttpRequestMessage, CancellationToken) Sends an HTTP request to the inner handler to send to the server as an asynchronous operation. protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) Parameters request HttpRequestMessage The HTTP request message to send to the server. cancellationToken CancellationToken A cancellation token to cancel operation. Returns Task<HttpResponseMessage> The task object representing the asynchronous operation. Exceptions ArgumentNullException The request was null."
  },
  "api/TypedRest.OAuth.OAuthOptions.html": {
    "href": "api/TypedRest.OAuth.OAuthOptions.html",
    "title": "Class OAuthOptions | TypedRest for .NET",
    "summary": "Class OAuthOptions Namespace TypedRest.OAuth Assembly TypedRest.OAuth.dll Options for OAuth 2.0 / OpenID Connect authentication. public class OAuthOptions Inheritance object OAuthOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Audience The audience to request an authentication token for. public string? Audience { get; set; } Property Value string ClientId The client identifier to present to the identity server. public string ClientId { get; set; } Property Value string ClientSecret The client secret to present to the identity server. public string ClientSecret { get; set; } Property Value string Scope The scope to request an authentication token for. public string? Scope { get; set; } Property Value string TokenLifetimeBuffer How long before a token expires to request a new one. public TimeSpan TokenLifetimeBuffer { get; set; } Property Value TimeSpan Uri The URI of the identity server to request an authentication token from. public Uri Uri { get; set; } Property Value Uri"
  },
  "api/TypedRest.OAuth.html": {
    "href": "api/TypedRest.OAuth.html",
    "title": "Namespace TypedRest.OAuth | TypedRest for .NET",
    "summary": "Namespace TypedRest.OAuth HttpClient DelegatingHandler for OAuth 2.0 / OpenID Connect authentication. NuGet: TypedRest.OAuth Classes HttpClientBuilderExtensions Provides extension methods for IHttpClientBuilder. OAuthHandler HTTP message delegating handler that transparently performs OAuth 2.0 authentication with a client secret. Performs OpenID Connect discovery to find the token endpoint. OAuthOptions Options for OAuth 2.0 / OpenID Connect authentication."
  },
  "api/TypedRest.Serializers.BsonSerializer.html": {
    "href": "api/TypedRest.Serializers.BsonSerializer.html",
    "title": "Class BsonSerializer | TypedRest for .NET",
    "summary": "Class BsonSerializer Namespace TypedRest.Serializers Assembly TypedRest.dll Handles serializing/deserializing from/to BSON using Newtonsoft.Json. Uses camel-case naming and does not serialize null by default. public class BsonSerializer : BsonMediaTypeFormatter Inheritance object MediaTypeFormatter BaseJsonMediaTypeFormatter BsonMediaTypeFormatter BsonSerializer Inherited Members BsonMediaTypeFormatter.ReadFromStreamAsync(Type, Stream, HttpContent, IFormatterLogger) BsonMediaTypeFormatter.ReadFromStream(Type, Stream, Encoding, IFormatterLogger) BsonMediaTypeFormatter.CreateJsonReader(Type, Stream, Encoding) BsonMediaTypeFormatter.WriteToStream(Type, object, Stream, Encoding) BsonMediaTypeFormatter.CreateJsonWriter(Type, Stream, Encoding) BsonMediaTypeFormatter.DefaultMediaType BsonMediaTypeFormatter.MaxDepth BaseJsonMediaTypeFormatter.CreateDefaultSerializerSettings() BaseJsonMediaTypeFormatter.CanReadType(Type) BaseJsonMediaTypeFormatter.CanWriteType(Type) BaseJsonMediaTypeFormatter.CreateJsonSerializer() BaseJsonMediaTypeFormatter.WriteToStreamAsync(Type, object, Stream, HttpContent, TransportContext, CancellationToken) BaseJsonMediaTypeFormatter.SerializerSettings MediaTypeFormatter.ReadFromStreamAsync(Type, Stream, HttpContent, IFormatterLogger, CancellationToken) MediaTypeFormatter.WriteToStreamAsync(Type, object, Stream, HttpContent, TransportContext) MediaTypeFormatter.SelectCharacterEncoding(HttpContentHeaders) MediaTypeFormatter.SetDefaultContentHeaders(Type, HttpContentHeaders, MediaTypeHeaderValue) MediaTypeFormatter.GetPerRequestFormatterInstance(Type, HttpRequestMessage, MediaTypeHeaderValue) MediaTypeFormatter.GetDefaultValueForType(Type) MediaTypeFormatter.MaxHttpCollectionKeys MediaTypeFormatter.SupportedMediaTypes MediaTypeFormatter.SupportedEncodings MediaTypeFormatter.MediaTypeMappings MediaTypeFormatter.RequiredMemberSelector object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BsonSerializer() public BsonSerializer()"
  },
  "api/TypedRest.Serializers.NewtonsoftJsonSerializer.html": {
    "href": "api/TypedRest.Serializers.NewtonsoftJsonSerializer.html",
    "title": "Class NewtonsoftJsonSerializer | TypedRest for .NET",
    "summary": "Class NewtonsoftJsonSerializer Namespace TypedRest.Serializers Assembly TypedRest.dll Handles serializing/deserializing from/to JSON using Newtonsoft.Json. Uses camel-case naming and does not serialize null by default. public class NewtonsoftJsonSerializer : JsonMediaTypeFormatter Inheritance object MediaTypeFormatter BaseJsonMediaTypeFormatter JsonMediaTypeFormatter NewtonsoftJsonSerializer Inherited Members JsonMediaTypeFormatter.CreateJsonReader(Type, Stream, Encoding) JsonMediaTypeFormatter.CreateJsonWriter(Type, Stream, Encoding) JsonMediaTypeFormatter.CanReadType(Type) JsonMediaTypeFormatter.CanWriteType(Type) JsonMediaTypeFormatter.ReadFromStream(Type, Stream, Encoding, IFormatterLogger) JsonMediaTypeFormatter.WriteToStreamAsync(Type, object, Stream, HttpContent, TransportContext, CancellationToken) JsonMediaTypeFormatter.WriteToStream(Type, object, Stream, Encoding) JsonMediaTypeFormatter.CreateDataContractSerializer(Type) JsonMediaTypeFormatter.DefaultMediaType JsonMediaTypeFormatter.UseDataContractJsonSerializer JsonMediaTypeFormatter.Indent JsonMediaTypeFormatter.MaxDepth BaseJsonMediaTypeFormatter.CreateDefaultSerializerSettings() BaseJsonMediaTypeFormatter.ReadFromStreamAsync(Type, Stream, HttpContent, IFormatterLogger) BaseJsonMediaTypeFormatter.CreateJsonSerializer() BaseJsonMediaTypeFormatter.SerializerSettings MediaTypeFormatter.ReadFromStreamAsync(Type, Stream, HttpContent, IFormatterLogger, CancellationToken) MediaTypeFormatter.WriteToStreamAsync(Type, object, Stream, HttpContent, TransportContext) MediaTypeFormatter.SelectCharacterEncoding(HttpContentHeaders) MediaTypeFormatter.SetDefaultContentHeaders(Type, HttpContentHeaders, MediaTypeHeaderValue) MediaTypeFormatter.GetPerRequestFormatterInstance(Type, HttpRequestMessage, MediaTypeHeaderValue) MediaTypeFormatter.GetDefaultValueForType(Type) MediaTypeFormatter.MaxHttpCollectionKeys MediaTypeFormatter.SupportedMediaTypes MediaTypeFormatter.SupportedEncodings MediaTypeFormatter.MediaTypeMappings MediaTypeFormatter.RequiredMemberSelector object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NewtonsoftJsonSerializer() public NewtonsoftJsonSerializer()"
  },
  "api/TypedRest.Serializers.SystemTextJsonSerializer.html": {
    "href": "api/TypedRest.Serializers.SystemTextJsonSerializer.html",
    "title": "Class SystemTextJsonSerializer | TypedRest for .NET",
    "summary": "Class SystemTextJsonSerializer Namespace TypedRest.Serializers Assembly TypedRest.SystemTextJson.dll Handles serializing/deserializing from/to JSON using System.Text.Json. Uses camel-case naming and does not serialize null by default. NuGet: TypedRest.SystemTextJson public class SystemTextJsonSerializer : MediaTypeFormatter Inheritance object MediaTypeFormatter SystemTextJsonSerializer Inherited Members MediaTypeFormatter.SelectCharacterEncoding(HttpContentHeaders) MediaTypeFormatter.SetDefaultContentHeaders(Type, HttpContentHeaders, MediaTypeHeaderValue) MediaTypeFormatter.GetPerRequestFormatterInstance(Type, HttpRequestMessage, MediaTypeHeaderValue) MediaTypeFormatter.GetDefaultValueForType(Type) MediaTypeFormatter.MaxHttpCollectionKeys MediaTypeFormatter.SupportedMediaTypes MediaTypeFormatter.SupportedEncodings MediaTypeFormatter.MediaTypeMappings MediaTypeFormatter.RequiredMemberSelector object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SystemTextJsonSerializer() public SystemTextJsonSerializer() Properties Options Serializer options. public JsonSerializerOptions Options { get; } Property Value JsonSerializerOptions Methods CanReadType(Type) Queries whether this MediaTypeFormatter can deserializean object of the specified type. public override bool CanReadType(Type type) Parameters type Type The type to deserialize. Returns bool true if the MediaTypeFormatter can deserialize the type; otherwise, false. CanWriteType(Type) Queries whether this MediaTypeFormatter can serializean object of the specified type. public override bool CanWriteType(Type type) Parameters type Type The type to serialize. Returns bool true if the MediaTypeFormatter can serialize the type; otherwise, false. ReadFromStreamAsync(Type, Stream, HttpContent, IFormatterLogger) Asynchronously deserializes an object of the specified type. public override Task<object?> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger) Parameters type Type The type of the object to deserialize. readStream Stream The Stream to read. content HttpContent The HttpContent, if available. It may be null. formatterLogger IFormatterLogger The IFormatterLogger to log events to. Returns Task<object> A Task whose result will be an object of the given type. Exceptions NotSupportedException Derived types need to support reading. ReadFromStreamAsync(Type, Stream, HttpContent, IFormatterLogger, CancellationToken) Asynchronously deserializes an object of the specified type. public override Task<object?> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger, CancellationToken cancellationToken) Parameters type Type The type of the object to deserialize. readStream Stream The Stream to read. content HttpContent The HttpContent, if available. It may be null. formatterLogger IFormatterLogger The IFormatterLogger to log events to. cancellationToken CancellationToken The token to cancel the operation. Returns Task<object> A Task whose result will be an object of the given type. WriteToStreamAsync(Type, object, Stream, HttpContent, TransportContext) Asynchronously writes an object of the specified type. public override Task WriteToStreamAsync(Type type, object value, Stream writeStream, HttpContent content, TransportContext transportContext) Parameters type Type The type of the object to write. value object The object value to write. It may be null. writeStream Stream The Stream to which to write. content HttpContent The HttpContent if available. It may be null. transportContext TransportContext The TransportContext if available. It may be null. Returns Task A Task that will perform the write. Exceptions NotSupportedException Derived types need to support writing. WriteToStreamAsync(Type, object, Stream, HttpContent, TransportContext, CancellationToken) Asynchronously writes an object of the specified type. public override Task WriteToStreamAsync(Type type, object value, Stream writeStream, HttpContent content, TransportContext transportContext, CancellationToken cancellationToken) Parameters type Type The type of the object to write. value object The object value to write. It may be null. writeStream Stream The Stream to which to write. content HttpContent The HttpContent if available. It may be null. transportContext TransportContext The TransportContext if available. It may be null. cancellationToken CancellationToken The token to cancel the operation. Returns Task A Task that will perform the write. Exceptions NotSupportedException Derived types need to support writing."
  },
  "api/TypedRest.Serializers.XmlSerializer.html": {
    "href": "api/TypedRest.Serializers.XmlSerializer.html",
    "title": "Class XmlSerializer | TypedRest for .NET",
    "summary": "Class XmlSerializer Namespace TypedRest.Serializers Assembly TypedRest.dll Handles serializing/deserializing from/to XML using XmlSerializer. public class XmlSerializer : XmlMediaTypeFormatter Inheritance object MediaTypeFormatter XmlMediaTypeFormatter XmlSerializer Inherited Members XmlMediaTypeFormatter.SetSerializer(Type, XmlObjectSerializer) XmlMediaTypeFormatter.SetSerializer<T>(XmlObjectSerializer) XmlMediaTypeFormatter.SetSerializer(Type, XmlSerializer) XmlMediaTypeFormatter.SetSerializer<T>(XmlSerializer) XmlMediaTypeFormatter.RemoveSerializer(Type) XmlMediaTypeFormatter.CanReadType(Type) XmlMediaTypeFormatter.CanWriteType(Type) XmlMediaTypeFormatter.ReadFromStreamAsync(Type, Stream, HttpContent, IFormatterLogger) XmlMediaTypeFormatter.GetDeserializer(Type, HttpContent) XmlMediaTypeFormatter.CreateXmlReader(Stream, HttpContent) XmlMediaTypeFormatter.WriteToStreamAsync(Type, object, Stream, HttpContent, TransportContext, CancellationToken) XmlMediaTypeFormatter.GetSerializer(Type, object, HttpContent) XmlMediaTypeFormatter.CreateXmlWriter(Stream, HttpContent) XmlMediaTypeFormatter.CreateXmlSerializer(Type) XmlMediaTypeFormatter.CreateDataContractSerializer(Type) XmlMediaTypeFormatter.DefaultMediaType XmlMediaTypeFormatter.UseXmlSerializer XmlMediaTypeFormatter.Indent XmlMediaTypeFormatter.WriterSettings XmlMediaTypeFormatter.MaxDepth MediaTypeFormatter.ReadFromStreamAsync(Type, Stream, HttpContent, IFormatterLogger, CancellationToken) MediaTypeFormatter.WriteToStreamAsync(Type, object, Stream, HttpContent, TransportContext) MediaTypeFormatter.SelectCharacterEncoding(HttpContentHeaders) MediaTypeFormatter.SetDefaultContentHeaders(Type, HttpContentHeaders, MediaTypeHeaderValue) MediaTypeFormatter.GetPerRequestFormatterInstance(Type, HttpRequestMessage, MediaTypeHeaderValue) MediaTypeFormatter.GetDefaultValueForType(Type) MediaTypeFormatter.MaxHttpCollectionKeys MediaTypeFormatter.SupportedMediaTypes MediaTypeFormatter.SupportedEncodings MediaTypeFormatter.MediaTypeMappings MediaTypeFormatter.RequiredMemberSelector object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors XmlSerializer() public XmlSerializer()"
  },
  "api/TypedRest.Serializers.html": {
    "href": "api/TypedRest.Serializers.html",
    "title": "Namespace TypedRest.Serializers | TypedRest for .NET",
    "summary": "Namespace TypedRest.Serializers Serialization of entities sent to and received from the server. Classes BsonSerializer Handles serializing/deserializing from/to BSON using Newtonsoft.Json. Uses camel-case naming and does not serialize null by default. NewtonsoftJsonSerializer Handles serializing/deserializing from/to JSON using Newtonsoft.Json. Uses camel-case naming and does not serialize null by default. SystemTextJsonSerializer Handles serializing/deserializing from/to JSON using System.Text.Json. Uses camel-case naming and does not serialize null by default. NuGet: TypedRest.SystemTextJson XmlSerializer Handles serializing/deserializing from/to XML using XmlSerializer."
  },
  "api/TypedRest.ServiceCollectionExtensions.html": {
    "href": "api/TypedRest.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | TypedRest for .NET",
    "summary": "Class ServiceCollectionExtensions Namespace TypedRest Assembly TypedRest.dll Provides extension methods for IServiceCollection. public static class ServiceCollectionExtensions Inheritance object ServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddBasicAuth(IHttpClientBuilder, Action<NetworkCredential>) Adds HTTP Basic authentication. public static IHttpClientBuilder AddBasicAuth(this IHttpClientBuilder builder, Action<NetworkCredential> configureCredentials) Parameters builder IHttpClientBuilder The builder to apply the configuration to. configureCredentials Action<NetworkCredential> A delegate that is used to configure NetworkCredential. Returns IHttpClientBuilder AddBasicAuth(IHttpClientBuilder, ICredentials) Adds HTTP Basic authentication. public static IHttpClientBuilder AddBasicAuth(this IHttpClientBuilder builder, ICredentials credentials) Parameters builder IHttpClientBuilder The builder to apply the configuration to. credentials ICredentials A credential provider. Will be queried using BaseAddress as the uri and \"Basic\" as the authType. Returns IHttpClientBuilder AddTypedRest(IServiceCollection, Uri) Registers EntryEndpoint for dependency injection. public static IHttpClientBuilder AddTypedRest(this IServiceCollection services, Uri uri) Parameters services IServiceCollection The IServiceCollection. uri Uri The base URI of the REST API. Missing trailing slash will be appended automatically. Returns IHttpClientBuilder An IHttpClientBuilder that can be used to configure the underlying HttpClient. AddTypedRest<TEndpoint>(IServiceCollection, Uri) Registers a type derived from EntryEndpoint for dependency injection. public static IHttpClientBuilder AddTypedRest<TEndpoint>(this IServiceCollection services, Uri uri) where TEndpoint : EntryEndpoint Parameters services IServiceCollection The IServiceCollection. uri Uri The base URI of the REST API. Missing trailing slash will be appended automatically. Returns IHttpClientBuilder An IHttpClientBuilder that can be used to configure the underlying HttpClient. Type Parameters TEndpoint The type of the EntryEndpoint. Must provide a constructor that accepts an HttpClient. AddTypedRest<TInterface, TEndpoint>(IServiceCollection, Uri) Registers a type derived from EntryEndpoint for dependency injection. public static IHttpClientBuilder AddTypedRest<TInterface, TEndpoint>(this IServiceCollection services, Uri uri) where TInterface : class where TEndpoint : EntryEndpoint, TInterface Parameters services IServiceCollection The IServiceCollection. uri Uri The base URI of the REST API. Missing trailing slash will be appended automatically. Returns IHttpClientBuilder An IHttpClientBuilder that can be used to configure the underlying HttpClient. Type Parameters TInterface The interface to register. TEndpoint The type of the EntryEndpoint. Must provide a constructor that accepts an HttpClient."
  },
  "api/TypedRest.TaskExtensions.html": {
    "href": "api/TypedRest.TaskExtensions.html",
    "title": "Class TaskExtensions | TypedRest for .NET",
    "summary": "Class TaskExtensions Namespace TypedRest Assembly TypedRest.dll Provides extension methods for Task and Task<TResult>. public static class TaskExtensions Inheritance object TaskExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods NoContext(Task) Convenience wrapper for ConfigureAwait(bool)(false). public static ConfiguredTaskAwaitable NoContext(this Task task) Parameters task Task Returns ConfiguredTaskAwaitable NoContext<TResult>(Task<TResult>) Convenience wrapper for ConfigureAwait(bool)(false). public static ConfiguredTaskAwaitable<TResult> NoContext<TResult>(this Task<TResult> task) Parameters task Task<TResult> Returns ConfiguredTaskAwaitable<TResult> Type Parameters TResult"
  },
  "api/TypedRest.TypeExtensions.html": {
    "href": "api/TypedRest.TypeExtensions.html",
    "title": "Class TypeExtensions | TypedRest for .NET",
    "summary": "Class TypeExtensions Namespace TypedRest Assembly TypedRest.dll Provides extension methods for Type. public static class TypeExtensions Inheritance object TypeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetConstructor<T1, T2, TResult>() Returns a constructor for TResult with two arguments as a function. public static Func<T1, T2, TResult>? GetConstructor<T1, T2, TResult>() Returns Func<T1, T2, TResult> The function; null if no suitable constructor was found. Type Parameters T1 The type of the first constructor argument. T2 The type of the second constructor argument. TResult The type to construct. GetPropertyWith<TAttribute>(Type) Gets a property defined on a type that is annotated with a specific TAttribute. public static PropertyInfo? GetPropertyWith<TAttribute>(this Type type) where TAttribute : Attribute Parameters type Type Returns PropertyInfo The property; null if no such property was found. Type Parameters TAttribute ToFunc<TSource, TResult>(MethodInfo) Converts a method into a function that takes the object instance as a parameter. public static Func<TSource, TResult> ToFunc<TSource, TResult>(this MethodInfo method) Parameters method MethodInfo Returns Func<TSource, TResult> Type Parameters TSource The type of the class defining the method. TResult The return type of the method."
  },
  "api/TypedRest.UriExtensions.html": {
    "href": "api/TypedRest.UriExtensions.html",
    "title": "Class UriExtensions | TypedRest for .NET",
    "summary": "Class UriExtensions Namespace TypedRest Assembly TypedRest.dll Provides extension methods for Uri. public static class UriExtensions Inheritance object UriExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods EnsureTrailingSlash(Uri) Adds a trailing slash to the URI if it does not already have one. public static Uri EnsureTrailingSlash(this Uri uri) Parameters uri Uri Returns Uri ExtractCredentials(Uri) Extracts credentials from user info in URI if set. public static NetworkCredential? ExtractCredentials(this Uri uri) Parameters uri Uri Returns NetworkCredential Join(Uri, string) Resolves a relative URI using this URI as the base. public static Uri Join(this Uri baseUri, string relativeUri) Parameters baseUri Uri The base URI to resolve from. relativeUri string The relative URI to resolve. Add a ./ prefix here to imply a trailing slash in baseUri even if it is missing there. Returns Uri Examples Debug.Assert(new Uri(\"http://myhost/path\").Join(\"./subpath\") == new Uri(\"http://myhost/path/subpath\")); Join(Uri, Uri) Resolves a relative URI using this URI as the base. public static Uri Join(this Uri baseUri, Uri relativeUri) Parameters baseUri Uri The base URI to resolve from. relativeUri Uri The relative URI to resolve. Add a ./ prefix here to imply a trailing slash in baseUri even if it is missing there. Returns Uri Examples Debug.Assert(new Uri(\"http://myhost/path\").Join(new Uri(\"./subpath\", UriKind.Relative)) == new Uri(\"http://myhost/path/subpath\"));"
  },
  "api/TypedRest.html": {
    "href": "api/TypedRest.html",
    "title": "Namespace TypedRest | TypedRest for .NET",
    "summary": "Namespace TypedRest TypedRest helps you build type-safe fluent-style REST API clients NuGet: TypedRest Namespaces TypedRest.CommandLine Build command-line interfaces for TypedRest clients. NuGet: TypedRest.CommandLine TypedRest.Endpoints Endpoints represent URIs that provides methods for operating on specific resources. TypedRest.Errors Handling errors in HTTP responses. TypedRest.Http Helper methods and structures for performing HTTP requests. TypedRest.Links Handling links between HTTP resources. TypedRest.OAuth HttpClient DelegatingHandler for OAuth 2.0 / OpenID Connect authentication. NuGet: TypedRest.OAuth TypedRest.Serializers Serialization of entities sent to and received from the server. Classes ActivityExtensions Provides extension methods for Activity. ArrayExtensions Provides extension methods for arrays. ExceptionExtensions Provides extension methods for Exception. ServiceCollectionExtensions Provides extension methods for IServiceCollection. TaskExtensions Provides extension methods for Task and Task<TResult>. TypeExtensions Provides extension methods for Type. UriExtensions Provides extension methods for Uri."
  },
  "index.html": {
    "href": "index.html",
    "title": "Home | TypedRest for .NET",
    "summary": "TypedRest for .NET TypedRest helps you build type-safe, fluent-style REST API clients. Common REST patterns such as collections are represented as classes, allowing you to write more idiomatic code. var client = new MyClient(new Uri(\"http://example.com/\")); // GET /contacts List<Contact> contactList = await client.Contacts.ReadAllAsync(); // POST /contacts -> Location: /contacts/1337 ContactEndpoint smith = await client.Contacts.CreateAsync(new Contact {Name = \"Smith\"}); //ContactEndpoint smith = client.Contacts[\"1337\"]; // GET /contacts/1337 Contact contact = await smith.ReadAsync(); // PUT /contacts/1337/note await smith.Note.SetAsync(new Note {Content = \"some note\"}); // GET /contacts/1337/note Note note = await smith.Note.ReadAsync(); // DELETE /contacts/1337 await smith.DeleteAsync(); Read a more detailed Introduction to TypedRest or jump right in with the Getting started guide. Take a look at the TypedRest.Endpoints.Generic namespace to get an overview of the available functionality. NuGet packages TypedRest The main TypedRest library. TypedRest.Reactive Adds support for streaming with ReactiveX (Rx). Create endpoints using the types in the TypedRest.Endpoints.Reactive namespace. TypedRest.SystemTextJson Adds support for serializing using System.Text.Json instead of Newtonsoft.Json. Pass a SystemTextJsonSerializer instance to the EntryEndpoint constructor. TypedRest.OAuth Adds support for OAuth 2.0 / OpenID Connect authentication to HttpClient. Call .AddOAuthHandler() after .AddTypedRest() (or .AddHttpClient() when not using main TypedRest package). TypedRest.CommandLine Build command-line interfaces for TypedRest clients. Create commands mirroring the endpoints using the types in the TypedRest.CommandLine.Commands namespace."
  }
}